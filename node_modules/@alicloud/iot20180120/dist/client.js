"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddDataForApiSourceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiId: 'ApiId',
            content: 'Content',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            apiId: 'string',
            content: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.AddDataForApiSourceRequest = AddDataForApiSourceRequest;
class AddDataForApiSourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'number',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.AddDataForApiSourceResponseBody = AddDataForApiSourceResponseBody;
class AddDataForApiSourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: AddDataForApiSourceResponseBody,
        };
    }
}
exports.AddDataForApiSourceResponse = AddDataForApiSourceResponse;
class BatchAddDeviceGroupRelationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            device: 'Device',
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            device: { 'type': 'array', 'itemType': BatchAddDeviceGroupRelationsRequestDevice },
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchAddDeviceGroupRelationsRequest = BatchAddDeviceGroupRelationsRequest;
class BatchAddDeviceGroupRelationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alreadyRelatedGroupDeviceCount: 'AlreadyRelatedGroupDeviceCount',
            code: 'Code',
            errorMessage: 'ErrorMessage',
            exceedTenGroupDeviceCount: 'ExceedTenGroupDeviceCount',
            requestId: 'RequestId',
            success: 'Success',
            successAddedDeviceCount: 'SuccessAddedDeviceCount',
            validDeviceCount: 'ValidDeviceCount',
        };
    }
    static types() {
        return {
            alreadyRelatedGroupDeviceCount: 'number',
            code: 'string',
            errorMessage: 'string',
            exceedTenGroupDeviceCount: 'number',
            requestId: 'string',
            success: 'boolean',
            successAddedDeviceCount: 'number',
            validDeviceCount: 'number',
        };
    }
}
exports.BatchAddDeviceGroupRelationsResponseBody = BatchAddDeviceGroupRelationsResponseBody;
class BatchAddDeviceGroupRelationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchAddDeviceGroupRelationsResponseBody,
        };
    }
}
exports.BatchAddDeviceGroupRelationsResponse = BatchAddDeviceGroupRelationsResponse;
class BatchAddThingTopoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gwDeviceName: 'GwDeviceName',
            gwProductKey: 'GwProductKey',
            iotInstanceId: 'IotInstanceId',
            topoAddItem: 'TopoAddItem',
        };
    }
    static types() {
        return {
            gwDeviceName: 'string',
            gwProductKey: 'string',
            iotInstanceId: 'string',
            topoAddItem: { 'type': 'array', 'itemType': BatchAddThingTopoRequestTopoAddItem },
        };
    }
}
exports.BatchAddThingTopoRequest = BatchAddThingTopoRequest;
class BatchAddThingTopoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchAddThingTopoResponseBody = BatchAddThingTopoResponseBody;
class BatchAddThingTopoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchAddThingTopoResponseBody,
        };
    }
}
exports.BatchAddThingTopoResponse = BatchAddThingTopoResponse;
class BatchBindDeviceToEdgeInstanceWithDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchBindDeviceToEdgeInstanceWithDriverRequest = BatchBindDeviceToEdgeInstanceWithDriverRequest;
class BatchBindDeviceToEdgeInstanceWithDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchBindDeviceToEdgeInstanceWithDriverResponseBody = BatchBindDeviceToEdgeInstanceWithDriverResponseBody;
class BatchBindDeviceToEdgeInstanceWithDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody,
        };
    }
}
exports.BatchBindDeviceToEdgeInstanceWithDriverResponse = BatchBindDeviceToEdgeInstanceWithDriverResponse;
class BatchBindDevicesIntoProjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            devices: 'Devices',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            devices: { 'type': 'array', 'itemType': BatchBindDevicesIntoProjectRequestDevices },
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.BatchBindDevicesIntoProjectRequest = BatchBindDevicesIntoProjectRequest;
class BatchBindDevicesIntoProjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchBindDevicesIntoProjectResponseBody = BatchBindDevicesIntoProjectResponseBody;
class BatchBindDevicesIntoProjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchBindDevicesIntoProjectResponseBody,
        };
    }
}
exports.BatchBindDevicesIntoProjectResponse = BatchBindDevicesIntoProjectResponse;
class BatchBindProductsIntoProjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKeys: 'ProductKeys',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKeys: { 'type': 'array', 'itemType': 'string' },
            projectId: 'string',
        };
    }
}
exports.BatchBindProductsIntoProjectRequest = BatchBindProductsIntoProjectRequest;
class BatchBindProductsIntoProjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchBindProductsIntoProjectResponseBody = BatchBindProductsIntoProjectResponseBody;
class BatchBindProductsIntoProjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchBindProductsIntoProjectResponseBody,
        };
    }
}
exports.BatchBindProductsIntoProjectResponse = BatchBindProductsIntoProjectResponse;
class BatchCheckDeviceNamesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceNameList: 'DeviceNameList',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            deviceNameList: { 'type': 'array', 'itemType': BatchCheckDeviceNamesRequestDeviceNameList },
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchCheckDeviceNamesRequest = BatchCheckDeviceNamesRequest;
class BatchCheckDeviceNamesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchCheckDeviceNamesResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchCheckDeviceNamesResponseBody = BatchCheckDeviceNamesResponseBody;
class BatchCheckDeviceNamesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchCheckDeviceNamesResponseBody,
        };
    }
}
exports.BatchCheckDeviceNamesResponse = BatchCheckDeviceNamesResponse;
class BatchClearEdgeInstanceDeviceConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchClearEdgeInstanceDeviceConfigRequest = BatchClearEdgeInstanceDeviceConfigRequest;
class BatchClearEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchClearEdgeInstanceDeviceConfigResponseBody = BatchClearEdgeInstanceDeviceConfigResponseBody;
class BatchClearEdgeInstanceDeviceConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchClearEdgeInstanceDeviceConfigResponseBody,
        };
    }
}
exports.BatchClearEdgeInstanceDeviceConfigResponse = BatchClearEdgeInstanceDeviceConfigResponse;
class BatchDeleteDeviceGroupRelationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            device: 'Device',
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            device: { 'type': 'array', 'itemType': BatchDeleteDeviceGroupRelationsRequestDevice },
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchDeleteDeviceGroupRelationsRequest = BatchDeleteDeviceGroupRelationsRequest;
class BatchDeleteDeviceGroupRelationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alreadyRelatedGroupDeviceCount: 'AlreadyRelatedGroupDeviceCount',
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            successDeviceCount: 'SuccessDeviceCount',
            validDeviceCount: 'ValidDeviceCount',
        };
    }
    static types() {
        return {
            alreadyRelatedGroupDeviceCount: 'number',
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            successDeviceCount: 'number',
            validDeviceCount: 'number',
        };
    }
}
exports.BatchDeleteDeviceGroupRelationsResponseBody = BatchDeleteDeviceGroupRelationsResponseBody;
class BatchDeleteDeviceGroupRelationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchDeleteDeviceGroupRelationsResponseBody,
        };
    }
}
exports.BatchDeleteDeviceGroupRelationsResponse = BatchDeleteDeviceGroupRelationsResponse;
class BatchDeleteEdgeInstanceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelIds: 'ChannelIds',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            channelIds: { 'type': 'array', 'itemType': 'string' },
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchDeleteEdgeInstanceChannelRequest = BatchDeleteEdgeInstanceChannelRequest;
class BatchDeleteEdgeInstanceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchDeleteEdgeInstanceChannelResponseBody = BatchDeleteEdgeInstanceChannelResponseBody;
class BatchDeleteEdgeInstanceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchDeleteEdgeInstanceChannelResponseBody,
        };
    }
}
exports.BatchDeleteEdgeInstanceChannelResponse = BatchDeleteEdgeInstanceChannelResponse;
class BatchGetDeviceBindStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetDeviceBindStatusRequest = BatchGetDeviceBindStatusRequest;
class BatchGetDeviceBindStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': BatchGetDeviceBindStatusResponseBodyData },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetDeviceBindStatusResponseBody = BatchGetDeviceBindStatusResponseBody;
class BatchGetDeviceBindStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetDeviceBindStatusResponseBody,
        };
    }
}
exports.BatchGetDeviceBindStatusResponse = BatchGetDeviceBindStatusResponse;
class BatchGetDeviceStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            iotId: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchGetDeviceStateRequest = BatchGetDeviceStateRequest;
class BatchGetDeviceStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deviceStatusList: 'DeviceStatusList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deviceStatusList: BatchGetDeviceStateResponseBodyDeviceStatusList,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetDeviceStateResponseBody = BatchGetDeviceStateResponseBody;
class BatchGetDeviceStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetDeviceStateResponseBody,
        };
    }
}
exports.BatchGetDeviceStateResponse = BatchGetDeviceStateResponse;
class BatchGetEdgeDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverIds: 'DriverIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeDriverRequest = BatchGetEdgeDriverRequest;
class BatchGetEdgeDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            driverList: 'DriverList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            driverList: { 'type': 'array', 'itemType': BatchGetEdgeDriverResponseBodyDriverList },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeDriverResponseBody = BatchGetEdgeDriverResponseBody;
class BatchGetEdgeDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeDriverResponseBody,
        };
    }
}
exports.BatchGetEdgeDriverResponse = BatchGetEdgeDriverResponse;
class BatchGetEdgeInstanceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelIds: 'ChannelIds',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            channelIds: { 'type': 'array', 'itemType': 'string' },
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceChannelRequest = BatchGetEdgeInstanceChannelRequest;
class BatchGetEdgeInstanceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchGetEdgeInstanceChannelResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponseBody = BatchGetEdgeInstanceChannelResponseBody;
class BatchGetEdgeInstanceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeInstanceChannelResponseBody,
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponse = BatchGetEdgeInstanceChannelResponse;
class BatchGetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceChannelRequest = BatchGetEdgeInstanceDeviceChannelRequest;
class BatchGetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deviceChannelList: 'DeviceChannelList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deviceChannelList: { 'type': 'array', 'itemType': BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceChannelResponseBody = BatchGetEdgeInstanceDeviceChannelResponseBody;
class BatchGetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeInstanceDeviceChannelResponseBody,
        };
    }
}
exports.BatchGetEdgeInstanceDeviceChannelResponse = BatchGetEdgeInstanceDeviceChannelResponse;
class BatchGetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceConfigRequest = BatchGetEdgeInstanceDeviceConfigRequest;
class BatchGetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deviceConfigList: 'DeviceConfigList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deviceConfigList: { 'type': 'array', 'itemType': BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceConfigResponseBody = BatchGetEdgeInstanceDeviceConfigResponseBody;
class BatchGetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeInstanceDeviceConfigResponseBody,
        };
    }
}
exports.BatchGetEdgeInstanceDeviceConfigResponse = BatchGetEdgeInstanceDeviceConfigResponse;
class BatchGetEdgeInstanceDeviceDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceDriverRequest = BatchGetEdgeInstanceDeviceDriverRequest;
class BatchGetEdgeInstanceDeviceDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deviceDriverList: 'DeviceDriverList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deviceDriverList: { 'type': 'array', 'itemType': BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceDriverResponseBody = BatchGetEdgeInstanceDeviceDriverResponseBody;
class BatchGetEdgeInstanceDeviceDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeInstanceDeviceDriverResponseBody,
        };
    }
}
exports.BatchGetEdgeInstanceDeviceDriverResponse = BatchGetEdgeInstanceDeviceDriverResponse;
class BatchGetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverIds: 'DriverIds',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverIds: { 'type': 'array', 'itemType': 'string' },
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDriverConfigsRequest = BatchGetEdgeInstanceDriverConfigsRequest;
class BatchGetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            driverConfigList: 'DriverConfigList',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            driverConfigList: { 'type': 'array', 'itemType': BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchGetEdgeInstanceDriverConfigsResponseBody = BatchGetEdgeInstanceDriverConfigsResponseBody;
class BatchGetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchGetEdgeInstanceDriverConfigsResponseBody,
        };
    }
}
exports.BatchGetEdgeInstanceDriverConfigsResponse = BatchGetEdgeInstanceDriverConfigsResponse;
class BatchPubRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            messageContent: 'MessageContent',
            productKey: 'ProductKey',
            qos: 'Qos',
            topicShortName: 'TopicShortName',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            messageContent: 'string',
            productKey: 'string',
            qos: 'number',
            topicShortName: 'string',
        };
    }
}
exports.BatchPubRequest = BatchPubRequest;
class BatchPubResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchPubResponseBody = BatchPubResponseBody;
class BatchPubResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchPubResponseBody,
        };
    }
}
exports.BatchPubResponse = BatchPubResponse;
class BatchQueryDeviceDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchQueryDeviceDetailRequest = BatchQueryDeviceDetailRequest;
class BatchQueryDeviceDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchQueryDeviceDetailResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchQueryDeviceDetailResponseBody = BatchQueryDeviceDetailResponseBody;
class BatchQueryDeviceDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchQueryDeviceDetailResponseBody,
        };
    }
}
exports.BatchQueryDeviceDetailResponse = BatchQueryDeviceDetailResponse;
class BatchRegisterDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'Count',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            count: 'number',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchRegisterDeviceRequest = BatchRegisterDeviceRequest;
class BatchRegisterDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchRegisterDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchRegisterDeviceResponseBody = BatchRegisterDeviceResponseBody;
class BatchRegisterDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchRegisterDeviceResponseBody,
        };
    }
}
exports.BatchRegisterDeviceResponse = BatchRegisterDeviceResponse;
class BatchRegisterDeviceWithApplyIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            applyId: 'number',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchRegisterDeviceWithApplyIdRequest = BatchRegisterDeviceWithApplyIdRequest;
class BatchRegisterDeviceWithApplyIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchRegisterDeviceWithApplyIdResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchRegisterDeviceWithApplyIdResponseBody = BatchRegisterDeviceWithApplyIdResponseBody;
class BatchRegisterDeviceWithApplyIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchRegisterDeviceWithApplyIdResponseBody,
        };
    }
}
exports.BatchRegisterDeviceWithApplyIdResponse = BatchRegisterDeviceWithApplyIdResponse;
class BatchSetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            channelId: 'string',
            driverId: 'string',
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchSetEdgeInstanceDeviceChannelRequest = BatchSetEdgeInstanceDeviceChannelRequest;
class BatchSetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchSetEdgeInstanceDeviceChannelResponseBody = BatchSetEdgeInstanceDeviceChannelResponseBody;
class BatchSetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchSetEdgeInstanceDeviceChannelResponseBody,
        };
    }
}
exports.BatchSetEdgeInstanceDeviceChannelResponse = BatchSetEdgeInstanceDeviceChannelResponse;
class BatchSetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceConfigs: 'DeviceConfigs',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            deviceConfigs: { 'type': 'array', 'itemType': BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs },
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BatchSetEdgeInstanceDeviceConfigRequest = BatchSetEdgeInstanceDeviceConfigRequest;
class BatchSetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchSetEdgeInstanceDeviceConfigResponseBody = BatchSetEdgeInstanceDeviceConfigResponseBody;
class BatchSetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchSetEdgeInstanceDeviceConfigResponseBody,
        };
    }
}
exports.BatchSetEdgeInstanceDeviceConfigResponse = BatchSetEdgeInstanceDeviceConfigResponse;
class BatchUnbindDeviceFromEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotIds: 'IotIds',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotIds: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchUnbindDeviceFromEdgeInstanceRequest = BatchUnbindDeviceFromEdgeInstanceRequest;
class BatchUnbindDeviceFromEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchUnbindDeviceFromEdgeInstanceResponseBody = BatchUnbindDeviceFromEdgeInstanceResponseBody;
class BatchUnbindDeviceFromEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchUnbindDeviceFromEdgeInstanceResponseBody,
        };
    }
}
exports.BatchUnbindDeviceFromEdgeInstanceResponse = BatchUnbindDeviceFromEdgeInstanceResponse;
class BatchUnbindProjectDevicesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            devices: 'Devices',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            devices: { 'type': 'array', 'itemType': BatchUnbindProjectDevicesRequestDevices },
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.BatchUnbindProjectDevicesRequest = BatchUnbindProjectDevicesRequest;
class BatchUnbindProjectDevicesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchUnbindProjectDevicesResponseBody = BatchUnbindProjectDevicesResponseBody;
class BatchUnbindProjectDevicesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchUnbindProjectDevicesResponseBody,
        };
    }
}
exports.BatchUnbindProjectDevicesResponse = BatchUnbindProjectDevicesResponse;
class BatchUnbindProjectProductsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKeys: 'ProductKeys',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKeys: { 'type': 'array', 'itemType': 'string' },
            projectId: 'string',
        };
    }
}
exports.BatchUnbindProjectProductsRequest = BatchUnbindProjectProductsRequest;
class BatchUnbindProjectProductsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchUnbindProjectProductsResponseBody = BatchUnbindProjectProductsResponseBody;
class BatchUnbindProjectProductsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchUnbindProjectProductsResponseBody,
        };
    }
}
exports.BatchUnbindProjectProductsResponse = BatchUnbindProjectProductsResponse;
class BatchUpdateDeviceNicknameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceNicknameInfo: 'DeviceNicknameInfo',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            deviceNicknameInfo: { 'type': 'array', 'itemType': BatchUpdateDeviceNicknameRequestDeviceNicknameInfo },
            iotInstanceId: 'string',
        };
    }
}
exports.BatchUpdateDeviceNicknameRequest = BatchUpdateDeviceNicknameRequest;
class BatchUpdateDeviceNicknameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchUpdateDeviceNicknameResponseBody = BatchUpdateDeviceNicknameResponseBody;
class BatchUpdateDeviceNicknameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BatchUpdateDeviceNicknameResponseBody,
        };
    }
}
exports.BatchUpdateDeviceNicknameResponse = BatchUpdateDeviceNicknameResponse;
class BindApplicationToEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applicationId: 'ApplicationId',
            applicationVersion: 'ApplicationVersion',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            applicationId: 'string',
            applicationVersion: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.BindApplicationToEdgeInstanceRequest = BindApplicationToEdgeInstanceRequest;
class BindApplicationToEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BindApplicationToEdgeInstanceResponseBody = BindApplicationToEdgeInstanceResponseBody;
class BindApplicationToEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindApplicationToEdgeInstanceResponseBody,
        };
    }
}
exports.BindApplicationToEdgeInstanceResponse = BindApplicationToEdgeInstanceResponse;
class BindDriverToEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            orderId: 'OrderId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            driverVersion: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
            orderId: 'string',
        };
    }
}
exports.BindDriverToEdgeInstanceRequest = BindDriverToEdgeInstanceRequest;
class BindDriverToEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BindDriverToEdgeInstanceResponseBody = BindDriverToEdgeInstanceResponseBody;
class BindDriverToEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindDriverToEdgeInstanceResponseBody,
        };
    }
}
exports.BindDriverToEdgeInstanceResponse = BindDriverToEdgeInstanceResponse;
class BindGatewayToEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            instanceId: 'InstanceId',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            instanceId: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.BindGatewayToEdgeInstanceRequest = BindGatewayToEdgeInstanceRequest;
class BindGatewayToEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BindGatewayToEdgeInstanceResponseBody = BindGatewayToEdgeInstanceResponseBody;
class BindGatewayToEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindGatewayToEdgeInstanceResponseBody,
        };
    }
}
exports.BindGatewayToEdgeInstanceResponse = BindGatewayToEdgeInstanceResponse;
class BindRoleToEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            roleArn: 'RoleArn',
            roleName: 'RoleName',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            roleArn: 'string',
            roleName: 'string',
        };
    }
}
exports.BindRoleToEdgeInstanceRequest = BindRoleToEdgeInstanceRequest;
class BindRoleToEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BindRoleToEdgeInstanceResponseBody = BindRoleToEdgeInstanceResponseBody;
class BindRoleToEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindRoleToEdgeInstanceResponseBody,
        };
    }
}
exports.BindRoleToEdgeInstanceResponse = BindRoleToEdgeInstanceResponse;
class BindSceneRuleToEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.BindSceneRuleToEdgeInstanceRequest = BindSceneRuleToEdgeInstanceRequest;
class BindSceneRuleToEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.BindSceneRuleToEdgeInstanceResponseBody = BindSceneRuleToEdgeInstanceResponseBody;
class BindSceneRuleToEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: BindSceneRuleToEdgeInstanceResponseBody,
        };
    }
}
exports.BindSceneRuleToEdgeInstanceResponse = BindSceneRuleToEdgeInstanceResponse;
class CancelJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.CancelJobRequest = CancelJobRequest;
class CancelJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CancelJobResponseBody = CancelJobResponseBody;
class CancelJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelJobResponseBody,
        };
    }
}
exports.CancelJobResponse = CancelJobResponse;
class CancelOTAStrategyByJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.CancelOTAStrategyByJobRequest = CancelOTAStrategyByJobRequest;
class CancelOTAStrategyByJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CancelOTAStrategyByJobResponseBody = CancelOTAStrategyByJobResponseBody;
class CancelOTAStrategyByJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelOTAStrategyByJobResponseBody,
        };
    }
}
exports.CancelOTAStrategyByJobResponse = CancelOTAStrategyByJobResponse;
class CancelOTATaskByDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            firmwareId: 'string',
            iotInstanceId: 'string',
            jobId: 'string',
            productKey: 'string',
        };
    }
}
exports.CancelOTATaskByDeviceRequest = CancelOTATaskByDeviceRequest;
class CancelOTATaskByDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CancelOTATaskByDeviceResponseBody = CancelOTATaskByDeviceResponseBody;
class CancelOTATaskByDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelOTATaskByDeviceResponseBody,
        };
    }
}
exports.CancelOTATaskByDeviceResponse = CancelOTATaskByDeviceResponse;
class CancelOTATaskByJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cancelInProgressTask: 'CancelInProgressTask',
            cancelNotifiedTask: 'CancelNotifiedTask',
            cancelQueuedTask: 'CancelQueuedTask',
            cancelScheduledTask: 'CancelScheduledTask',
            cancelUnconfirmedTask: 'CancelUnconfirmedTask',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            cancelInProgressTask: 'boolean',
            cancelNotifiedTask: 'boolean',
            cancelQueuedTask: 'boolean',
            cancelScheduledTask: 'boolean',
            cancelUnconfirmedTask: 'boolean',
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.CancelOTATaskByJobRequest = CancelOTATaskByJobRequest;
class CancelOTATaskByJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CancelOTATaskByJobResponseBody = CancelOTATaskByJobResponseBody;
class CancelOTATaskByJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelOTATaskByJobResponseBody,
        };
    }
}
exports.CancelOTATaskByJobResponse = CancelOTATaskByJobResponse;
class CancelReleaseProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.CancelReleaseProductRequest = CancelReleaseProductRequest;
class CancelReleaseProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CancelReleaseProductResponseBody = CancelReleaseProductResponseBody;
class CancelReleaseProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CancelReleaseProductResponseBody,
        };
    }
}
exports.CancelReleaseProductResponse = CancelReleaseProductResponse;
class ClearEdgeInstanceDriverConfigsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.ClearEdgeInstanceDriverConfigsRequest = ClearEdgeInstanceDriverConfigsRequest;
class ClearEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ClearEdgeInstanceDriverConfigsResponseBody = ClearEdgeInstanceDriverConfigsResponseBody;
class ClearEdgeInstanceDriverConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ClearEdgeInstanceDriverConfigsResponseBody,
        };
    }
}
exports.ClearEdgeInstanceDriverConfigsResponse = ClearEdgeInstanceDriverConfigsResponse;
class CloseEdgeInstanceDeploymentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.CloseEdgeInstanceDeploymentRequest = CloseEdgeInstanceDeploymentRequest;
class CloseEdgeInstanceDeploymentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CloseEdgeInstanceDeploymentResponseBody = CloseEdgeInstanceDeploymentResponseBody;
class CloseEdgeInstanceDeploymentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CloseEdgeInstanceDeploymentResponseBody,
        };
    }
}
exports.CloseEdgeInstanceDeploymentResponse = CloseEdgeInstanceDeploymentResponse;
class ConfirmOTATaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            taskId: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ConfirmOTATaskRequest = ConfirmOTATaskRequest;
class ConfirmOTATaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ConfirmOTATaskResponseBody = ConfirmOTATaskResponseBody;
class ConfirmOTATaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ConfirmOTATaskResponseBody,
        };
    }
}
exports.ConfirmOTATaskResponse = ConfirmOTATaskResponse;
class CopyThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            resourceGroupId: 'ResourceGroupId',
            sourceModelVersion: 'SourceModelVersion',
            sourceProductKey: 'SourceProductKey',
            targetProductKey: 'TargetProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            resourceGroupId: 'string',
            sourceModelVersion: 'string',
            sourceProductKey: 'string',
            targetProductKey: 'string',
        };
    }
}
exports.CopyThingModelRequest = CopyThingModelRequest;
class CopyThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CopyThingModelResponseBody = CopyThingModelResponseBody;
class CopyThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CopyThingModelResponseBody,
        };
    }
}
exports.CopyThingModelResponse = CopyThingModelResponse;
class CreateConsumerGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'GroupName',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.CreateConsumerGroupRequest = CreateConsumerGroupRequest;
class CreateConsumerGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            groupId: 'GroupId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            groupId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateConsumerGroupResponseBody = CreateConsumerGroupResponseBody;
class CreateConsumerGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateConsumerGroupResponseBody,
        };
    }
}
exports.CreateConsumerGroupResponse = CreateConsumerGroupResponse;
class CreateConsumerGroupSubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupId: 'ConsumerGroupId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            consumerGroupId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.CreateConsumerGroupSubscribeRelationRequest = CreateConsumerGroupSubscribeRelationRequest;
class CreateConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateConsumerGroupSubscribeRelationResponseBody = CreateConsumerGroupSubscribeRelationResponseBody;
class CreateConsumerGroupSubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateConsumerGroupSubscribeRelationResponseBody,
        };
    }
}
exports.CreateConsumerGroupSubscribeRelationResponse = CreateConsumerGroupSubscribeRelationResponse;
class CreateDataAPIServiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiPath: 'ApiPath',
            desc: 'Desc',
            displayName: 'DisplayName',
            iotInstanceId: 'IotInstanceId',
            originSql: 'OriginSql',
            requestParam: 'RequestParam',
            responseParam: 'ResponseParam',
            templateSql: 'TemplateSql',
        };
    }
    static types() {
        return {
            apiPath: 'string',
            desc: 'string',
            displayName: 'string',
            iotInstanceId: 'string',
            originSql: 'string',
            requestParam: { 'type': 'array', 'itemType': CreateDataAPIServiceRequestRequestParam },
            responseParam: { 'type': 'array', 'itemType': CreateDataAPIServiceRequestResponseParam },
            templateSql: 'string',
        };
    }
}
exports.CreateDataAPIServiceRequest = CreateDataAPIServiceRequest;
class CreateDataAPIServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateDataAPIServiceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateDataAPIServiceResponseBody = CreateDataAPIServiceResponseBody;
class CreateDataAPIServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateDataAPIServiceResponseBody,
        };
    }
}
exports.CreateDataAPIServiceResponse = CreateDataAPIServiceResponse;
class CreateDeviceDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            strategy: 'Strategy',
            targetAliyunId: 'TargetAliyunId',
            targetInstanceConfig: 'TargetInstanceConfig',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            productKey: 'string',
            sourceInstanceId: 'string',
            strategy: 'number',
            targetAliyunId: 'string',
            targetInstanceConfig: { 'type': 'array', 'itemType': CreateDeviceDistributeJobRequestTargetInstanceConfig },
            targetUid: 'string',
        };
    }
}
exports.CreateDeviceDistributeJobRequest = CreateDeviceDistributeJobRequest;
class CreateDeviceDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            jobId: 'JobId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            jobId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateDeviceDistributeJobResponseBody = CreateDeviceDistributeJobResponseBody;
class CreateDeviceDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateDeviceDistributeJobResponseBody,
        };
    }
}
exports.CreateDeviceDistributeJobResponse = CreateDeviceDistributeJobResponse;
class CreateDeviceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupName: 'GroupName',
            iotInstanceId: 'IotInstanceId',
            superGroupId: 'SuperGroupId',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupName: 'string',
            iotInstanceId: 'string',
            superGroupId: 'string',
        };
    }
}
exports.CreateDeviceGroupRequest = CreateDeviceGroupRequest;
class CreateDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateDeviceGroupResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateDeviceGroupResponseBody = CreateDeviceGroupResponseBody;
class CreateDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateDeviceGroupResponseBody,
        };
    }
}
exports.CreateDeviceGroupResponse = CreateDeviceGroupResponse;
class CreateEdgeDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cpuArch: 'CpuArch',
            driverName: 'DriverName',
            driverProtocol: 'DriverProtocol',
            iotInstanceId: 'IotInstanceId',
            isBuiltIn: 'IsBuiltIn',
            runtime: 'Runtime',
        };
    }
    static types() {
        return {
            cpuArch: 'string',
            driverName: 'string',
            driverProtocol: 'string',
            iotInstanceId: 'string',
            isBuiltIn: 'boolean',
            runtime: 'string',
        };
    }
}
exports.CreateEdgeDriverRequest = CreateEdgeDriverRequest;
class CreateEdgeDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            driverId: 'DriverId',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            driverId: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeDriverResponseBody = CreateEdgeDriverResponseBody;
class CreateEdgeDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeDriverResponseBody,
        };
    }
}
exports.CreateEdgeDriverResponse = CreateEdgeDriverResponse;
class CreateEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            argument: 'Argument',
            configCheckRule: 'ConfigCheckRule',
            containerConfig: 'ContainerConfig',
            description: 'Description',
            driverConfig: 'DriverConfig',
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            edgeVersion: 'EdgeVersion',
            iotInstanceId: 'IotInstanceId',
            sourceConfig: 'SourceConfig',
        };
    }
    static types() {
        return {
            argument: 'string',
            configCheckRule: 'string',
            containerConfig: 'string',
            description: 'string',
            driverConfig: 'string',
            driverId: 'string',
            driverVersion: 'string',
            edgeVersion: 'string',
            iotInstanceId: 'string',
            sourceConfig: 'string',
        };
    }
}
exports.CreateEdgeDriverVersionRequest = CreateEdgeDriverVersionRequest;
class CreateEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeDriverVersionResponseBody = CreateEdgeDriverVersionResponseBody;
class CreateEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeDriverVersionResponseBody,
        };
    }
}
exports.CreateEdgeDriverVersionResponse = CreateEdgeDriverVersionResponse;
class CreateEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            spec: 'Spec',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            name: 'string',
            spec: 'number',
            tags: 'string',
        };
    }
}
exports.CreateEdgeInstanceRequest = CreateEdgeInstanceRequest;
class CreateEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            instanceId: 'InstanceId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            instanceId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeInstanceResponseBody = CreateEdgeInstanceResponseBody;
class CreateEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeInstanceResponseBody,
        };
    }
}
exports.CreateEdgeInstanceResponse = CreateEdgeInstanceResponse;
class CreateEdgeInstanceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelName: 'ChannelName',
            configs: 'Configs',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            channelName: 'string',
            configs: { 'type': 'array', 'itemType': CreateEdgeInstanceChannelRequestConfigs },
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.CreateEdgeInstanceChannelRequest = CreateEdgeInstanceChannelRequest;
class CreateEdgeInstanceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeInstanceChannelResponseBody = CreateEdgeInstanceChannelResponseBody;
class CreateEdgeInstanceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeInstanceChannelResponseBody,
        };
    }
}
exports.CreateEdgeInstanceChannelResponse = CreateEdgeInstanceChannelResponse;
class CreateEdgeInstanceDeploymentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            type: 'Type',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            type: 'string',
        };
    }
}
exports.CreateEdgeInstanceDeploymentRequest = CreateEdgeInstanceDeploymentRequest;
class CreateEdgeInstanceDeploymentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deploymentId: 'DeploymentId',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deploymentId: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeInstanceDeploymentResponseBody = CreateEdgeInstanceDeploymentResponseBody;
class CreateEdgeInstanceDeploymentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeInstanceDeploymentResponseBody,
        };
    }
}
exports.CreateEdgeInstanceDeploymentResponse = CreateEdgeInstanceDeploymentResponse;
class CreateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            sourceData: 'SourceData',
            sourceType: 'SourceType',
            targetData: 'TargetData',
            targetIotHubQos: 'TargetIotHubQos',
            targetType: 'TargetType',
            topicFilter: 'TopicFilter',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            name: 'string',
            sourceData: 'string',
            sourceType: 'string',
            targetData: 'string',
            targetIotHubQos: 'number',
            targetType: 'string',
            topicFilter: 'string',
        };
    }
}
exports.CreateEdgeInstanceMessageRoutingRequest = CreateEdgeInstanceMessageRoutingRequest;
class CreateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            routeId: 'RouteId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            routeId: 'number',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeInstanceMessageRoutingResponseBody = CreateEdgeInstanceMessageRoutingResponseBody;
class CreateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeInstanceMessageRoutingResponseBody,
        };
    }
}
exports.CreateEdgeInstanceMessageRoutingResponse = CreateEdgeInstanceMessageRoutingResponse;
class CreateEdgeOssPreSignedAddressRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileName: 'FileName',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            resourceId: 'ResourceId',
            resourceVersion: 'ResourceVersion',
            type: 'Type',
        };
    }
    static types() {
        return {
            fileName: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
            resourceId: 'string',
            resourceVersion: 'string',
            type: 'string',
        };
    }
}
exports.CreateEdgeOssPreSignedAddressRequest = CreateEdgeOssPreSignedAddressRequest;
class CreateEdgeOssPreSignedAddressResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateEdgeOssPreSignedAddressResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateEdgeOssPreSignedAddressResponseBody = CreateEdgeOssPreSignedAddressResponseBody;
class CreateEdgeOssPreSignedAddressResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateEdgeOssPreSignedAddressResponseBody,
        };
    }
}
exports.CreateEdgeOssPreSignedAddressResponse = CreateEdgeOssPreSignedAddressResponse;
class CreateJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            iotInstanceId: 'IotInstanceId',
            jobDocument: 'JobDocument',
            jobFile: 'JobFile',
            jobName: 'JobName',
            rolloutConfig: 'RolloutConfig',
            scheduledTime: 'ScheduledTime',
            targetConfig: 'TargetConfig',
            timeoutConfig: 'TimeoutConfig',
            type: 'Type',
        };
    }
    static types() {
        return {
            description: 'string',
            iotInstanceId: 'string',
            jobDocument: 'string',
            jobFile: 'string',
            jobName: 'string',
            rolloutConfig: 'string',
            scheduledTime: 'number',
            targetConfig: 'string',
            timeoutConfig: 'string',
            type: 'string',
        };
    }
}
exports.CreateJobRequest = CreateJobRequest;
class CreateJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            jobId: 'JobId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            jobId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateJobResponseBody = CreateJobResponseBody;
class CreateJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateJobResponseBody,
        };
    }
}
exports.CreateJobResponse = CreateJobResponse;
class CreateLoRaNodesTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceInfo: 'DeviceInfo',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceInfo: { 'type': 'array', 'itemType': CreateLoRaNodesTaskRequestDeviceInfo },
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.CreateLoRaNodesTaskRequest = CreateLoRaNodesTaskRequest;
class CreateLoRaNodesTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            taskId: 'string',
        };
    }
}
exports.CreateLoRaNodesTaskResponseBody = CreateLoRaNodesTaskResponseBody;
class CreateLoRaNodesTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateLoRaNodesTaskResponseBody,
        };
    }
}
exports.CreateLoRaNodesTaskResponse = CreateLoRaNodesTaskResponse;
class CreateOTADynamicUpgradeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dynamicMode: 'DynamicMode',
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
            maximumPerMinute: 'MaximumPerMinute',
            needConfirm: 'NeedConfirm',
            needPush: 'NeedPush',
            overwriteMode: 'OverwriteMode',
            productKey: 'ProductKey',
            retryCount: 'RetryCount',
            retryInterval: 'RetryInterval',
            srcVersion: 'SrcVersion',
            tag: 'Tag',
            timeoutInMinutes: 'TimeoutInMinutes',
        };
    }
    static types() {
        return {
            dynamicMode: 'number',
            firmwareId: 'string',
            iotInstanceId: 'string',
            maximumPerMinute: 'number',
            needConfirm: 'boolean',
            needPush: 'boolean',
            overwriteMode: 'number',
            productKey: 'string',
            retryCount: 'number',
            retryInterval: 'number',
            srcVersion: { 'type': 'array', 'itemType': 'string' },
            tag: { 'type': 'array', 'itemType': CreateOTADynamicUpgradeJobRequestTag },
            timeoutInMinutes: 'number',
        };
    }
}
exports.CreateOTADynamicUpgradeJobRequest = CreateOTADynamicUpgradeJobRequest;
class CreateOTADynamicUpgradeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateOTADynamicUpgradeJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateOTADynamicUpgradeJobResponseBody = CreateOTADynamicUpgradeJobResponseBody;
class CreateOTADynamicUpgradeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOTADynamicUpgradeJobResponseBody,
        };
    }
}
exports.CreateOTADynamicUpgradeJobResponse = CreateOTADynamicUpgradeJobResponse;
class CreateOTAFirmwareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            firmwareDesc: 'FirmwareDesc',
            firmwareName: 'FirmwareName',
            firmwareSign: 'FirmwareSign',
            firmwareSize: 'FirmwareSize',
            firmwareUrl: 'FirmwareUrl',
            iotInstanceId: 'IotInstanceId',
            moduleName: 'ModuleName',
            needToVerify: 'NeedToVerify',
            productKey: 'ProductKey',
            signMethod: 'SignMethod',
            srcVersion: 'SrcVersion',
            type: 'Type',
            udi: 'Udi',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            firmwareDesc: 'string',
            firmwareName: 'string',
            firmwareSign: 'string',
            firmwareSize: 'number',
            firmwareUrl: 'string',
            iotInstanceId: 'string',
            moduleName: 'string',
            needToVerify: 'boolean',
            productKey: 'string',
            signMethod: 'string',
            srcVersion: 'string',
            type: 'number',
            udi: 'string',
        };
    }
}
exports.CreateOTAFirmwareRequest = CreateOTAFirmwareRequest;
class CreateOTAFirmwareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateOTAFirmwareResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateOTAFirmwareResponseBody = CreateOTAFirmwareResponseBody;
class CreateOTAFirmwareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOTAFirmwareResponseBody,
        };
    }
}
exports.CreateOTAFirmwareResponse = CreateOTAFirmwareResponse;
class CreateOTAModuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'AliasName',
            desc: 'Desc',
            iotInstanceId: 'IotInstanceId',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            desc: 'string',
            iotInstanceId: 'string',
            moduleName: 'string',
            productKey: 'string',
        };
    }
}
exports.CreateOTAModuleRequest = CreateOTAModuleRequest;
class CreateOTAModuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateOTAModuleResponseBody = CreateOTAModuleResponseBody;
class CreateOTAModuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOTAModuleResponseBody,
        };
    }
}
exports.CreateOTAModuleResponse = CreateOTAModuleResponse;
class CreateOTAStaticUpgradeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dnListFileUrl: 'DnListFileUrl',
            firmwareId: 'FirmwareId',
            grayPercent: 'GrayPercent',
            iotInstanceId: 'IotInstanceId',
            maximumPerMinute: 'MaximumPerMinute',
            needConfirm: 'NeedConfirm',
            needPush: 'NeedPush',
            overwriteMode: 'OverwriteMode',
            productKey: 'ProductKey',
            retryCount: 'RetryCount',
            retryInterval: 'RetryInterval',
            scheduleFinishTime: 'ScheduleFinishTime',
            scheduleTime: 'ScheduleTime',
            srcVersion: 'SrcVersion',
            tag: 'Tag',
            targetDeviceName: 'TargetDeviceName',
            targetSelection: 'TargetSelection',
            timeoutInMinutes: 'TimeoutInMinutes',
        };
    }
    static types() {
        return {
            dnListFileUrl: 'string',
            firmwareId: 'string',
            grayPercent: 'string',
            iotInstanceId: 'string',
            maximumPerMinute: 'number',
            needConfirm: 'boolean',
            needPush: 'boolean',
            overwriteMode: 'number',
            productKey: 'string',
            retryCount: 'number',
            retryInterval: 'number',
            scheduleFinishTime: 'number',
            scheduleTime: 'number',
            srcVersion: { 'type': 'array', 'itemType': 'string' },
            tag: { 'type': 'array', 'itemType': CreateOTAStaticUpgradeJobRequestTag },
            targetDeviceName: { 'type': 'array', 'itemType': 'string' },
            targetSelection: 'string',
            timeoutInMinutes: 'number',
        };
    }
}
exports.CreateOTAStaticUpgradeJobRequest = CreateOTAStaticUpgradeJobRequest;
class CreateOTAStaticUpgradeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateOTAStaticUpgradeJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateOTAStaticUpgradeJobResponseBody = CreateOTAStaticUpgradeJobResponseBody;
class CreateOTAStaticUpgradeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOTAStaticUpgradeJobResponseBody,
        };
    }
}
exports.CreateOTAStaticUpgradeJobResponse = CreateOTAStaticUpgradeJobResponse;
class CreateOTAVerifyJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
            needConfirm: 'NeedConfirm',
            needPush: 'NeedPush',
            productKey: 'ProductKey',
            targetDeviceName: 'TargetDeviceName',
            timeoutInMinutes: 'TimeoutInMinutes',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            iotInstanceId: 'string',
            needConfirm: 'boolean',
            needPush: 'boolean',
            productKey: 'string',
            targetDeviceName: { 'type': 'array', 'itemType': 'string' },
            timeoutInMinutes: 'number',
        };
    }
}
exports.CreateOTAVerifyJobRequest = CreateOTAVerifyJobRequest;
class CreateOTAVerifyJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateOTAVerifyJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateOTAVerifyJobResponseBody = CreateOTAVerifyJobResponseBody;
class CreateOTAVerifyJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateOTAVerifyJobResponseBody,
        };
    }
}
exports.CreateOTAVerifyJobResponse = CreateOTAVerifyJobResponse;
class CreateProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliyunCommodityCode: 'AliyunCommodityCode',
            authType: 'AuthType',
            categoryKey: 'CategoryKey',
            dataFormat: 'DataFormat',
            description: 'Description',
            id2: 'Id2',
            iotInstanceId: 'IotInstanceId',
            joinPermissionId: 'JoinPermissionId',
            netType: 'NetType',
            nodeType: 'NodeType',
            productName: 'ProductName',
            protocolType: 'ProtocolType',
            publishAuto: 'PublishAuto',
            resourceGroupId: 'ResourceGroupId',
            validateType: 'ValidateType',
        };
    }
    static types() {
        return {
            aliyunCommodityCode: 'string',
            authType: 'string',
            categoryKey: 'string',
            dataFormat: 'number',
            description: 'string',
            id2: 'boolean',
            iotInstanceId: 'string',
            joinPermissionId: 'string',
            netType: 'string',
            nodeType: 'number',
            productName: 'string',
            protocolType: 'string',
            publishAuto: 'boolean',
            resourceGroupId: 'string',
            validateType: 'number',
        };
    }
}
exports.CreateProductRequest = CreateProductRequest;
class CreateProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            productKey: 'ProductKey',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateProductResponseBodyData,
            errorMessage: 'string',
            productKey: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateProductResponseBody = CreateProductResponseBody;
class CreateProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateProductResponseBody,
        };
    }
}
exports.CreateProductResponse = CreateProductResponse;
class CreateProductDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            targetAliyunId: 'TargetAliyunId',
            targetInstanceId: 'TargetInstanceId',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            productKey: 'string',
            sourceInstanceId: 'string',
            targetAliyunId: 'string',
            targetInstanceId: 'string',
            targetUid: 'string',
        };
    }
}
exports.CreateProductDistributeJobRequest = CreateProductDistributeJobRequest;
class CreateProductDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            jobId: 'JobId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            jobId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateProductDistributeJobResponseBody = CreateProductDistributeJobResponseBody;
class CreateProductDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateProductDistributeJobResponseBody,
        };
    }
}
exports.CreateProductDistributeJobResponse = CreateProductDistributeJobResponse;
class CreateProductTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            productTag: { 'type': 'array', 'itemType': CreateProductTagsRequestProductTag },
        };
    }
}
exports.CreateProductTagsRequest = CreateProductTagsRequest;
class CreateProductTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            invalidProductTags: 'InvalidProductTags',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            invalidProductTags: CreateProductTagsResponseBodyInvalidProductTags,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateProductTagsResponseBody = CreateProductTagsResponseBody;
class CreateProductTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateProductTagsResponseBody,
        };
    }
}
exports.CreateProductTagsResponse = CreateProductTagsResponse;
class CreateProductTopicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            iotInstanceId: 'IotInstanceId',
            operation: 'Operation',
            productKey: 'ProductKey',
            topicShortName: 'TopicShortName',
        };
    }
    static types() {
        return {
            desc: 'string',
            iotInstanceId: 'string',
            operation: 'string',
            productKey: 'string',
            topicShortName: 'string',
        };
    }
}
exports.CreateProductTopicRequest = CreateProductTopicRequest;
class CreateProductTopicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            topicId: 'TopicId',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            topicId: 'number',
        };
    }
}
exports.CreateProductTopicResponseBody = CreateProductTopicResponseBody;
class CreateProductTopicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateProductTopicResponseBody,
        };
    }
}
exports.CreateProductTopicResponse = CreateProductTopicResponse;
class CreateRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataType: 'DataType',
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
            ruleDesc: 'RuleDesc',
            select: 'Select',
            shortTopic: 'ShortTopic',
            topic: 'Topic',
            topicType: 'TopicType',
            where: 'Where',
        };
    }
    static types() {
        return {
            dataType: 'string',
            iotInstanceId: 'string',
            name: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
            ruleDesc: 'string',
            select: 'string',
            shortTopic: 'string',
            topic: 'string',
            topicType: 'number',
            where: 'string',
        };
    }
}
exports.CreateRuleRequest = CreateRuleRequest;
class CreateRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            ruleId: 'RuleId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            ruleId: 'number',
            success: 'boolean',
        };
    }
}
exports.CreateRuleResponseBody = CreateRuleResponseBody;
class CreateRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateRuleResponseBody,
        };
    }
}
exports.CreateRuleResponse = CreateRuleResponse;
class CreateRuleActionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configuration: 'Configuration',
            errorActionFlag: 'ErrorActionFlag',
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
            type: 'Type',
        };
    }
    static types() {
        return {
            configuration: 'string',
            errorActionFlag: 'boolean',
            iotInstanceId: 'string',
            ruleId: 'number',
            type: 'string',
        };
    }
}
exports.CreateRuleActionRequest = CreateRuleActionRequest;
class CreateRuleActionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'ActionId',
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            actionId: 'number',
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateRuleActionResponseBody = CreateRuleActionResponseBody;
class CreateRuleActionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateRuleActionResponseBody,
        };
    }
}
exports.CreateRuleActionResponse = CreateRuleActionResponse;
class CreateRulengDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            targetInstanceId: 'TargetInstanceId',
        };
    }
    static types() {
        return {
            productKey: 'string',
            sourceInstanceId: 'string',
            targetInstanceId: 'string',
        };
    }
}
exports.CreateRulengDistributeJobRequest = CreateRulengDistributeJobRequest;
class CreateRulengDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateRulengDistributeJobResponseBody = CreateRulengDistributeJobResponseBody;
class CreateRulengDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateRulengDistributeJobResponseBody,
        };
    }
}
exports.CreateRulengDistributeJobResponse = CreateRulengDistributeJobResponse;
class CreateSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleContent: 'RuleContent',
            ruleDescription: 'RuleDescription',
            ruleName: 'RuleName',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleContent: 'string',
            ruleDescription: 'string',
            ruleName: 'string',
        };
    }
}
exports.CreateSceneRuleRequest = CreateSceneRuleRequest;
class CreateSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            ruleId: 'RuleId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            ruleId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateSceneRuleResponseBody = CreateSceneRuleResponseBody;
class CreateSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSceneRuleResponseBody,
        };
    }
}
exports.CreateSceneRuleResponse = CreateSceneRuleResponse;
class CreateSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            iotInstanceId: 'IotInstanceId',
            projectCode: 'ProjectCode',
            speechRate: 'SpeechRate',
            speechType: 'SpeechType',
            text: 'Text',
            voice: 'Voice',
            volume: 'Volume',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            iotInstanceId: 'string',
            projectCode: 'string',
            speechRate: 'number',
            speechType: 'string',
            text: 'string',
            voice: 'string',
            volume: 'number',
        };
    }
}
exports.CreateSpeechRequest = CreateSpeechRequest;
class CreateSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateSpeechResponseBody = CreateSpeechResponseBody;
class CreateSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSpeechResponseBody,
        };
    }
}
exports.CreateSpeechResponse = CreateSpeechResponse;
class CreateStudioAppDomainOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            host: 'Host',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
            protocol: 'Protocol',
        };
    }
    static types() {
        return {
            appId: 'string',
            host: 'string',
            iotInstanceId: 'string',
            projectId: 'string',
            protocol: 'string',
        };
    }
}
exports.CreateStudioAppDomainOpenRequest = CreateStudioAppDomainOpenRequest;
class CreateStudioAppDomainOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateStudioAppDomainOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateStudioAppDomainOpenResponseBody = CreateStudioAppDomainOpenResponseBody;
class CreateStudioAppDomainOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateStudioAppDomainOpenResponseBody,
        };
    }
}
exports.CreateStudioAppDomainOpenResponse = CreateStudioAppDomainOpenResponse;
class CreateSubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupIds: 'ConsumerGroupIds',
            deviceDataFlag: 'DeviceDataFlag',
            deviceLifeCycleFlag: 'DeviceLifeCycleFlag',
            deviceStatusChangeFlag: 'DeviceStatusChangeFlag',
            deviceTagFlag: 'DeviceTagFlag',
            deviceTopoLifeCycleFlag: 'DeviceTopoLifeCycleFlag',
            foundDeviceListFlag: 'FoundDeviceListFlag',
            iotInstanceId: 'IotInstanceId',
            mnsConfiguration: 'MnsConfiguration',
            otaEventFlag: 'OtaEventFlag',
            otaJobFlag: 'OtaJobFlag',
            otaVersionFlag: 'OtaVersionFlag',
            productKey: 'ProductKey',
            thingHistoryFlag: 'ThingHistoryFlag',
            type: 'Type',
        };
    }
    static types() {
        return {
            consumerGroupIds: { 'type': 'array', 'itemType': 'string' },
            deviceDataFlag: 'boolean',
            deviceLifeCycleFlag: 'boolean',
            deviceStatusChangeFlag: 'boolean',
            deviceTagFlag: 'boolean',
            deviceTopoLifeCycleFlag: 'boolean',
            foundDeviceListFlag: 'boolean',
            iotInstanceId: 'string',
            mnsConfiguration: 'string',
            otaEventFlag: 'boolean',
            otaJobFlag: 'boolean',
            otaVersionFlag: 'boolean',
            productKey: 'string',
            thingHistoryFlag: 'boolean',
            type: 'string',
        };
    }
}
exports.CreateSubscribeRelationRequest = CreateSubscribeRelationRequest;
class CreateSubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateSubscribeRelationResponseBody = CreateSubscribeRelationResponseBody;
class CreateSubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateSubscribeRelationResponseBody,
        };
    }
}
exports.CreateSubscribeRelationResponse = CreateSubscribeRelationResponse;
class CreateThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            functionBlockName: 'FunctionBlockName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            thingModelJson: 'ThingModelJson',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            functionBlockName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            thingModelJson: 'string',
        };
    }
}
exports.CreateThingModelRequest = CreateThingModelRequest;
class CreateThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateThingModelResponseBody = CreateThingModelResponseBody;
class CreateThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateThingModelResponseBody,
        };
    }
}
exports.CreateThingModelResponse = CreateThingModelResponse;
class CreateThingScriptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            scriptContent: 'ScriptContent',
            scriptType: 'ScriptType',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            scriptContent: 'string',
            scriptType: 'string',
        };
    }
}
exports.CreateThingScriptRequest = CreateThingScriptRequest;
class CreateThingScriptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateThingScriptResponseBody = CreateThingScriptResponseBody;
class CreateThingScriptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateThingScriptResponseBody,
        };
    }
}
exports.CreateThingScriptResponse = CreateThingScriptResponse;
class CreateTopicRouteTableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dstTopic: 'DstTopic',
            iotInstanceId: 'IotInstanceId',
            srcTopic: 'SrcTopic',
        };
    }
    static types() {
        return {
            dstTopic: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            srcTopic: 'string',
        };
    }
}
exports.CreateTopicRouteTableRequest = CreateTopicRouteTableRequest;
class CreateTopicRouteTableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            failureTopics: 'FailureTopics',
            isAllSucceed: 'IsAllSucceed',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            failureTopics: CreateTopicRouteTableResponseBodyFailureTopics,
            isAllSucceed: 'boolean',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateTopicRouteTableResponseBody = CreateTopicRouteTableResponseBody;
class CreateTopicRouteTableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: CreateTopicRouteTableResponseBody,
        };
    }
}
exports.CreateTopicRouteTableResponse = CreateTopicRouteTableResponse;
class DeleteConsumerGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteConsumerGroupRequest = DeleteConsumerGroupRequest;
class DeleteConsumerGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteConsumerGroupResponseBody = DeleteConsumerGroupResponseBody;
class DeleteConsumerGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteConsumerGroupResponseBody,
        };
    }
}
exports.DeleteConsumerGroupResponse = DeleteConsumerGroupResponse;
class DeleteConsumerGroupSubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupId: 'ConsumerGroupId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            consumerGroupId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DeleteConsumerGroupSubscribeRelationRequest = DeleteConsumerGroupSubscribeRelationRequest;
class DeleteConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteConsumerGroupSubscribeRelationResponseBody = DeleteConsumerGroupSubscribeRelationResponseBody;
class DeleteConsumerGroupSubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteConsumerGroupSubscribeRelationResponseBody,
        };
    }
}
exports.DeleteConsumerGroupSubscribeRelationResponse = DeleteConsumerGroupSubscribeRelationResponse;
class DeleteDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DeleteDeviceRequest = DeleteDeviceRequest;
class DeleteDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDeviceResponseBody = DeleteDeviceResponseBody;
class DeleteDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeviceResponseBody,
        };
    }
}
exports.DeleteDeviceResponse = DeleteDeviceResponse;
class DeleteDeviceDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
}
exports.DeleteDeviceDistributeJobRequest = DeleteDeviceDistributeJobRequest;
class DeleteDeviceDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDeviceDistributeJobResponseBody = DeleteDeviceDistributeJobResponseBody;
class DeleteDeviceDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeviceDistributeJobResponseBody,
        };
    }
}
exports.DeleteDeviceDistributeJobResponse = DeleteDeviceDistributeJobResponse;
class DeleteDeviceFileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            fileId: 'FileId',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            fileId: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DeleteDeviceFileRequest = DeleteDeviceFileRequest;
class DeleteDeviceFileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDeviceFileResponseBody = DeleteDeviceFileResponseBody;
class DeleteDeviceFileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeviceFileResponseBody,
        };
    }
}
exports.DeleteDeviceFileResponse = DeleteDeviceFileResponse;
class DeleteDeviceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteDeviceGroupRequest = DeleteDeviceGroupRequest;
class DeleteDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDeviceGroupResponseBody = DeleteDeviceGroupResponseBody;
class DeleteDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDeviceGroupResponseBody,
        };
    }
}
exports.DeleteDeviceGroupResponse = DeleteDeviceGroupResponse;
class DeleteDevicePropRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            propKey: 'PropKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            propKey: 'string',
        };
    }
}
exports.DeleteDevicePropRequest = DeleteDevicePropRequest;
class DeleteDevicePropResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteDevicePropResponseBody = DeleteDevicePropResponseBody;
class DeleteDevicePropResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteDevicePropResponseBody,
        };
    }
}
exports.DeleteDevicePropResponse = DeleteDevicePropResponse;
class DeleteEdgeDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteEdgeDriverRequest = DeleteEdgeDriverRequest;
class DeleteEdgeDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteEdgeDriverResponseBody = DeleteEdgeDriverResponseBody;
class DeleteEdgeDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteEdgeDriverResponseBody,
        };
    }
}
exports.DeleteEdgeDriverResponse = DeleteEdgeDriverResponse;
class DeleteEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            driverVersion: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteEdgeDriverVersionRequest = DeleteEdgeDriverVersionRequest;
class DeleteEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteEdgeDriverVersionResponseBody = DeleteEdgeDriverVersionResponseBody;
class DeleteEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteEdgeDriverVersionResponseBody,
        };
    }
}
exports.DeleteEdgeDriverVersionResponse = DeleteEdgeDriverVersionResponse;
class DeleteEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteEdgeInstanceRequest = DeleteEdgeInstanceRequest;
class DeleteEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteEdgeInstanceResponseBody = DeleteEdgeInstanceResponseBody;
class DeleteEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteEdgeInstanceResponseBody,
        };
    }
}
exports.DeleteEdgeInstanceResponse = DeleteEdgeInstanceResponse;
class DeleteEdgeInstanceMessageRoutingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            routeId: 'RouteId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            routeId: 'number',
        };
    }
}
exports.DeleteEdgeInstanceMessageRoutingRequest = DeleteEdgeInstanceMessageRoutingRequest;
class DeleteEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteEdgeInstanceMessageRoutingResponseBody = DeleteEdgeInstanceMessageRoutingResponseBody;
class DeleteEdgeInstanceMessageRoutingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteEdgeInstanceMessageRoutingResponseBody,
        };
    }
}
exports.DeleteEdgeInstanceMessageRoutingResponse = DeleteEdgeInstanceMessageRoutingResponse;
class DeleteJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.DeleteJobRequest = DeleteJobRequest;
class DeleteJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteJobResponseBody = DeleteJobResponseBody;
class DeleteJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteJobResponseBody,
        };
    }
}
exports.DeleteJobResponse = DeleteJobResponse;
class DeleteOTAFirmwareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteOTAFirmwareRequest = DeleteOTAFirmwareRequest;
class DeleteOTAFirmwareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteOTAFirmwareResponseBody = DeleteOTAFirmwareResponseBody;
class DeleteOTAFirmwareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteOTAFirmwareResponseBody,
        };
    }
}
exports.DeleteOTAFirmwareResponse = DeleteOTAFirmwareResponse;
class DeleteOTAModuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            moduleName: 'string',
            productKey: 'string',
        };
    }
}
exports.DeleteOTAModuleRequest = DeleteOTAModuleRequest;
class DeleteOTAModuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteOTAModuleResponseBody = DeleteOTAModuleResponseBody;
class DeleteOTAModuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteOTAModuleResponseBody,
        };
    }
}
exports.DeleteOTAModuleResponse = DeleteOTAModuleResponse;
class DeleteProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DeleteProductRequest = DeleteProductRequest;
class DeleteProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteProductResponseBody = DeleteProductResponseBody;
class DeleteProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteProductResponseBody,
        };
    }
}
exports.DeleteProductResponse = DeleteProductResponse;
class DeleteProductTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            productTagKey: 'ProductTagKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            productTagKey: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteProductTagsRequest = DeleteProductTagsRequest;
class DeleteProductTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteProductTagsResponseBody = DeleteProductTagsResponseBody;
class DeleteProductTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteProductTagsResponseBody,
        };
    }
}
exports.DeleteProductTagsResponse = DeleteProductTagsResponse;
class DeleteProductTopicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            topicId: 'TopicId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            topicId: 'string',
        };
    }
}
exports.DeleteProductTopicRequest = DeleteProductTopicRequest;
class DeleteProductTopicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteProductTopicResponseBody = DeleteProductTopicResponseBody;
class DeleteProductTopicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteProductTopicResponseBody,
        };
    }
}
exports.DeleteProductTopicResponse = DeleteProductTopicResponse;
class DeleteRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'number',
        };
    }
}
exports.DeleteRuleRequest = DeleteRuleRequest;
class DeleteRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteRuleResponseBody = DeleteRuleResponseBody;
class DeleteRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteRuleResponseBody,
        };
    }
}
exports.DeleteRuleResponse = DeleteRuleResponse;
class DeleteRuleActionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'ActionId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            actionId: 'number',
            iotInstanceId: 'string',
        };
    }
}
exports.DeleteRuleActionRequest = DeleteRuleActionRequest;
class DeleteRuleActionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteRuleActionResponseBody = DeleteRuleActionResponseBody;
class DeleteRuleActionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteRuleActionResponseBody,
        };
    }
}
exports.DeleteRuleActionResponse = DeleteRuleActionResponse;
class DeleteSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.DeleteSceneRuleRequest = DeleteSceneRuleRequest;
class DeleteSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteSceneRuleResponseBody = DeleteSceneRuleResponseBody;
class DeleteSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteSceneRuleResponseBody,
        };
    }
}
exports.DeleteSceneRuleResponse = DeleteSceneRuleResponse;
class DeleteSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            speechCodeList: 'SpeechCodeList',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            speechCodeList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteSpeechRequest = DeleteSpeechRequest;
class DeleteSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteSpeechResponseBody = DeleteSpeechResponseBody;
class DeleteSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteSpeechResponseBody,
        };
    }
}
exports.DeleteSpeechResponse = DeleteSpeechResponse;
class DeleteStudioAppDomainOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            domainId: 'DomainId',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            domainId: 'number',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.DeleteStudioAppDomainOpenRequest = DeleteStudioAppDomainOpenRequest;
class DeleteStudioAppDomainOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteStudioAppDomainOpenResponseBody = DeleteStudioAppDomainOpenResponseBody;
class DeleteStudioAppDomainOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteStudioAppDomainOpenResponseBody,
        };
    }
}
exports.DeleteStudioAppDomainOpenResponse = DeleteStudioAppDomainOpenResponse;
class DeleteSubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            type: 'Type',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            type: 'string',
        };
    }
}
exports.DeleteSubscribeRelationRequest = DeleteSubscribeRelationRequest;
class DeleteSubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteSubscribeRelationResponseBody = DeleteSubscribeRelationResponseBody;
class DeleteSubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteSubscribeRelationResponseBody,
        };
    }
}
exports.DeleteSubscribeRelationResponse = DeleteSubscribeRelationResponse;
class DeleteThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventIdentifier: 'EventIdentifier',
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            propertyIdentifier: 'PropertyIdentifier',
            resourceGroupId: 'ResourceGroupId',
            serviceIdentifier: 'ServiceIdentifier',
        };
    }
    static types() {
        return {
            eventIdentifier: { 'type': 'array', 'itemType': 'string' },
            functionBlockId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            propertyIdentifier: { 'type': 'array', 'itemType': 'string' },
            resourceGroupId: 'string',
            serviceIdentifier: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteThingModelRequest = DeleteThingModelRequest;
class DeleteThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteThingModelResponseBody = DeleteThingModelResponseBody;
class DeleteThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteThingModelResponseBody,
        };
    }
}
exports.DeleteThingModelResponse = DeleteThingModelResponse;
class DeleteTopicRouteTableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dstTopic: 'DstTopic',
            iotInstanceId: 'IotInstanceId',
            srcTopic: 'SrcTopic',
        };
    }
    static types() {
        return {
            dstTopic: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            srcTopic: 'string',
        };
    }
}
exports.DeleteTopicRouteTableRequest = DeleteTopicRouteTableRequest;
class DeleteTopicRouteTableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            failureTopics: 'FailureTopics',
            isAllSucceed: 'IsAllSucceed',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            failureTopics: DeleteTopicRouteTableResponseBodyFailureTopics,
            isAllSucceed: 'boolean',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteTopicRouteTableResponseBody = DeleteTopicRouteTableResponseBody;
class DeleteTopicRouteTableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DeleteTopicRouteTableResponseBody,
        };
    }
}
exports.DeleteTopicRouteTableResponse = DeleteTopicRouteTableResponse;
class DisableDeviceTunnelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DisableDeviceTunnelRequest = DisableDeviceTunnelRequest;
class DisableDeviceTunnelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DisableDeviceTunnelResponseBody = DisableDeviceTunnelResponseBody;
class DisableDeviceTunnelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DisableDeviceTunnelResponseBody,
        };
    }
}
exports.DisableDeviceTunnelResponse = DisableDeviceTunnelResponse;
class DisableDeviceTunnelShareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DisableDeviceTunnelShareRequest = DisableDeviceTunnelShareRequest;
class DisableDeviceTunnelShareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DisableDeviceTunnelShareResponseBody = DisableDeviceTunnelShareResponseBody;
class DisableDeviceTunnelShareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DisableDeviceTunnelShareResponseBody,
        };
    }
}
exports.DisableDeviceTunnelShareResponse = DisableDeviceTunnelShareResponse;
class DisableSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.DisableSceneRuleRequest = DisableSceneRuleRequest;
class DisableSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DisableSceneRuleResponseBody = DisableSceneRuleResponseBody;
class DisableSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DisableSceneRuleResponseBody,
        };
    }
}
exports.DisableSceneRuleResponse = DisableSceneRuleResponse;
class DisableThingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.DisableThingRequest = DisableThingRequest;
class DisableThingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.DisableThingResponseBody = DisableThingResponseBody;
class DisableThingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: DisableThingResponseBody,
        };
    }
}
exports.DisableThingResponse = DisableThingResponse;
class EnableDeviceTunnelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.EnableDeviceTunnelRequest = EnableDeviceTunnelRequest;
class EnableDeviceTunnelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.EnableDeviceTunnelResponseBody = EnableDeviceTunnelResponseBody;
class EnableDeviceTunnelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EnableDeviceTunnelResponseBody,
        };
    }
}
exports.EnableDeviceTunnelResponse = EnableDeviceTunnelResponse;
class EnableDeviceTunnelShareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.EnableDeviceTunnelShareRequest = EnableDeviceTunnelShareRequest;
class EnableDeviceTunnelShareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.EnableDeviceTunnelShareResponseBody = EnableDeviceTunnelShareResponseBody;
class EnableDeviceTunnelShareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EnableDeviceTunnelShareResponseBody,
        };
    }
}
exports.EnableDeviceTunnelShareResponse = EnableDeviceTunnelShareResponse;
class EnableSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.EnableSceneRuleRequest = EnableSceneRuleRequest;
class EnableSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.EnableSceneRuleResponseBody = EnableSceneRuleResponseBody;
class EnableSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EnableSceneRuleResponseBody,
        };
    }
}
exports.EnableSceneRuleResponse = EnableSceneRuleResponse;
class EnableThingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.EnableThingRequest = EnableThingRequest;
class EnableThingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.EnableThingResponseBody = EnableThingResponseBody;
class EnableThingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: EnableThingResponseBody,
        };
    }
}
exports.EnableThingResponse = EnableThingResponse;
class GenerateDeviceNameListURLRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
        };
    }
}
exports.GenerateDeviceNameListURLRequest = GenerateDeviceNameListURLRequest;
class GenerateDeviceNameListURLResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GenerateDeviceNameListURLResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GenerateDeviceNameListURLResponseBody = GenerateDeviceNameListURLResponseBody;
class GenerateDeviceNameListURLResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GenerateDeviceNameListURLResponseBody,
        };
    }
}
exports.GenerateDeviceNameListURLResponse = GenerateDeviceNameListURLResponse;
class GenerateFileUploadURLRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            fileName: 'FileName',
            fileSuffix: 'FileSuffix',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            fileName: 'string',
            fileSuffix: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GenerateFileUploadURLRequest = GenerateFileUploadURLRequest;
class GenerateFileUploadURLResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GenerateFileUploadURLResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GenerateFileUploadURLResponseBody = GenerateFileUploadURLResponseBody;
class GenerateFileUploadURLResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GenerateFileUploadURLResponseBody,
        };
    }
}
exports.GenerateFileUploadURLResponse = GenerateFileUploadURLResponse;
class GenerateOTAUploadURLRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileSuffix: 'FileSuffix',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            fileSuffix: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GenerateOTAUploadURLRequest = GenerateOTAUploadURLRequest;
class GenerateOTAUploadURLResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GenerateOTAUploadURLResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GenerateOTAUploadURLResponseBody = GenerateOTAUploadURLResponseBody;
class GenerateOTAUploadURLResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GenerateOTAUploadURLResponseBody,
        };
    }
}
exports.GenerateOTAUploadURLResponse = GenerateOTAUploadURLResponse;
class GetDataAPIServiceDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSrn: 'ApiSrn',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            apiSrn: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GetDataAPIServiceDetailRequest = GetDataAPIServiceDetailRequest;
class GetDataAPIServiceDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetDataAPIServiceDetailResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetDataAPIServiceDetailResponseBody = GetDataAPIServiceDetailResponseBody;
class GetDataAPIServiceDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDataAPIServiceDetailResponseBody,
        };
    }
}
exports.GetDataAPIServiceDetailResponse = GetDataAPIServiceDetailResponse;
class GetDeviceShadowRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetDeviceShadowRequest = GetDeviceShadowRequest;
class GetDeviceShadowResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            shadowMessage: 'ShadowMessage',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            shadowMessage: 'string',
            success: 'boolean',
        };
    }
}
exports.GetDeviceShadowResponseBody = GetDeviceShadowResponseBody;
class GetDeviceShadowResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeviceShadowResponseBody,
        };
    }
}
exports.GetDeviceShadowResponse = GetDeviceShadowResponse;
class GetDeviceStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetDeviceStatusRequest = GetDeviceStatusRequest;
class GetDeviceStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetDeviceStatusResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetDeviceStatusResponseBody = GetDeviceStatusResponseBody;
class GetDeviceStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeviceStatusResponseBody,
        };
    }
}
exports.GetDeviceStatusResponse = GetDeviceStatusResponse;
class GetDeviceTunnelShareStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetDeviceTunnelShareStatusRequest = GetDeviceTunnelShareStatusRequest;
class GetDeviceTunnelShareStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetDeviceTunnelShareStatusResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetDeviceTunnelShareStatusResponseBody = GetDeviceTunnelShareStatusResponseBody;
class GetDeviceTunnelShareStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeviceTunnelShareStatusResponseBody,
        };
    }
}
exports.GetDeviceTunnelShareStatusResponse = GetDeviceTunnelShareStatusResponse;
class GetDeviceTunnelStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetDeviceTunnelStatusRequest = GetDeviceTunnelStatusRequest;
class GetDeviceTunnelStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetDeviceTunnelStatusResponseBody = GetDeviceTunnelStatusResponseBody;
class GetDeviceTunnelStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetDeviceTunnelStatusResponseBody,
        };
    }
}
exports.GetDeviceTunnelStatusResponse = GetDeviceTunnelStatusResponse;
class GetEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            driverVersion: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GetEdgeDriverVersionRequest = GetEdgeDriverVersionRequest;
class GetEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetEdgeDriverVersionResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetEdgeDriverVersionResponseBody = GetEdgeDriverVersionResponseBody;
class GetEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetEdgeDriverVersionResponseBody,
        };
    }
}
exports.GetEdgeDriverVersionResponse = GetEdgeDriverVersionResponse;
class GetEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GetEdgeInstanceRequest = GetEdgeInstanceRequest;
class GetEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetEdgeInstanceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetEdgeInstanceResponseBody = GetEdgeInstanceResponseBody;
class GetEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetEdgeInstanceResponseBody,
        };
    }
}
exports.GetEdgeInstanceResponse = GetEdgeInstanceResponse;
class GetEdgeInstanceDeploymentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deploymentId: 'DeploymentId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            deploymentId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.GetEdgeInstanceDeploymentRequest = GetEdgeInstanceDeploymentRequest;
class GetEdgeInstanceDeploymentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetEdgeInstanceDeploymentResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetEdgeInstanceDeploymentResponseBody = GetEdgeInstanceDeploymentResponseBody;
class GetEdgeInstanceDeploymentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetEdgeInstanceDeploymentResponseBody,
        };
    }
}
exports.GetEdgeInstanceDeploymentResponse = GetEdgeInstanceDeploymentResponse;
class GetEdgeInstanceMessageRoutingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            routeId: 'RouteId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            routeId: 'number',
        };
    }
}
exports.GetEdgeInstanceMessageRoutingRequest = GetEdgeInstanceMessageRoutingRequest;
class GetEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetEdgeInstanceMessageRoutingResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetEdgeInstanceMessageRoutingResponseBody = GetEdgeInstanceMessageRoutingResponseBody;
class GetEdgeInstanceMessageRoutingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetEdgeInstanceMessageRoutingResponseBody,
        };
    }
}
exports.GetEdgeInstanceMessageRoutingResponse = GetEdgeInstanceMessageRoutingResponse;
class GetGatewayBySubDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetGatewayBySubDeviceRequest = GetGatewayBySubDeviceRequest;
class GetGatewayBySubDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetGatewayBySubDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetGatewayBySubDeviceResponseBody = GetGatewayBySubDeviceResponseBody;
class GetGatewayBySubDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetGatewayBySubDeviceResponseBody,
        };
    }
}
exports.GetGatewayBySubDeviceResponse = GetGatewayBySubDeviceResponse;
class GetLoraNodesTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            taskId: 'string',
        };
    }
}
exports.GetLoraNodesTaskRequest = GetLoraNodesTaskRequest;
class GetLoraNodesTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            successCount: 'SuccessCount',
            successDevEuis: 'SuccessDevEuis',
            taskId: 'TaskId',
            taskState: 'TaskState',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            successCount: 'number',
            successDevEuis: GetLoraNodesTaskResponseBodySuccessDevEuis,
            taskId: 'string',
            taskState: 'string',
            totalCount: 'number',
        };
    }
}
exports.GetLoraNodesTaskResponseBody = GetLoraNodesTaskResponseBody;
class GetLoraNodesTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetLoraNodesTaskResponseBody,
        };
    }
}
exports.GetLoraNodesTaskResponse = GetLoraNodesTaskResponse;
class GetNodesAddingTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            taskId: 'string',
        };
    }
}
exports.GetNodesAddingTaskRequest = GetNodesAddingTaskRequest;
class GetNodesAddingTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            successCount: 'SuccessCount',
            successDevEuis: 'SuccessDevEuis',
            taskId: 'TaskId',
            taskState: 'TaskState',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            successCount: 'number',
            successDevEuis: GetNodesAddingTaskResponseBodySuccessDevEuis,
            taskId: 'string',
            taskState: 'string',
            totalCount: 'number',
        };
    }
}
exports.GetNodesAddingTaskResponseBody = GetNodesAddingTaskResponseBody;
class GetNodesAddingTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetNodesAddingTaskResponseBody,
        };
    }
}
exports.GetNodesAddingTaskResponse = GetNodesAddingTaskResponse;
class GetRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'number',
        };
    }
}
exports.GetRuleRequest = GetRuleRequest;
class GetRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            ruleInfo: 'RuleInfo',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            ruleInfo: GetRuleResponseBodyRuleInfo,
            success: 'boolean',
        };
    }
}
exports.GetRuleResponseBody = GetRuleResponseBody;
class GetRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRuleResponseBody,
        };
    }
}
exports.GetRuleResponse = GetRuleResponse;
class GetRuleActionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'ActionId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            actionId: 'number',
            iotInstanceId: 'string',
        };
    }
}
exports.GetRuleActionRequest = GetRuleActionRequest;
class GetRuleActionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            ruleActionInfo: 'RuleActionInfo',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            ruleActionInfo: GetRuleActionResponseBodyRuleActionInfo,
            success: 'boolean',
        };
    }
}
exports.GetRuleActionResponseBody = GetRuleActionResponseBody;
class GetRuleActionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetRuleActionResponseBody,
        };
    }
}
exports.GetRuleActionResponse = GetRuleActionResponse;
class GetSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.GetSceneRuleRequest = GetSceneRuleRequest;
class GetSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetSceneRuleResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetSceneRuleResponseBody = GetSceneRuleResponseBody;
class GetSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSceneRuleResponseBody,
        };
    }
}
exports.GetSceneRuleResponse = GetSceneRuleResponse;
class GetSpeechVoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetSpeechVoiceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetSpeechVoiceResponseBody = GetSpeechVoiceResponseBody;
class GetSpeechVoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetSpeechVoiceResponseBody,
        };
    }
}
exports.GetSpeechVoiceResponse = GetSpeechVoiceResponse;
class GetStudioAppTokenOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.GetStudioAppTokenOpenRequest = GetStudioAppTokenOpenRequest;
class GetStudioAppTokenOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetStudioAppTokenOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetStudioAppTokenOpenResponseBody = GetStudioAppTokenOpenResponseBody;
class GetStudioAppTokenOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetStudioAppTokenOpenResponseBody,
        };
    }
}
exports.GetStudioAppTokenOpenResponse = GetStudioAppTokenOpenResponse;
class GetThingModelTslRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            simple: 'Simple',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            simple: 'boolean',
        };
    }
}
exports.GetThingModelTslRequest = GetThingModelTslRequest;
class GetThingModelTslResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetThingModelTslResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetThingModelTslResponseBody = GetThingModelTslResponseBody;
class GetThingModelTslResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetThingModelTslResponseBody,
        };
    }
}
exports.GetThingModelTslResponse = GetThingModelTslResponse;
class GetThingModelTslPublishedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
            simple: 'Simple',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
            simple: 'boolean',
        };
    }
}
exports.GetThingModelTslPublishedRequest = GetThingModelTslPublishedRequest;
class GetThingModelTslPublishedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetThingModelTslPublishedResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetThingModelTslPublishedResponseBody = GetThingModelTslPublishedResponseBody;
class GetThingModelTslPublishedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetThingModelTslPublishedResponseBody,
        };
    }
}
exports.GetThingModelTslPublishedResponse = GetThingModelTslPublishedResponse;
class GetThingScriptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetThingScriptRequest = GetThingScriptRequest;
class GetThingScriptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetThingScriptResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetThingScriptResponseBody = GetThingScriptResponseBody;
class GetThingScriptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetThingScriptResponseBody,
        };
    }
}
exports.GetThingScriptResponse = GetThingScriptResponse;
class GetThingTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryKey: 'CategoryKey',
            iotInstanceId: 'IotInstanceId',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            categoryKey: 'string',
            iotInstanceId: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.GetThingTemplateRequest = GetThingTemplateRequest;
class GetThingTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            thingModelJSON: 'ThingModelJSON',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            thingModelJSON: 'string',
        };
    }
}
exports.GetThingTemplateResponseBody = GetThingTemplateResponseBody;
class GetThingTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetThingTemplateResponseBody,
        };
    }
}
exports.GetThingTemplateResponse = GetThingTemplateResponse;
class GetThingTopoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageNo: 'number',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.GetThingTopoRequest = GetThingTopoRequest;
class GetThingTopoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetThingTopoResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetThingTopoResponseBody = GetThingTopoResponseBody;
class GetThingTopoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: GetThingTopoResponseBody,
        };
    }
}
exports.GetThingTopoResponse = GetThingTopoResponse;
class ImportThingModelTslRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            functionBlockName: 'FunctionBlockName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
            tslStr: 'TslStr',
            tslUrl: 'TslUrl',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            functionBlockName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
            tslStr: 'string',
            tslUrl: 'string',
        };
    }
}
exports.ImportThingModelTslRequest = ImportThingModelTslRequest;
class ImportThingModelTslResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ImportThingModelTslResponseBody = ImportThingModelTslResponseBody;
class ImportThingModelTslResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ImportThingModelTslResponseBody,
        };
    }
}
exports.ImportThingModelTslResponse = ImportThingModelTslResponse;
class InvokeDataAPIServiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSrn: 'ApiSrn',
            iotInstanceId: 'IotInstanceId',
            param: 'Param',
        };
    }
    static types() {
        return {
            apiSrn: 'string',
            iotInstanceId: 'string',
            param: { 'type': 'array', 'itemType': InvokeDataAPIServiceRequestParam },
        };
    }
}
exports.InvokeDataAPIServiceRequest = InvokeDataAPIServiceRequest;
class InvokeDataAPIServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: InvokeDataAPIServiceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.InvokeDataAPIServiceResponseBody = InvokeDataAPIServiceResponseBody;
class InvokeDataAPIServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InvokeDataAPIServiceResponseBody,
        };
    }
}
exports.InvokeDataAPIServiceResponse = InvokeDataAPIServiceResponse;
class InvokeThingServiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            args: 'Args',
            deviceName: 'DeviceName',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            args: 'string',
            deviceName: 'string',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.InvokeThingServiceRequest = InvokeThingServiceRequest;
class InvokeThingServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: InvokeThingServiceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.InvokeThingServiceResponseBody = InvokeThingServiceResponseBody;
class InvokeThingServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InvokeThingServiceResponseBody,
        };
    }
}
exports.InvokeThingServiceResponse = InvokeThingServiceResponse;
class InvokeThingsServiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            args: 'Args',
            deviceName: 'DeviceName',
            identifier: 'Identifier',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            args: 'string',
            deviceName: { 'type': 'array', 'itemType': 'string' },
            identifier: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.InvokeThingsServiceRequest = InvokeThingsServiceRequest;
class InvokeThingsServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.InvokeThingsServiceResponseBody = InvokeThingsServiceResponseBody;
class InvokeThingsServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: InvokeThingsServiceResponseBody,
        };
    }
}
exports.InvokeThingsServiceResponse = InvokeThingsServiceResponse;
class ListAnalyticsDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiPath: 'ApiPath',
            condition: 'Condition',
            iotInstanceId: 'IotInstanceId',
            isoId: 'IsoId',
            pageNum: 'PageNum',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            apiPath: 'string',
            condition: { 'type': 'array', 'itemType': ListAnalyticsDataRequestCondition },
            iotInstanceId: 'string',
            isoId: 'string',
            pageNum: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListAnalyticsDataRequest = ListAnalyticsDataRequest;
class ListAnalyticsDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListAnalyticsDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListAnalyticsDataResponseBody = ListAnalyticsDataResponseBody;
class ListAnalyticsDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListAnalyticsDataResponseBody,
        };
    }
}
exports.ListAnalyticsDataResponse = ListAnalyticsDataResponse;
class ListDeviceDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            jobId: 'JobId',
            nextToken: 'NextToken',
            pageSize: 'PageSize',
            status: 'Status',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            jobId: 'string',
            nextToken: 'string',
            pageSize: 'number',
            status: 'number',
            targetUid: 'string',
        };
    }
}
exports.ListDeviceDistributeJobRequest = ListDeviceDistributeJobRequest;
class ListDeviceDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListDeviceDistributeJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListDeviceDistributeJobResponseBody = ListDeviceDistributeJobResponseBody;
class ListDeviceDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDeviceDistributeJobResponseBody,
        };
    }
}
exports.ListDeviceDistributeJobResponse = ListDeviceDistributeJobResponse;
class ListDistributedDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceName: 'DeviceName',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceName: 'string',
            pageSize: 'number',
            productKey: 'string',
            sourceInstanceId: 'string',
            targetUid: 'string',
        };
    }
}
exports.ListDistributedDeviceRequest = ListDistributedDeviceRequest;
class ListDistributedDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListDistributedDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListDistributedDeviceResponseBody = ListDistributedDeviceResponseBody;
class ListDistributedDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDistributedDeviceResponseBody,
        };
    }
}
exports.ListDistributedDeviceResponse = ListDistributedDeviceResponse;
class ListDistributedProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            targetInstanceId: 'TargetInstanceId',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            pageSize: 'number',
            productKey: 'string',
            sourceInstanceId: 'string',
            targetInstanceId: 'string',
            targetUid: 'string',
        };
    }
}
exports.ListDistributedProductRequest = ListDistributedProductRequest;
class ListDistributedProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListDistributedProductResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListDistributedProductResponseBody = ListDistributedProductResponseBody;
class ListDistributedProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListDistributedProductResponseBody,
        };
    }
}
exports.ListDistributedProductResponse = ListDistributedProductResponse;
class ListJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            status: 'Status',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            status: 'string',
        };
    }
}
exports.ListJobRequest = ListJobRequest;
class ListJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListJobResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListJobResponseBody = ListJobResponseBody;
class ListJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListJobResponseBody,
        };
    }
}
exports.ListJobResponse = ListJobResponse;
class ListOTAFirmwareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            destVersion: 'DestVersion',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            destVersion: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.ListOTAFirmwareRequest = ListOTAFirmwareRequest;
class ListOTAFirmwareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            errorMessage: 'ErrorMessage',
            firmwareInfo: 'FirmwareInfo',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            errorMessage: 'string',
            firmwareInfo: ListOTAFirmwareResponseBodyFirmwareInfo,
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListOTAFirmwareResponseBody = ListOTAFirmwareResponseBody;
class ListOTAFirmwareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAFirmwareResponseBody,
        };
    }
}
exports.ListOTAFirmwareResponse = ListOTAFirmwareResponse;
class ListOTAJobByDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceName: 'DeviceName',
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceName: 'string',
            firmwareId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.ListOTAJobByDeviceRequest = ListOTAJobByDeviceRequest;
class ListOTAJobByDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: ListOTAJobByDeviceResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListOTAJobByDeviceResponseBody = ListOTAJobByDeviceResponseBody;
class ListOTAJobByDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAJobByDeviceResponseBody,
        };
    }
}
exports.ListOTAJobByDeviceResponse = ListOTAJobByDeviceResponse;
class ListOTAJobByFirmwareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            firmwareId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.ListOTAJobByFirmwareRequest = ListOTAJobByFirmwareRequest;
class ListOTAJobByFirmwareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: ListOTAJobByFirmwareResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListOTAJobByFirmwareResponseBody = ListOTAJobByFirmwareResponseBody;
class ListOTAJobByFirmwareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAJobByFirmwareResponseBody,
        };
    }
}
exports.ListOTAJobByFirmwareResponse = ListOTAJobByFirmwareResponse;
class ListOTAModuleByProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.ListOTAModuleByProductRequest = ListOTAModuleByProductRequest;
class ListOTAModuleByProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': ListOTAModuleByProductResponseBodyData },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListOTAModuleByProductResponseBody = ListOTAModuleByProductResponseBody;
class ListOTAModuleByProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAModuleByProductResponseBody,
        };
    }
}
exports.ListOTAModuleByProductResponse = ListOTAModuleByProductResponse;
class ListOTAModuleVersionsByDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.ListOTAModuleVersionsByDeviceRequest = ListOTAModuleVersionsByDeviceRequest;
class ListOTAModuleVersionsByDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: ListOTAModuleVersionsByDeviceResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListOTAModuleVersionsByDeviceResponseBody = ListOTAModuleVersionsByDeviceResponseBody;
class ListOTAModuleVersionsByDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAModuleVersionsByDeviceResponseBody,
        };
    }
}
exports.ListOTAModuleVersionsByDeviceResponse = ListOTAModuleVersionsByDeviceResponse;
class ListOTATaskByJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceNames: 'DeviceNames',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
            pageSize: 'PageSize',
            taskStatus: 'TaskStatus',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceNames: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            jobId: 'string',
            pageSize: 'number',
            taskStatus: 'string',
        };
    }
}
exports.ListOTATaskByJobRequest = ListOTATaskByJobRequest;
class ListOTATaskByJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: ListOTATaskByJobResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListOTATaskByJobResponseBody = ListOTATaskByJobResponseBody;
class ListOTATaskByJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTATaskByJobResponseBody,
        };
    }
}
exports.ListOTATaskByJobResponse = ListOTATaskByJobResponse;
class ListOTAUnfinishedTaskByDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
            taskStatus: 'TaskStatus',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            moduleName: 'string',
            productKey: 'string',
            taskStatus: 'string',
        };
    }
}
exports.ListOTAUnfinishedTaskByDeviceRequest = ListOTAUnfinishedTaskByDeviceRequest;
class ListOTAUnfinishedTaskByDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListOTAUnfinishedTaskByDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListOTAUnfinishedTaskByDeviceResponseBody = ListOTAUnfinishedTaskByDeviceResponseBody;
class ListOTAUnfinishedTaskByDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListOTAUnfinishedTaskByDeviceResponseBody,
        };
    }
}
exports.ListOTAUnfinishedTaskByDeviceResponse = ListOTAUnfinishedTaskByDeviceResponse;
class ListProductByTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            productTag: { 'type': 'array', 'itemType': ListProductByTagsRequestProductTag },
        };
    }
}
exports.ListProductByTagsRequest = ListProductByTagsRequest;
class ListProductByTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            productInfos: 'ProductInfos',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            productInfos: ListProductByTagsResponseBodyProductInfos,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListProductByTagsResponseBody = ListProductByTagsResponseBody;
class ListProductByTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListProductByTagsResponseBody,
        };
    }
}
exports.ListProductByTagsResponse = ListProductByTagsResponse;
class ListProductTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.ListProductTagsRequest = ListProductTagsRequest;
class ListProductTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListProductTagsResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListProductTagsResponseBody = ListProductTagsResponseBody;
class ListProductTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListProductTagsResponseBody,
        };
    }
}
exports.ListProductTagsResponse = ListProductTagsResponse;
class ListRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            resourceGroupId: 'string',
        };
    }
}
exports.ListRuleRequest = ListRuleRequest;
class ListRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListRuleResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListRuleResponseBody = ListRuleResponseBody;
class ListRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListRuleResponseBody,
        };
    }
}
exports.ListRuleResponse = ListRuleResponse;
class ListRuleActionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'number',
        };
    }
}
exports.ListRuleActionsRequest = ListRuleActionsRequest;
class ListRuleActionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            ruleActionList: 'RuleActionList',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            ruleActionList: ListRuleActionsResponseBodyRuleActionList,
            success: 'boolean',
        };
    }
}
exports.ListRuleActionsResponseBody = ListRuleActionsResponseBody;
class ListRuleActionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListRuleActionsResponseBody,
        };
    }
}
exports.ListRuleActionsResponse = ListRuleActionsResponse;
class ListTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            device: 'Device',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
            limit: 'Limit',
            nextToken: 'NextToken',
            status: 'Status',
        };
    }
    static types() {
        return {
            device: 'string',
            iotInstanceId: 'string',
            jobId: 'string',
            limit: 'number',
            nextToken: 'string',
            status: 'string',
        };
    }
}
exports.ListTaskRequest = ListTaskRequest;
class ListTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            nextToken: 'NextToken',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListTaskResponseBodyData,
            errorMessage: 'string',
            nextToken: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListTaskResponseBody = ListTaskResponseBody;
class ListTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListTaskResponseBody,
        };
    }
}
exports.ListTaskResponse = ListTaskResponse;
class ListTaskByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            device: 'Device',
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
            jobName: 'JobName',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            status: 'Status',
        };
    }
    static types() {
        return {
            device: 'string',
            deviceName: 'string',
            iotInstanceId: 'string',
            jobId: 'string',
            jobName: 'string',
            pageNo: 'string',
            pageSize: 'string',
            status: 'string',
        };
    }
}
exports.ListTaskByPageRequest = ListTaskByPageRequest;
class ListTaskByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListTaskByPageResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.ListTaskByPageResponseBody = ListTaskByPageResponseBody;
class ListTaskByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListTaskByPageResponseBody,
        };
    }
}
exports.ListTaskByPageResponse = ListTaskByPageResponse;
class ListThingModelVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.ListThingModelVersionRequest = ListThingModelVersionRequest;
class ListThingModelVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: ListThingModelVersionResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListThingModelVersionResponseBody = ListThingModelVersionResponseBody;
class ListThingModelVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListThingModelVersionResponseBody,
        };
    }
}
exports.ListThingModelVersionResponse = ListThingModelVersionResponse;
class ListThingTemplatesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
        };
    }
}
exports.ListThingTemplatesRequest = ListThingTemplatesRequest;
class ListThingTemplatesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': ListThingTemplatesResponseBodyData },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListThingTemplatesResponseBody = ListThingTemplatesResponseBody;
class ListThingTemplatesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ListThingTemplatesResponseBody,
        };
    }
}
exports.ListThingTemplatesResponse = ListThingTemplatesResponse;
class NotifyAddThingTopoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceListStr: 'DeviceListStr',
            gwDeviceName: 'GwDeviceName',
            gwIotId: 'GwIotId',
            gwProductKey: 'GwProductKey',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            deviceListStr: 'string',
            gwDeviceName: 'string',
            gwIotId: 'string',
            gwProductKey: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.NotifyAddThingTopoRequest = NotifyAddThingTopoRequest;
class NotifyAddThingTopoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: NotifyAddThingTopoResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.NotifyAddThingTopoResponseBody = NotifyAddThingTopoResponseBody;
class NotifyAddThingTopoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: NotifyAddThingTopoResponseBody,
        };
    }
}
exports.NotifyAddThingTopoResponse = NotifyAddThingTopoResponse;
class OpenIotServiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ownerId: 'OwnerId',
        };
    }
    static types() {
        return {
            ownerId: 'number',
        };
    }
}
exports.OpenIotServiceRequest = OpenIotServiceRequest;
class OpenIotServiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orderId: 'OrderId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            orderId: 'string',
            requestId: 'string',
        };
    }
}
exports.OpenIotServiceResponseBody = OpenIotServiceResponseBody;
class OpenIotServiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: OpenIotServiceResponseBody,
        };
    }
}
exports.OpenIotServiceResponse = OpenIotServiceResponse;
class PrintByTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            paramsJsonString: 'ParamsJsonString',
            productKey: 'ProductKey',
            projectCode: 'ProjectCode',
            templateBizCode: 'TemplateBizCode',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            paramsJsonString: 'string',
            productKey: 'string',
            projectCode: 'string',
            templateBizCode: 'string',
        };
    }
}
exports.PrintByTemplateRequest = PrintByTemplateRequest;
class PrintByTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: PrintByTemplateResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PrintByTemplateResponseBody = PrintByTemplateResponseBody;
class PrintByTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PrintByTemplateResponseBody,
        };
    }
}
exports.PrintByTemplateResponse = PrintByTemplateResponse;
class PubRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            correlationData: 'CorrelationData',
            iotInstanceId: 'IotInstanceId',
            messageContent: 'MessageContent',
            productKey: 'ProductKey',
            qos: 'Qos',
            responseTopic: 'ResponseTopic',
            topicFullName: 'TopicFullName',
            userProp: 'UserProp',
        };
    }
    static types() {
        return {
            correlationData: 'string',
            iotInstanceId: 'string',
            messageContent: 'string',
            productKey: 'string',
            qos: 'number',
            responseTopic: 'string',
            topicFullName: 'string',
            userProp: { 'type': 'array', 'itemType': PubRequestUserProp },
        };
    }
}
exports.PubRequest = PubRequest;
class PubResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            messageId: 'MessageId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            messageId: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PubResponseBody = PubResponseBody;
class PubResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PubResponseBody,
        };
    }
}
exports.PubResponse = PubResponse;
class PubBroadcastRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            messageContent: 'MessageContent',
            productKey: 'ProductKey',
            topicFullName: 'TopicFullName',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            messageContent: 'string',
            productKey: 'string',
            topicFullName: 'string',
        };
    }
}
exports.PubBroadcastRequest = PubBroadcastRequest;
class PubBroadcastResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            messageId: 'MessageId',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            messageId: 'number',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PubBroadcastResponseBody = PubBroadcastResponseBody;
class PubBroadcastResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PubBroadcastResponseBody,
        };
    }
}
exports.PubBroadcastResponse = PubBroadcastResponse;
class PublishStudioAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            description: 'Description',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            description: 'string',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.PublishStudioAppRequest = PublishStudioAppRequest;
class PublishStudioAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PublishStudioAppResponseBody = PublishStudioAppResponseBody;
class PublishStudioAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PublishStudioAppResponseBody,
        };
    }
}
exports.PublishStudioAppResponse = PublishStudioAppResponse;
class PublishThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            description: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.PublishThingModelRequest = PublishThingModelRequest;
class PublishThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PublishThingModelResponseBody = PublishThingModelResponseBody;
class PublishThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PublishThingModelResponseBody,
        };
    }
}
exports.PublishThingModelResponse = PublishThingModelResponse;
class PushSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            groupId: 'GroupId',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            projectCode: 'ProjectCode',
            pushMode: 'PushMode',
            speechCodeList: 'SpeechCodeList',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            groupId: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            projectCode: 'string',
            pushMode: 'string',
            speechCodeList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.PushSpeechRequest = PushSpeechRequest;
class PushSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PushSpeechResponseBody = PushSpeechResponseBody;
class PushSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: PushSpeechResponseBody,
        };
    }
}
exports.PushSpeechResponse = PushSpeechResponse;
class QueryAppDeviceListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appKey: 'AppKey',
            categoryKeyList: 'CategoryKeyList',
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKeyList: 'ProductKeyList',
            tagList: 'TagList',
        };
    }
    static types() {
        return {
            appKey: 'string',
            categoryKeyList: { 'type': 'array', 'itemType': 'string' },
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKeyList: { 'type': 'array', 'itemType': 'string' },
            tagList: { 'type': 'array', 'itemType': QueryAppDeviceListRequestTagList },
        };
    }
}
exports.QueryAppDeviceListRequest = QueryAppDeviceListRequest;
class QueryAppDeviceListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryAppDeviceListResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryAppDeviceListResponseBody = QueryAppDeviceListResponseBody;
class QueryAppDeviceListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryAppDeviceListResponseBody,
        };
    }
}
exports.QueryAppDeviceListResponse = QueryAppDeviceListResponse;
class QueryBatchRegisterDeviceStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            applyId: 'number',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryBatchRegisterDeviceStatusRequest = QueryBatchRegisterDeviceStatusRequest;
class QueryBatchRegisterDeviceStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryBatchRegisterDeviceStatusResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryBatchRegisterDeviceStatusResponseBody = QueryBatchRegisterDeviceStatusResponseBody;
class QueryBatchRegisterDeviceStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryBatchRegisterDeviceStatusResponseBody,
        };
    }
}
exports.QueryBatchRegisterDeviceStatusResponse = QueryBatchRegisterDeviceStatusResponse;
class QueryCertUrlByApplyIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            applyId: 'number',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryCertUrlByApplyIdRequest = QueryCertUrlByApplyIdRequest;
class QueryCertUrlByApplyIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certUrl: 'CertUrl',
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            certUrl: 'string',
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryCertUrlByApplyIdResponseBody = QueryCertUrlByApplyIdResponseBody;
class QueryCertUrlByApplyIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryCertUrlByApplyIdResponseBody,
        };
    }
}
exports.QueryCertUrlByApplyIdResponse = QueryCertUrlByApplyIdResponse;
class QueryConsumerGroupByGroupIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryConsumerGroupByGroupIdRequest = QueryConsumerGroupByGroupIdRequest;
class QueryConsumerGroupByGroupIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryConsumerGroupByGroupIdResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryConsumerGroupByGroupIdResponseBody = QueryConsumerGroupByGroupIdResponseBody;
class QueryConsumerGroupByGroupIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryConsumerGroupByGroupIdResponseBody,
        };
    }
}
exports.QueryConsumerGroupByGroupIdResponse = QueryConsumerGroupByGroupIdResponse;
class QueryConsumerGroupListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            fuzzy: 'Fuzzy',
            groupName: 'GroupName',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            fuzzy: 'boolean',
            groupName: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryConsumerGroupListRequest = QueryConsumerGroupListRequest;
class QueryConsumerGroupListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: QueryConsumerGroupListResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryConsumerGroupListResponseBody = QueryConsumerGroupListResponseBody;
class QueryConsumerGroupListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryConsumerGroupListResponseBody,
        };
    }
}
exports.QueryConsumerGroupListResponse = QueryConsumerGroupListResponse;
class QueryConsumerGroupStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryConsumerGroupStatusRequest = QueryConsumerGroupStatusRequest;
class QueryConsumerGroupStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accumulatedConsumeCountPerMinute: 'AccumulatedConsumeCountPerMinute',
            accumulationCount: 'AccumulationCount',
            clientConnectionStatusList: 'ClientConnectionStatusList',
            code: 'Code',
            consumerSpeed: 'ConsumerSpeed',
            errorMessage: 'ErrorMessage',
            lastConsumerTime: 'LastConsumerTime',
            realTimeConsumeCountPerMinute: 'RealTimeConsumeCountPerMinute',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            accumulatedConsumeCountPerMinute: 'number',
            accumulationCount: 'number',
            clientConnectionStatusList: QueryConsumerGroupStatusResponseBodyClientConnectionStatusList,
            code: 'string',
            consumerSpeed: 'number',
            errorMessage: 'string',
            lastConsumerTime: 'string',
            realTimeConsumeCountPerMinute: 'number',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryConsumerGroupStatusResponseBody = QueryConsumerGroupStatusResponseBody;
class QueryConsumerGroupStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryConsumerGroupStatusResponseBody,
        };
    }
}
exports.QueryConsumerGroupStatusResponse = QueryConsumerGroupStatusResponse;
class QueryDetailSceneRuleLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            ruleId: 'RuleId',
            startTime: 'StartTime',
            traceId: 'TraceId',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            endTime: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            ruleId: 'string',
            startTime: 'number',
            traceId: 'string',
        };
    }
}
exports.QueryDetailSceneRuleLogRequest = QueryDetailSceneRuleLogRequest;
class QueryDetailSceneRuleLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDetailSceneRuleLogResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDetailSceneRuleLogResponseBody = QueryDetailSceneRuleLogResponseBody;
class QueryDetailSceneRuleLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDetailSceneRuleLogResponseBody,
        };
    }
}
exports.QueryDetailSceneRuleLogResponse = QueryDetailSceneRuleLogResponse;
class QueryDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            nextToken: 'NextToken',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            nextToken: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceRequest = QueryDeviceRequest;
class QueryDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            nextToken: 'NextToken',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceResponseBodyData,
            errorMessage: 'string',
            nextToken: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceResponseBody = QueryDeviceResponseBody;
class QueryDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceResponseBody,
        };
    }
}
exports.QueryDeviceResponse = QueryDeviceResponse;
class QueryDeviceBySQLRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            SQL: 'SQL',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            SQL: 'string',
        };
    }
}
exports.QueryDeviceBySQLRequest = QueryDeviceBySQLRequest;
class QueryDeviceBySQLResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': QueryDeviceBySQLResponseBodyData },
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
            totalCount: 'number',
        };
    }
}
exports.QueryDeviceBySQLResponseBody = QueryDeviceBySQLResponseBody;
class QueryDeviceBySQLResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceBySQLResponseBody,
        };
    }
}
exports.QueryDeviceBySQLResponse = QueryDeviceBySQLResponse;
class QueryDeviceByStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
            status: 'Status',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
            resourceGroupId: 'string',
            status: 'number',
        };
    }
}
exports.QueryDeviceByStatusRequest = QueryDeviceByStatusRequest;
class QueryDeviceByStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceByStatusResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceByStatusResponseBody = QueryDeviceByStatusResponseBody;
class QueryDeviceByStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceByStatusResponseBody,
        };
    }
}
exports.QueryDeviceByStatusResponse = QueryDeviceByStatusResponse;
class QueryDeviceByTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            tag: { 'type': 'array', 'itemType': QueryDeviceByTagsRequestTag },
        };
    }
}
exports.QueryDeviceByTagsRequest = QueryDeviceByTagsRequest;
class QueryDeviceByTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceByTagsResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceByTagsResponseBody = QueryDeviceByTagsResponseBody;
class QueryDeviceByTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceByTagsResponseBody,
        };
    }
}
exports.QueryDeviceByTagsResponse = QueryDeviceByTagsResponse;
class QueryDeviceCertRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceCertRequest = QueryDeviceCertRequest;
class QueryDeviceCertResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            deviceCertInfo: 'DeviceCertInfo',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            deviceCertInfo: QueryDeviceCertResponseBodyDeviceCertInfo,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceCertResponseBody = QueryDeviceCertResponseBody;
class QueryDeviceCertResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceCertResponseBody,
        };
    }
}
exports.QueryDeviceCertResponse = QueryDeviceCertResponse;
class QueryDeviceDesiredPropertyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            functionBlockId: 'FunctionBlockId',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            functionBlockId: 'string',
            identifier: { 'type': 'array', 'itemType': 'string' },
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceDesiredPropertyRequest = QueryDeviceDesiredPropertyRequest;
class QueryDeviceDesiredPropertyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceDesiredPropertyResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceDesiredPropertyResponseBody = QueryDeviceDesiredPropertyResponseBody;
class QueryDeviceDesiredPropertyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceDesiredPropertyResponseBody,
        };
    }
}
exports.QueryDeviceDesiredPropertyResponse = QueryDeviceDesiredPropertyResponse;
class QueryDeviceDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceDetailRequest = QueryDeviceDetailRequest;
class QueryDeviceDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceDetailResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceDetailResponseBody = QueryDeviceDetailResponseBody;
class QueryDeviceDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceDetailResponseBody,
        };
    }
}
exports.QueryDeviceDetailResponse = QueryDeviceDetailResponse;
class QueryDeviceDistributeDetailRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
}
exports.QueryDeviceDistributeDetailRequest = QueryDeviceDistributeDetailRequest;
class QueryDeviceDistributeDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            file: 'File',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            file: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceDistributeDetailResponseBody = QueryDeviceDistributeDetailResponseBody;
class QueryDeviceDistributeDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceDistributeDetailResponseBody,
        };
    }
}
exports.QueryDeviceDistributeDetailResponse = QueryDeviceDistributeDetailResponse;
class QueryDeviceDistributeJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
}
exports.QueryDeviceDistributeJobRequest = QueryDeviceDistributeJobRequest;
class QueryDeviceDistributeJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceDistributeJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceDistributeJobResponseBody = QueryDeviceDistributeJobResponseBody;
class QueryDeviceDistributeJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceDistributeJobResponseBody,
        };
    }
}
exports.QueryDeviceDistributeJobResponse = QueryDeviceDistributeJobResponse;
class QueryDeviceEventDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            eventType: 'EventType',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            eventType: 'string',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDeviceEventDataRequest = QueryDeviceEventDataRequest;
class QueryDeviceEventDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceEventDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceEventDataResponseBody = QueryDeviceEventDataResponseBody;
class QueryDeviceEventDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceEventDataResponseBody,
        };
    }
}
exports.QueryDeviceEventDataResponse = QueryDeviceEventDataResponse;
class QueryDeviceFileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            fileId: 'FileId',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            fileId: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceFileRequest = QueryDeviceFileRequest;
class QueryDeviceFileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceFileResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceFileResponseBody = QueryDeviceFileResponseBody;
class QueryDeviceFileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceFileResponseBody,
        };
    }
}
exports.QueryDeviceFileResponse = QueryDeviceFileResponse;
class QueryDeviceFileListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceFileListRequest = QueryDeviceFileListRequest;
class QueryDeviceFileListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: QueryDeviceFileListResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceFileListResponseBody = QueryDeviceFileListResponseBody;
class QueryDeviceFileListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceFileListResponseBody,
        };
    }
}
exports.QueryDeviceFileListResponse = QueryDeviceFileListResponse;
class QueryDeviceGroupByDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceGroupByDeviceRequest = QueryDeviceGroupByDeviceRequest;
class QueryDeviceGroupByDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            groupInfos: 'GroupInfos',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            groupInfos: QueryDeviceGroupByDeviceResponseBodyGroupInfos,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceGroupByDeviceResponseBody = QueryDeviceGroupByDeviceResponseBody;
class QueryDeviceGroupByDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceGroupByDeviceResponseBody,
        };
    }
}
exports.QueryDeviceGroupByDeviceResponse = QueryDeviceGroupByDeviceResponse;
class QueryDeviceGroupByTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            tag: 'Tag',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            tag: { 'type': 'array', 'itemType': QueryDeviceGroupByTagsRequestTag },
        };
    }
}
exports.QueryDeviceGroupByTagsRequest = QueryDeviceGroupByTagsRequest;
class QueryDeviceGroupByTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceGroupByTagsResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceGroupByTagsResponseBody = QueryDeviceGroupByTagsResponseBody;
class QueryDeviceGroupByTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceGroupByTagsResponseBody,
        };
    }
}
exports.QueryDeviceGroupByTagsResponse = QueryDeviceGroupByTagsResponse;
class QueryDeviceGroupInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryDeviceGroupInfoRequest = QueryDeviceGroupInfoRequest;
class QueryDeviceGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceGroupInfoResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceGroupInfoResponseBody = QueryDeviceGroupInfoResponseBody;
class QueryDeviceGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceGroupInfoResponseBody,
        };
    }
}
exports.QueryDeviceGroupInfoResponse = QueryDeviceGroupInfoResponse;
class QueryDeviceGroupListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            groupName: 'GroupName',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            superGroupId: 'SuperGroupId',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            groupName: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            superGroupId: 'string',
        };
    }
}
exports.QueryDeviceGroupListRequest = QueryDeviceGroupListRequest;
class QueryDeviceGroupListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            currentPage: 'CurrentPage',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            currentPage: 'number',
            data: QueryDeviceGroupListResponseBodyData,
            errorMessage: 'string',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceGroupListResponseBody = QueryDeviceGroupListResponseBody;
class QueryDeviceGroupListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceGroupListResponseBody,
        };
    }
}
exports.QueryDeviceGroupListResponse = QueryDeviceGroupListResponse;
class QueryDeviceGroupTagListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryDeviceGroupTagListRequest = QueryDeviceGroupTagListRequest;
class QueryDeviceGroupTagListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceGroupTagListResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceGroupTagListResponseBody = QueryDeviceGroupTagListResponseBody;
class QueryDeviceGroupTagListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceGroupTagListResponseBody,
        };
    }
}
exports.QueryDeviceGroupTagListResponse = QueryDeviceGroupTagListResponse;
class QueryDeviceInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceInfoRequest = QueryDeviceInfoRequest;
class QueryDeviceInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceInfoResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceInfoResponseBody = QueryDeviceInfoResponseBody;
class QueryDeviceInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceInfoResponseBody,
        };
    }
}
exports.QueryDeviceInfoResponse = QueryDeviceInfoResponse;
class QueryDeviceListByDeviceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            groupId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryDeviceListByDeviceGroupRequest = QueryDeviceListByDeviceGroupRequest;
class QueryDeviceListByDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceListByDeviceGroupResponseBodyData,
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryDeviceListByDeviceGroupResponseBody = QueryDeviceListByDeviceGroupResponseBody;
class QueryDeviceListByDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceListByDeviceGroupResponseBody,
        };
    }
}
exports.QueryDeviceListByDeviceGroupResponse = QueryDeviceListByDeviceGroupResponse;
class QueryDeviceOriginalEventDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            nextPageToken: 'NextPageToken',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            nextPageToken: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDeviceOriginalEventDataRequest = QueryDeviceOriginalEventDataRequest;
class QueryDeviceOriginalEventDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceOriginalEventDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalEventDataResponseBody = QueryDeviceOriginalEventDataResponseBody;
class QueryDeviceOriginalEventDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceOriginalEventDataResponseBody,
        };
    }
}
exports.QueryDeviceOriginalEventDataResponse = QueryDeviceOriginalEventDataResponse;
class QueryDeviceOriginalPropertyDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            nextPageToken: 'NextPageToken',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            nextPageToken: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDeviceOriginalPropertyDataRequest = QueryDeviceOriginalPropertyDataRequest;
class QueryDeviceOriginalPropertyDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceOriginalPropertyDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalPropertyDataResponseBody = QueryDeviceOriginalPropertyDataResponseBody;
class QueryDeviceOriginalPropertyDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceOriginalPropertyDataResponseBody,
        };
    }
}
exports.QueryDeviceOriginalPropertyDataResponse = QueryDeviceOriginalPropertyDataResponse;
class QueryDeviceOriginalPropertyStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            nextPageToken: 'NextPageToken',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            nextPageToken: 'string',
            pageSize: 'number',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusRequest = QueryDeviceOriginalPropertyStatusRequest;
class QueryDeviceOriginalPropertyStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceOriginalPropertyStatusResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusResponseBody = QueryDeviceOriginalPropertyStatusResponseBody;
class QueryDeviceOriginalPropertyStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceOriginalPropertyStatusResponseBody,
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusResponse = QueryDeviceOriginalPropertyStatusResponse;
class QueryDeviceOriginalServiceDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            nextPageToken: 'NextPageToken',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            nextPageToken: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDeviceOriginalServiceDataRequest = QueryDeviceOriginalServiceDataRequest;
class QueryDeviceOriginalServiceDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceOriginalServiceDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalServiceDataResponseBody = QueryDeviceOriginalServiceDataResponseBody;
class QueryDeviceOriginalServiceDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceOriginalServiceDataResponseBody,
        };
    }
}
exports.QueryDeviceOriginalServiceDataResponse = QueryDeviceOriginalServiceDataResponse;
class QueryDevicePropRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDevicePropRequest = QueryDevicePropRequest;
class QueryDevicePropResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            props: 'Props',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            props: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDevicePropResponseBody = QueryDevicePropResponseBody;
class QueryDevicePropResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDevicePropResponseBody,
        };
    }
}
exports.QueryDevicePropResponse = QueryDevicePropResponse;
class QueryDevicePropertiesDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: { 'type': 'array', 'itemType': 'string' },
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDevicePropertiesDataRequest = QueryDevicePropertiesDataRequest;
class QueryDevicePropertiesDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            nextTime: 'NextTime',
            nextValid: 'NextValid',
            propertyDataInfos: 'PropertyDataInfos',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            nextTime: 'number',
            nextValid: 'boolean',
            propertyDataInfos: QueryDevicePropertiesDataResponseBodyPropertyDataInfos,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDevicePropertiesDataResponseBody = QueryDevicePropertiesDataResponseBody;
class QueryDevicePropertiesDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDevicePropertiesDataResponseBody,
        };
    }
}
exports.QueryDevicePropertiesDataResponse = QueryDevicePropertiesDataResponse;
class QueryDevicePropertyDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDevicePropertyDataRequest = QueryDevicePropertyDataRequest;
class QueryDevicePropertyDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDevicePropertyDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDevicePropertyDataResponseBody = QueryDevicePropertyDataResponseBody;
class QueryDevicePropertyDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDevicePropertyDataResponseBody,
        };
    }
}
exports.QueryDevicePropertyDataResponse = QueryDevicePropertyDataResponse;
class QueryDevicePropertyStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            functionBlockId: 'FunctionBlockId',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            functionBlockId: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDevicePropertyStatusRequest = QueryDevicePropertyStatusRequest;
class QueryDevicePropertyStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDevicePropertyStatusResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDevicePropertyStatusResponseBody = QueryDevicePropertyStatusResponseBody;
class QueryDevicePropertyStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDevicePropertyStatusResponseBody,
        };
    }
}
exports.QueryDevicePropertyStatusResponse = QueryDevicePropertyStatusResponse;
class QueryDeviceServiceDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asc: 'Asc',
            deviceName: 'DeviceName',
            endTime: 'EndTime',
            identifier: 'Identifier',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            productKey: 'ProductKey',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            asc: 'number',
            deviceName: 'string',
            endTime: 'number',
            identifier: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            productKey: 'string',
            startTime: 'number',
        };
    }
}
exports.QueryDeviceServiceDataRequest = QueryDeviceServiceDataRequest;
class QueryDeviceServiceDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceServiceDataResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceServiceDataResponseBody = QueryDeviceServiceDataResponseBody;
class QueryDeviceServiceDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceServiceDataResponseBody,
        };
    }
}
exports.QueryDeviceServiceDataResponse = QueryDeviceServiceDataResponse;
class QueryDeviceStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceStatisticsRequest = QueryDeviceStatisticsRequest;
class QueryDeviceStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryDeviceStatisticsResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryDeviceStatisticsResponseBody = QueryDeviceStatisticsResponseBody;
class QueryDeviceStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryDeviceStatisticsResponseBody,
        };
    }
}
exports.QueryDeviceStatisticsResponse = QueryDeviceStatisticsResponse;
class QueryEdgeDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            driverName: 'DriverName',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            type: 'Type',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            driverName: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            type: 'number',
        };
    }
}
exports.QueryEdgeDriverRequest = QueryEdgeDriverRequest;
class QueryEdgeDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeDriverResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeDriverResponseBody = QueryEdgeDriverResponseBody;
class QueryEdgeDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeDriverResponseBody,
        };
    }
}
exports.QueryEdgeDriverResponse = QueryEdgeDriverResponse;
class QueryEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            versionState: 'VersionState',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            driverId: 'string',
            driverVersion: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            versionState: 'number',
        };
    }
}
exports.QueryEdgeDriverVersionRequest = QueryEdgeDriverVersionRequest;
class QueryEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeDriverVersionResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeDriverVersionResponseBody = QueryEdgeDriverVersionResponseBody;
class QueryEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeDriverVersionResponseBody,
        };
    }
}
exports.QueryEdgeDriverVersionResponse = QueryEdgeDriverVersionResponse;
class QueryEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            name: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceRequest = QueryEdgeInstanceRequest;
class QueryEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceResponseBody = QueryEdgeInstanceResponseBody;
class QueryEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceResponseBody,
        };
    }
}
exports.QueryEdgeInstanceResponse = QueryEdgeInstanceResponse;
class QueryEdgeInstanceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelName: 'ChannelName',
            currentPage: 'CurrentPage',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            channelName: 'string',
            currentPage: 'number',
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceChannelRequest = QueryEdgeInstanceChannelRequest;
class QueryEdgeInstanceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceChannelResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBody = QueryEdgeInstanceChannelResponseBody;
class QueryEdgeInstanceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceChannelResponseBody,
        };
    }
}
exports.QueryEdgeInstanceChannelResponse = QueryEdgeInstanceChannelResponse;
class QueryEdgeInstanceDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceDeviceRequest = QueryEdgeInstanceDeviceRequest;
class QueryEdgeInstanceDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceDeviceResponseBody = QueryEdgeInstanceDeviceResponseBody;
class QueryEdgeInstanceDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceDeviceResponseBody,
        };
    }
}
exports.QueryEdgeInstanceDeviceResponse = QueryEdgeInstanceDeviceResponse;
class QueryEdgeInstanceDeviceByDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            currentPage: 'CurrentPage',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            channelId: 'string',
            currentPage: 'number',
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceDeviceByDriverRequest = QueryEdgeInstanceDeviceByDriverRequest;
class QueryEdgeInstanceDeviceByDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceDeviceByDriverResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceDeviceByDriverResponseBody = QueryEdgeInstanceDeviceByDriverResponseBody;
class QueryEdgeInstanceDeviceByDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceDeviceByDriverResponseBody,
        };
    }
}
exports.QueryEdgeInstanceDeviceByDriverResponse = QueryEdgeInstanceDeviceByDriverResponse;
class QueryEdgeInstanceDriverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceDriverRequest = QueryEdgeInstanceDriverRequest;
class QueryEdgeInstanceDriverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceDriverResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceDriverResponseBody = QueryEdgeInstanceDriverResponseBody;
class QueryEdgeInstanceDriverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceDriverResponseBody,
        };
    }
}
exports.QueryEdgeInstanceDriverResponse = QueryEdgeInstanceDriverResponse;
class QueryEdgeInstanceGatewayRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryEdgeInstanceGatewayRequest = QueryEdgeInstanceGatewayRequest;
class QueryEdgeInstanceGatewayResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            gatewayList: 'GatewayList',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            gatewayList: { 'type': 'array', 'itemType': QueryEdgeInstanceGatewayResponseBodyGatewayList },
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceGatewayResponseBody = QueryEdgeInstanceGatewayResponseBody;
class QueryEdgeInstanceGatewayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceGatewayResponseBody,
        };
    }
}
exports.QueryEdgeInstanceGatewayResponse = QueryEdgeInstanceGatewayResponse;
class QueryEdgeInstanceHistoricDeploymentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            startTime: 'StartTime',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            endTime: 'number',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
            startTime: 'number',
        };
    }
}
exports.QueryEdgeInstanceHistoricDeploymentRequest = QueryEdgeInstanceHistoricDeploymentRequest;
class QueryEdgeInstanceHistoricDeploymentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceHistoricDeploymentResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceHistoricDeploymentResponseBody = QueryEdgeInstanceHistoricDeploymentResponseBody;
class QueryEdgeInstanceHistoricDeploymentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceHistoricDeploymentResponseBody,
        };
    }
}
exports.QueryEdgeInstanceHistoricDeploymentResponse = QueryEdgeInstanceHistoricDeploymentResponse;
class QueryEdgeInstanceMessageRoutingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingRequest = QueryEdgeInstanceMessageRoutingRequest;
class QueryEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceMessageRoutingResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponseBody = QueryEdgeInstanceMessageRoutingResponseBody;
class QueryEdgeInstanceMessageRoutingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceMessageRoutingResponseBody,
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponse = QueryEdgeInstanceMessageRoutingResponse;
class QueryEdgeInstanceSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            instanceId: 'string',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryEdgeInstanceSceneRuleRequest = QueryEdgeInstanceSceneRuleRequest;
class QueryEdgeInstanceSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryEdgeInstanceSceneRuleResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryEdgeInstanceSceneRuleResponseBody = QueryEdgeInstanceSceneRuleResponseBody;
class QueryEdgeInstanceSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryEdgeInstanceSceneRuleResponseBody,
        };
    }
}
exports.QueryEdgeInstanceSceneRuleResponse = QueryEdgeInstanceSceneRuleResponse;
class QueryJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.QueryJobRequest = QueryJobRequest;
class QueryJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryJobResponseBody = QueryJobResponseBody;
class QueryJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryJobResponseBody,
        };
    }
}
exports.QueryJobResponse = QueryJobResponse;
class QueryJobStatisticsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.QueryJobStatisticsRequest = QueryJobStatisticsRequest;
class QueryJobStatisticsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryJobStatisticsResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryJobStatisticsResponseBody = QueryJobStatisticsResponseBody;
class QueryJobStatisticsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryJobStatisticsResponseBody,
        };
    }
}
exports.QueryJobStatisticsResponse = QueryJobStatisticsResponse;
class QueryLoRaJoinPermissionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
        };
    }
}
exports.QueryLoRaJoinPermissionsRequest = QueryLoRaJoinPermissionsRequest;
class QueryLoRaJoinPermissionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            joinPermissions: 'JoinPermissions',
            productKey: 'ProductKey',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            joinPermissions: QueryLoRaJoinPermissionsResponseBodyJoinPermissions,
            productKey: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryLoRaJoinPermissionsResponseBody = QueryLoRaJoinPermissionsResponseBody;
class QueryLoRaJoinPermissionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryLoRaJoinPermissionsResponseBody,
        };
    }
}
exports.QueryLoRaJoinPermissionsResponse = QueryLoRaJoinPermissionsResponse;
class QueryMessageInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            uniMsgId: 'UniMsgId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            uniMsgId: 'string',
        };
    }
}
exports.QueryMessageInfoRequest = QueryMessageInfoRequest;
class QueryMessageInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            message: 'Message',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            message: QueryMessageInfoResponseBodyMessage,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryMessageInfoResponseBody = QueryMessageInfoResponseBody;
class QueryMessageInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryMessageInfoResponseBody,
        };
    }
}
exports.QueryMessageInfoResponse = QueryMessageInfoResponse;
class QueryOTAFirmwareRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QueryOTAFirmwareRequest = QueryOTAFirmwareRequest;
class QueryOTAFirmwareResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            firmwareInfo: 'FirmwareInfo',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            firmwareInfo: QueryOTAFirmwareResponseBodyFirmwareInfo,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryOTAFirmwareResponseBody = QueryOTAFirmwareResponseBody;
class QueryOTAFirmwareResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOTAFirmwareResponseBody,
        };
    }
}
exports.QueryOTAFirmwareResponse = QueryOTAFirmwareResponse;
class QueryOTAJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.QueryOTAJobRequest = QueryOTAJobRequest;
class QueryOTAJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryOTAJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryOTAJobResponseBody = QueryOTAJobResponseBody;
class QueryOTAJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryOTAJobResponseBody,
        };
    }
}
exports.QueryOTAJobResponse = QueryOTAJobResponse;
class QueryPageByApplyIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            applyId: 'number',
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
        };
    }
}
exports.QueryPageByApplyIdRequest = QueryPageByApplyIdRequest;
class QueryPageByApplyIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyDeviceList: 'ApplyDeviceList',
            code: 'Code',
            errorMessage: 'ErrorMessage',
            page: 'Page',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            requestId: 'RequestId',
            success: 'Success',
            total: 'Total',
        };
    }
    static types() {
        return {
            applyDeviceList: QueryPageByApplyIdResponseBodyApplyDeviceList,
            code: 'string',
            errorMessage: 'string',
            page: 'number',
            pageCount: 'number',
            pageSize: 'number',
            requestId: 'string',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.QueryPageByApplyIdResponseBody = QueryPageByApplyIdResponseBody;
class QueryPageByApplyIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryPageByApplyIdResponseBody,
        };
    }
}
exports.QueryPageByApplyIdResponse = QueryPageByApplyIdResponse;
class QueryProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryProductRequest = QueryProductRequest;
class QueryProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryProductResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryProductResponseBody = QueryProductResponseBody;
class QueryProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryProductResponseBody,
        };
    }
}
exports.QueryProductResponse = QueryProductResponse;
class QueryProductCertInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryProductCertInfoRequest = QueryProductCertInfoRequest;
class QueryProductCertInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            productCertInfo: 'ProductCertInfo',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            productCertInfo: QueryProductCertInfoResponseBodyProductCertInfo,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryProductCertInfoResponseBody = QueryProductCertInfoResponseBody;
class QueryProductCertInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryProductCertInfoResponseBody,
        };
    }
}
exports.QueryProductCertInfoResponse = QueryProductCertInfoResponse;
class QueryProductListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliyunCommodityCode: 'AliyunCommodityCode',
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            aliyunCommodityCode: 'string',
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            resourceGroupId: 'string',
        };
    }
}
exports.QueryProductListRequest = QueryProductListRequest;
class QueryProductListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryProductListResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryProductListResponseBody = QueryProductListResponseBody;
class QueryProductListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryProductListResponseBody,
        };
    }
}
exports.QueryProductListResponse = QueryProductListResponse;
class QueryProductTopicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryProductTopicRequest = QueryProductTopicRequest;
class QueryProductTopicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryProductTopicResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryProductTopicResponseBody = QueryProductTopicResponseBody;
class QueryProductTopicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryProductTopicResponseBody,
        };
    }
}
exports.QueryProductTopicResponse = QueryProductTopicResponse;
class QuerySceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            ruleName: 'RuleName',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            ruleName: 'string',
        };
    }
}
exports.QuerySceneRuleRequest = QuerySceneRuleRequest;
class QuerySceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySceneRuleResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySceneRuleResponseBody = QuerySceneRuleResponseBody;
class QuerySceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySceneRuleResponseBody,
        };
    }
}
exports.QuerySceneRuleResponse = QuerySceneRuleResponse;
class QuerySolutionDeviceGroupPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fuzzyGroupName: 'FuzzyGroupName',
            iotInstanceId: 'IotInstanceId',
            pageId: 'PageId',
            pageSize: 'PageSize',
            projectCode: 'ProjectCode',
        };
    }
    static types() {
        return {
            fuzzyGroupName: 'string',
            iotInstanceId: 'string',
            pageId: 'number',
            pageSize: 'number',
            projectCode: 'string',
        };
    }
}
exports.QuerySolutionDeviceGroupPageRequest = QuerySolutionDeviceGroupPageRequest;
class QuerySolutionDeviceGroupPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySolutionDeviceGroupPageResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySolutionDeviceGroupPageResponseBody = QuerySolutionDeviceGroupPageResponseBody;
class QuerySolutionDeviceGroupPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySolutionDeviceGroupPageResponseBody,
        };
    }
}
exports.QuerySolutionDeviceGroupPageResponse = QuerySolutionDeviceGroupPageResponse;
class QuerySpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            speechCode: 'SpeechCode',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            speechCode: 'string',
        };
    }
}
exports.QuerySpeechRequest = QuerySpeechRequest;
class QuerySpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySpeechResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySpeechResponseBody = QuerySpeechResponseBody;
class QuerySpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySpeechResponseBody,
        };
    }
}
exports.QuerySpeechResponse = QuerySpeechResponse;
class QuerySpeechListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            pageId: 'PageId',
            pageSize: 'PageSize',
            projectCode: 'ProjectCode',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            pageId: 'number',
            pageSize: 'number',
            projectCode: 'string',
        };
    }
}
exports.QuerySpeechListRequest = QuerySpeechListRequest;
class QuerySpeechListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySpeechListResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySpeechListResponseBody = QuerySpeechListResponseBody;
class QuerySpeechListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySpeechListResponseBody,
        };
    }
}
exports.QuerySpeechListResponse = QuerySpeechListResponse;
class QuerySpeechPushJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobCode: 'JobCode',
            pageId: 'PageId',
            pageSize: 'PageSize',
            projectCode: 'ProjectCode',
            pushMode: 'PushMode',
            statusList: 'StatusList',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobCode: 'string',
            pageId: 'number',
            pageSize: 'number',
            projectCode: 'string',
            pushMode: 'string',
            statusList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QuerySpeechPushJobRequest = QuerySpeechPushJobRequest;
class QuerySpeechPushJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySpeechPushJobResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySpeechPushJobResponseBody = QuerySpeechPushJobResponseBody;
class QuerySpeechPushJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySpeechPushJobResponseBody,
        };
    }
}
exports.QuerySpeechPushJobResponse = QuerySpeechPushJobResponse;
class QuerySpeechPushJobDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            jobCode: 'JobCode',
            pageId: 'PageId',
            pageSize: 'PageSize',
            status: 'Status',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            jobCode: 'string',
            pageId: 'number',
            pageSize: 'number',
            status: 'string',
        };
    }
}
exports.QuerySpeechPushJobDeviceRequest = QuerySpeechPushJobDeviceRequest;
class QuerySpeechPushJobDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySpeechPushJobDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySpeechPushJobDeviceResponseBody = QuerySpeechPushJobDeviceResponseBody;
class QuerySpeechPushJobDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySpeechPushJobDeviceResponseBody,
        };
    }
}
exports.QuerySpeechPushJobDeviceResponse = QuerySpeechPushJobDeviceResponse;
class QuerySpeechPushJobSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobCode: 'JobCode',
            pageId: 'PageId',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobCode: 'string',
            pageId: 'number',
            pageSize: 'number',
        };
    }
}
exports.QuerySpeechPushJobSpeechRequest = QuerySpeechPushJobSpeechRequest;
class QuerySpeechPushJobSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySpeechPushJobSpeechResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBody = QuerySpeechPushJobSpeechResponseBody;
class QuerySpeechPushJobSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySpeechPushJobSpeechResponseBody,
        };
    }
}
exports.QuerySpeechPushJobSpeechResponse = QuerySpeechPushJobSpeechResponse;
class QueryStudioAppDomainListOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.QueryStudioAppDomainListOpenRequest = QueryStudioAppDomainListOpenRequest;
class QueryStudioAppDomainListOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryStudioAppDomainListOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryStudioAppDomainListOpenResponseBody = QueryStudioAppDomainListOpenResponseBody;
class QueryStudioAppDomainListOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryStudioAppDomainListOpenResponseBody,
        };
    }
}
exports.QueryStudioAppDomainListOpenResponse = QueryStudioAppDomainListOpenResponse;
class QueryStudioAppListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fuzzyName: 'FuzzyName',
            iotInstanceId: 'IotInstanceId',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            projectId: 'ProjectId',
            types: 'Types',
        };
    }
    static types() {
        return {
            fuzzyName: 'string',
            iotInstanceId: 'string',
            pageNo: 'number',
            pageSize: 'number',
            projectId: 'string',
            types: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryStudioAppListRequest = QueryStudioAppListRequest;
class QueryStudioAppListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryStudioAppListResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryStudioAppListResponseBody = QueryStudioAppListResponseBody;
class QueryStudioAppListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryStudioAppListResponseBody,
        };
    }
}
exports.QueryStudioAppListResponse = QueryStudioAppListResponse;
class QueryStudioAppPageListOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            iotInstanceId: 'IotInstanceId',
            isRelease: 'IsRelease',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            iotInstanceId: 'string',
            isRelease: 'boolean',
            pageNo: 'number',
            pageSize: 'number',
            projectId: 'string',
        };
    }
}
exports.QueryStudioAppPageListOpenRequest = QueryStudioAppPageListOpenRequest;
class QueryStudioAppPageListOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryStudioAppPageListOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryStudioAppPageListOpenResponseBody = QueryStudioAppPageListOpenResponseBody;
class QueryStudioAppPageListOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryStudioAppPageListOpenResponseBody,
        };
    }
}
exports.QueryStudioAppPageListOpenResponse = QueryStudioAppPageListOpenResponse;
class QueryStudioProjectListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            name: 'string',
            pageNo: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryStudioProjectListRequest = QueryStudioProjectListRequest;
class QueryStudioProjectListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryStudioProjectListResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryStudioProjectListResponseBody = QueryStudioProjectListResponseBody;
class QueryStudioProjectListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryStudioProjectListResponseBody,
        };
    }
}
exports.QueryStudioProjectListResponse = QueryStudioProjectListResponse;
class QuerySubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            type: 'Type',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            type: 'string',
        };
    }
}
exports.QuerySubscribeRelationRequest = QuerySubscribeRelationRequest;
class QuerySubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            consumerGroupIds: 'ConsumerGroupIds',
            deviceDataFlag: 'DeviceDataFlag',
            deviceLifeCycleFlag: 'DeviceLifeCycleFlag',
            deviceStatusChangeFlag: 'DeviceStatusChangeFlag',
            deviceTagFlag: 'DeviceTagFlag',
            deviceTopoLifeCycleFlag: 'DeviceTopoLifeCycleFlag',
            errorMessage: 'ErrorMessage',
            foundDeviceListFlag: 'FoundDeviceListFlag',
            mnsConfiguration: 'MnsConfiguration',
            otaEventFlag: 'OtaEventFlag',
            otaJobFlag: 'OtaJobFlag',
            otaVersionFlag: 'OtaVersionFlag',
            productKey: 'ProductKey',
            requestId: 'RequestId',
            success: 'Success',
            thingHistoryFlag: 'ThingHistoryFlag',
            type: 'Type',
        };
    }
    static types() {
        return {
            code: 'string',
            consumerGroupIds: { 'type': 'array', 'itemType': 'string' },
            deviceDataFlag: 'boolean',
            deviceLifeCycleFlag: 'boolean',
            deviceStatusChangeFlag: 'boolean',
            deviceTagFlag: 'boolean',
            deviceTopoLifeCycleFlag: 'boolean',
            errorMessage: 'string',
            foundDeviceListFlag: 'boolean',
            mnsConfiguration: 'string',
            otaEventFlag: 'boolean',
            otaJobFlag: 'boolean',
            otaVersionFlag: 'boolean',
            productKey: 'string',
            requestId: 'string',
            success: 'boolean',
            thingHistoryFlag: 'boolean',
            type: 'string',
        };
    }
}
exports.QuerySubscribeRelationResponseBody = QuerySubscribeRelationResponseBody;
class QuerySubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySubscribeRelationResponseBody,
        };
    }
}
exports.QuerySubscribeRelationResponse = QuerySubscribeRelationResponse;
class QuerySummarySceneRuleLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            endTime: 'EndTime',
            iotInstanceId: 'IotInstanceId',
            pageSize: 'PageSize',
            ruleId: 'RuleId',
            startTime: 'StartTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            endTime: 'number',
            iotInstanceId: 'string',
            pageSize: 'number',
            ruleId: 'string',
            startTime: 'number',
            status: 'string',
        };
    }
}
exports.QuerySummarySceneRuleLogRequest = QuerySummarySceneRuleLogRequest;
class QuerySummarySceneRuleLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySummarySceneRuleLogResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySummarySceneRuleLogResponseBody = QuerySummarySceneRuleLogResponseBody;
class QuerySummarySceneRuleLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySummarySceneRuleLogResponseBody,
        };
    }
}
exports.QuerySummarySceneRuleLogResponse = QuerySummarySceneRuleLogResponse;
class QuerySuperDeviceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.QuerySuperDeviceGroupRequest = QuerySuperDeviceGroupRequest;
class QuerySuperDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QuerySuperDeviceGroupResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QuerySuperDeviceGroupResponseBody = QuerySuperDeviceGroupResponseBody;
class QuerySuperDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QuerySuperDeviceGroupResponseBody,
        };
    }
}
exports.QuerySuperDeviceGroupResponse = QuerySuperDeviceGroupResponse;
class QueryTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            taskId: 'string',
        };
    }
}
exports.QueryTaskRequest = QueryTaskRequest;
class QueryTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryTaskResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryTaskResponseBody = QueryTaskResponseBody;
class QueryTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTaskResponseBody,
        };
    }
}
exports.QueryTaskResponse = QueryTaskResponse;
class QueryThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.QueryThingModelRequest = QueryThingModelRequest;
class QueryThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            productKey: 'ProductKey',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryThingModelResponseBodyData,
            errorMessage: 'string',
            productKey: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryThingModelResponseBody = QueryThingModelResponseBody;
class QueryThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryThingModelResponseBody,
        };
    }
}
exports.QueryThingModelResponse = QueryThingModelResponse;
class QueryThingModelExtendConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.QueryThingModelExtendConfigRequest = QueryThingModelExtendConfigRequest;
class QueryThingModelExtendConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryThingModelExtendConfigResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryThingModelExtendConfigResponseBody = QueryThingModelExtendConfigResponseBody;
class QueryThingModelExtendConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryThingModelExtendConfigResponseBody,
        };
    }
}
exports.QueryThingModelExtendConfigResponse = QueryThingModelExtendConfigResponse;
class QueryThingModelExtendConfigPublishedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryThingModelExtendConfigPublishedRequest = QueryThingModelExtendConfigPublishedRequest;
class QueryThingModelExtendConfigPublishedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryThingModelExtendConfigPublishedResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryThingModelExtendConfigPublishedResponseBody = QueryThingModelExtendConfigPublishedResponseBody;
class QueryThingModelExtendConfigPublishedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryThingModelExtendConfigPublishedResponseBody,
        };
    }
}
exports.QueryThingModelExtendConfigPublishedResponse = QueryThingModelExtendConfigPublishedResponse;
class QueryThingModelPublishedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            iotInstanceId: 'IotInstanceId',
            modelVersion: 'ModelVersion',
            productKey: 'ProductKey',
            resourceGroupId: 'ResourceGroupId',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            iotInstanceId: 'string',
            modelVersion: 'string',
            productKey: 'string',
            resourceGroupId: 'string',
        };
    }
}
exports.QueryThingModelPublishedRequest = QueryThingModelPublishedRequest;
class QueryThingModelPublishedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            productKey: 'ProductKey',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: QueryThingModelPublishedResponseBodyData,
            errorMessage: 'string',
            productKey: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryThingModelPublishedResponseBody = QueryThingModelPublishedResponseBody;
class QueryThingModelPublishedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryThingModelPublishedResponseBody,
        };
    }
}
exports.QueryThingModelPublishedResponse = QueryThingModelPublishedResponse;
class QueryTopicReverseRouteTableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            regionId: 'RegionId',
            topic: 'Topic',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            regionId: 'string',
            topic: 'string',
        };
    }
}
exports.QueryTopicReverseRouteTableRequest = QueryTopicReverseRouteTableRequest;
class QueryTopicReverseRouteTableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            srcTopics: 'SrcTopics',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            srcTopics: QueryTopicReverseRouteTableResponseBodySrcTopics,
            success: 'boolean',
        };
    }
}
exports.QueryTopicReverseRouteTableResponseBody = QueryTopicReverseRouteTableResponseBody;
class QueryTopicReverseRouteTableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTopicReverseRouteTableResponseBody,
        };
    }
}
exports.QueryTopicReverseRouteTableResponse = QueryTopicReverseRouteTableResponse;
class QueryTopicRouteTableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            topic: 'Topic',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            topic: 'string',
        };
    }
}
exports.QueryTopicRouteTableRequest = QueryTopicRouteTableRequest;
class QueryTopicRouteTableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            dstTopics: 'DstTopics',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            dstTopics: QueryTopicRouteTableResponseBodyDstTopics,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryTopicRouteTableResponseBody = QueryTopicRouteTableResponseBody;
class QueryTopicRouteTableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: QueryTopicRouteTableResponseBody,
        };
    }
}
exports.QueryTopicRouteTableResponse = QueryTopicRouteTableResponse;
class RRpcRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            requestBase64Byte: 'RequestBase64Byte',
            timeout: 'Timeout',
            topic: 'Topic',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            requestBase64Byte: 'string',
            timeout: 'number',
            topic: 'string',
        };
    }
}
exports.RRpcRequest = RRpcRequest;
class RRpcResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            messageId: 'MessageId',
            payloadBase64Byte: 'PayloadBase64Byte',
            requestId: 'RequestId',
            rrpcCode: 'RrpcCode',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            messageId: 'number',
            payloadBase64Byte: 'string',
            requestId: 'string',
            rrpcCode: 'string',
            success: 'boolean',
        };
    }
}
exports.RRpcResponseBody = RRpcResponseBody;
class RRpcResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RRpcResponseBody,
        };
    }
}
exports.RRpcResponse = RRpcResponse;
class RefreshDeviceTunnelSharePasswordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.RefreshDeviceTunnelSharePasswordRequest = RefreshDeviceTunnelSharePasswordRequest;
class RefreshDeviceTunnelSharePasswordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            password: 'Password',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            password: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.RefreshDeviceTunnelSharePasswordResponseBody = RefreshDeviceTunnelSharePasswordResponseBody;
class RefreshDeviceTunnelSharePasswordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RefreshDeviceTunnelSharePasswordResponseBody,
        };
    }
}
exports.RefreshDeviceTunnelSharePasswordResponse = RefreshDeviceTunnelSharePasswordResponse;
class RefreshStudioAppTokenOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.RefreshStudioAppTokenOpenRequest = RefreshStudioAppTokenOpenRequest;
class RefreshStudioAppTokenOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: RefreshStudioAppTokenOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.RefreshStudioAppTokenOpenResponseBody = RefreshStudioAppTokenOpenResponseBody;
class RefreshStudioAppTokenOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RefreshStudioAppTokenOpenResponseBody,
        };
    }
}
exports.RefreshStudioAppTokenOpenResponse = RefreshStudioAppTokenOpenResponse;
class RegisterDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appKey: 'AppKey',
            devEui: 'DevEui',
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            joinEui: 'JoinEui',
            loraNodeType: 'LoraNodeType',
            nickname: 'Nickname',
            pinCode: 'PinCode',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            appKey: 'string',
            devEui: 'string',
            deviceName: 'string',
            iotInstanceId: 'string',
            joinEui: 'string',
            loraNodeType: 'string',
            nickname: 'string',
            pinCode: 'string',
            productKey: 'string',
        };
    }
}
exports.RegisterDeviceRequest = RegisterDeviceRequest;
class RegisterDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: RegisterDeviceResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.RegisterDeviceResponseBody = RegisterDeviceResponseBody;
class RegisterDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RegisterDeviceResponseBody,
        };
    }
}
exports.RegisterDeviceResponse = RegisterDeviceResponse;
class ReleaseEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            driverVersion: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.ReleaseEdgeDriverVersionRequest = ReleaseEdgeDriverVersionRequest;
class ReleaseEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ReleaseEdgeDriverVersionResponseBody = ReleaseEdgeDriverVersionResponseBody;
class ReleaseEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ReleaseEdgeDriverVersionResponseBody,
        };
    }
}
exports.ReleaseEdgeDriverVersionResponse = ReleaseEdgeDriverVersionResponse;
class ReleaseProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.ReleaseProductRequest = ReleaseProductRequest;
class ReleaseProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ReleaseProductResponseBody = ReleaseProductResponseBody;
class ReleaseProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ReleaseProductResponseBody,
        };
    }
}
exports.ReleaseProductResponse = ReleaseProductResponse;
class RemoveThingTopoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.RemoveThingTopoRequest = RemoveThingTopoRequest;
class RemoveThingTopoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.RemoveThingTopoResponseBody = RemoveThingTopoResponseBody;
class RemoveThingTopoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RemoveThingTopoResponseBody,
        };
    }
}
exports.RemoveThingTopoResponse = RemoveThingTopoResponse;
class ReplaceEdgeInstanceGatewayRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentGatewayId: 'CurrentGatewayId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            newGatewayId: 'NewGatewayId',
        };
    }
    static types() {
        return {
            currentGatewayId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
            newGatewayId: 'string',
        };
    }
}
exports.ReplaceEdgeInstanceGatewayRequest = ReplaceEdgeInstanceGatewayRequest;
class ReplaceEdgeInstanceGatewayResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ReplaceEdgeInstanceGatewayResponseBody = ReplaceEdgeInstanceGatewayResponseBody;
class ReplaceEdgeInstanceGatewayResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ReplaceEdgeInstanceGatewayResponseBody,
        };
    }
}
exports.ReplaceEdgeInstanceGatewayResponse = ReplaceEdgeInstanceGatewayResponse;
class RerunJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            jobId: 'string',
        };
    }
}
exports.RerunJobRequest = RerunJobRequest;
class RerunJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.RerunJobResponseBody = RerunJobResponseBody;
class RerunJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: RerunJobResponseBody,
        };
    }
}
exports.RerunJobResponse = RerunJobResponse;
class ResetConsumerGroupPositionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.ResetConsumerGroupPositionRequest = ResetConsumerGroupPositionRequest;
class ResetConsumerGroupPositionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ResetConsumerGroupPositionResponseBody = ResetConsumerGroupPositionResponseBody;
class ResetConsumerGroupPositionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ResetConsumerGroupPositionResponseBody,
        };
    }
}
exports.ResetConsumerGroupPositionResponse = ResetConsumerGroupPositionResponse;
class ResetThingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.ResetThingRequest = ResetThingRequest;
class ResetThingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ResetThingResponseBody = ResetThingResponseBody;
class ResetThingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: ResetThingResponseBody,
        };
    }
}
exports.ResetThingResponse = ResetThingResponse;
class SaveDevicePropRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            props: 'Props',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            props: 'string',
        };
    }
}
exports.SaveDevicePropRequest = SaveDevicePropRequest;
class SaveDevicePropResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SaveDevicePropResponseBody = SaveDevicePropResponseBody;
class SaveDevicePropResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SaveDevicePropResponseBody,
        };
    }
}
exports.SaveDevicePropResponse = SaveDevicePropResponse;
class SetDeviceDesiredPropertyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            items: 'Items',
            productKey: 'ProductKey',
            versions: 'Versions',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            items: 'string',
            productKey: 'string',
            versions: 'string',
        };
    }
}
exports.SetDeviceDesiredPropertyRequest = SetDeviceDesiredPropertyRequest;
class SetDeviceDesiredPropertyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SetDeviceDesiredPropertyResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetDeviceDesiredPropertyResponseBody = SetDeviceDesiredPropertyResponseBody;
class SetDeviceDesiredPropertyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDeviceDesiredPropertyResponseBody,
        };
    }
}
exports.SetDeviceDesiredPropertyResponse = SetDeviceDesiredPropertyResponse;
class SetDeviceGroupTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
            tagString: 'TagString',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
            tagString: 'string',
        };
    }
}
exports.SetDeviceGroupTagsRequest = SetDeviceGroupTagsRequest;
class SetDeviceGroupTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetDeviceGroupTagsResponseBody = SetDeviceGroupTagsResponseBody;
class SetDeviceGroupTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDeviceGroupTagsResponseBody,
        };
    }
}
exports.SetDeviceGroupTagsResponse = SetDeviceGroupTagsResponse;
class SetDevicePropertyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            items: 'Items',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            items: 'string',
            productKey: 'string',
        };
    }
}
exports.SetDevicePropertyRequest = SetDevicePropertyRequest;
class SetDevicePropertyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SetDevicePropertyResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetDevicePropertyResponseBody = SetDevicePropertyResponseBody;
class SetDevicePropertyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDevicePropertyResponseBody,
        };
    }
}
exports.SetDevicePropertyResponse = SetDevicePropertyResponse;
class SetDevicesPropertyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            items: 'Items',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: { 'type': 'array', 'itemType': 'string' },
            iotInstanceId: 'string',
            items: 'string',
            productKey: 'string',
        };
    }
}
exports.SetDevicesPropertyRequest = SetDevicesPropertyRequest;
class SetDevicesPropertyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetDevicesPropertyResponseBody = SetDevicesPropertyResponseBody;
class SetDevicesPropertyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetDevicesPropertyResponseBody,
        };
    }
}
exports.SetDevicesPropertyResponse = SetDevicesPropertyResponse;
class SetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configs: 'Configs',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            configs: { 'type': 'array', 'itemType': SetEdgeInstanceDriverConfigsRequestConfigs },
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.SetEdgeInstanceDriverConfigsRequest = SetEdgeInstanceDriverConfigsRequest;
class SetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetEdgeInstanceDriverConfigsResponseBody = SetEdgeInstanceDriverConfigsResponseBody;
class SetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetEdgeInstanceDriverConfigsResponseBody,
        };
    }
}
exports.SetEdgeInstanceDriverConfigsResponse = SetEdgeInstanceDriverConfigsResponse;
class SetProductCertInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            issueModel: 'IssueModel',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            issueModel: 'number',
            productKey: 'string',
        };
    }
}
exports.SetProductCertInfoRequest = SetProductCertInfoRequest;
class SetProductCertInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetProductCertInfoResponseBody = SetProductCertInfoResponseBody;
class SetProductCertInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetProductCertInfoResponseBody,
        };
    }
}
exports.SetProductCertInfoResponse = SetProductCertInfoResponse;
class SetStudioProjectCooperationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            status: 'Status',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            status: 'string',
        };
    }
}
exports.SetStudioProjectCooperationRequest = SetStudioProjectCooperationRequest;
class SetStudioProjectCooperationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: 'boolean',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetStudioProjectCooperationResponseBody = SetStudioProjectCooperationResponseBody;
class SetStudioProjectCooperationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetStudioProjectCooperationResponseBody,
        };
    }
}
exports.SetStudioProjectCooperationResponse = SetStudioProjectCooperationResponse;
class SetupStudioAppAuthModeOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            authMode: 'AuthMode',
            iotInstanceId: 'IotInstanceId',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            appId: 'string',
            authMode: 'number',
            iotInstanceId: 'string',
            projectId: 'string',
        };
    }
}
exports.SetupStudioAppAuthModeOpenRequest = SetupStudioAppAuthModeOpenRequest;
class SetupStudioAppAuthModeOpenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SetupStudioAppAuthModeOpenResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SetupStudioAppAuthModeOpenResponseBody = SetupStudioAppAuthModeOpenResponseBody;
class SetupStudioAppAuthModeOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SetupStudioAppAuthModeOpenResponseBody,
        };
    }
}
exports.SetupStudioAppAuthModeOpenResponse = SetupStudioAppAuthModeOpenResponse;
class SpeechByCombinationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            combinationList: 'CombinationList',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            combinationList: { 'type': 'array', 'itemType': 'string' },
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.SpeechByCombinationRequest = SpeechByCombinationRequest;
class SpeechByCombinationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SpeechByCombinationResponseBody = SpeechByCombinationResponseBody;
class SpeechByCombinationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SpeechByCombinationResponseBody,
        };
    }
}
exports.SpeechByCombinationResponse = SpeechByCombinationResponse;
class StartCpuRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            targetValue: 'TargetValue',
        };
    }
    static types() {
        return {
            iotId: 'string',
            iotInstanceId: 'string',
            targetValue: 'string',
        };
    }
}
exports.StartCpuRequest = StartCpuRequest;
class StartCpuResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: StartCpuResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.StartCpuResponseBody = StartCpuResponseBody;
class StartCpuResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StartCpuResponseBody,
        };
    }
}
exports.StartCpuResponse = StartCpuResponse;
class StartRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'number',
        };
    }
}
exports.StartRuleRequest = StartRuleRequest;
class StartRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.StartRuleResponseBody = StartRuleResponseBody;
class StartRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StartRuleResponseBody,
        };
    }
}
exports.StartRuleResponse = StartRuleResponse;
class StopRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleId: 'number',
        };
    }
}
exports.StopRuleRequest = StopRuleRequest;
class StopRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.StopRuleResponseBody = StopRuleResponseBody;
class StopRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: StopRuleResponseBody,
        };
    }
}
exports.StopRuleResponse = StopRuleResponse;
class SyncSpeechByCombinationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            combinationList: 'CombinationList',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            combinationList: { 'type': 'array', 'itemType': 'string' },
            deviceName: 'string',
            iotId: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
        };
    }
}
exports.SyncSpeechByCombinationRequest = SyncSpeechByCombinationRequest;
class SyncSpeechByCombinationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: SyncSpeechByCombinationResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.SyncSpeechByCombinationResponseBody = SyncSpeechByCombinationResponseBody;
class SyncSpeechByCombinationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: SyncSpeechByCombinationResponseBody,
        };
    }
}
exports.SyncSpeechByCombinationResponse = SyncSpeechByCombinationResponse;
class TestSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            projectCode: 'ProjectCode',
            speechRate: 'SpeechRate',
            speechType: 'SpeechType',
            text: 'Text',
            voice: 'Voice',
            volume: 'Volume',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            projectCode: 'string',
            speechRate: 'number',
            speechType: 'string',
            text: 'string',
            voice: 'string',
            volume: 'number',
        };
    }
}
exports.TestSpeechRequest = TestSpeechRequest;
class TestSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            data: TestSpeechResponseBodyData,
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.TestSpeechResponseBody = TestSpeechResponseBody;
class TestSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: TestSpeechResponseBody,
        };
    }
}
exports.TestSpeechResponse = TestSpeechResponse;
class TriggerSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.TriggerSceneRuleRequest = TriggerSceneRuleRequest;
class TriggerSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.TriggerSceneRuleResponseBody = TriggerSceneRuleResponseBody;
class TriggerSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: TriggerSceneRuleResponseBody,
        };
    }
}
exports.TriggerSceneRuleResponse = TriggerSceneRuleResponse;
class UnbindApplicationFromEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applicationId: 'ApplicationId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            applicationId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.UnbindApplicationFromEdgeInstanceRequest = UnbindApplicationFromEdgeInstanceRequest;
class UnbindApplicationFromEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UnbindApplicationFromEdgeInstanceResponseBody = UnbindApplicationFromEdgeInstanceResponseBody;
class UnbindApplicationFromEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnbindApplicationFromEdgeInstanceResponseBody,
        };
    }
}
exports.UnbindApplicationFromEdgeInstanceResponse = UnbindApplicationFromEdgeInstanceResponse;
class UnbindDriverFromEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.UnbindDriverFromEdgeInstanceRequest = UnbindDriverFromEdgeInstanceRequest;
class UnbindDriverFromEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UnbindDriverFromEdgeInstanceResponseBody = UnbindDriverFromEdgeInstanceResponseBody;
class UnbindDriverFromEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnbindDriverFromEdgeInstanceResponseBody,
        };
    }
}
exports.UnbindDriverFromEdgeInstanceResponse = UnbindDriverFromEdgeInstanceResponse;
class UnbindRoleFromEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.UnbindRoleFromEdgeInstanceRequest = UnbindRoleFromEdgeInstanceRequest;
class UnbindRoleFromEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UnbindRoleFromEdgeInstanceResponseBody = UnbindRoleFromEdgeInstanceResponseBody;
class UnbindRoleFromEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnbindRoleFromEdgeInstanceResponseBody,
        };
    }
}
exports.UnbindRoleFromEdgeInstanceResponse = UnbindRoleFromEdgeInstanceResponse;
class UnbindSceneRuleFromEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            ruleId: 'RuleId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            ruleId: 'string',
        };
    }
}
exports.UnbindSceneRuleFromEdgeInstanceRequest = UnbindSceneRuleFromEdgeInstanceRequest;
class UnbindSceneRuleFromEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UnbindSceneRuleFromEdgeInstanceResponseBody = UnbindSceneRuleFromEdgeInstanceResponseBody;
class UnbindSceneRuleFromEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UnbindSceneRuleFromEdgeInstanceResponseBody,
        };
    }
}
exports.UnbindSceneRuleFromEdgeInstanceResponse = UnbindSceneRuleFromEdgeInstanceResponse;
class UpdateConsumerGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
            newGroupName: 'NewGroupName',
        };
    }
    static types() {
        return {
            groupId: 'string',
            iotInstanceId: 'string',
            newGroupName: 'string',
        };
    }
}
exports.UpdateConsumerGroupRequest = UpdateConsumerGroupRequest;
class UpdateConsumerGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateConsumerGroupResponseBody = UpdateConsumerGroupResponseBody;
class UpdateConsumerGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateConsumerGroupResponseBody,
        };
    }
}
exports.UpdateConsumerGroupResponse = UpdateConsumerGroupResponse;
class UpdateDeviceGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.UpdateDeviceGroupRequest = UpdateDeviceGroupRequest;
class UpdateDeviceGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateDeviceGroupResponseBody = UpdateDeviceGroupResponseBody;
class UpdateDeviceGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDeviceGroupResponseBody,
        };
    }
}
exports.UpdateDeviceGroupResponse = UpdateDeviceGroupResponse;
class UpdateDeviceShadowRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deltaUpdate: 'DeltaUpdate',
            deviceName: 'DeviceName',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            shadowMessage: 'ShadowMessage',
        };
    }
    static types() {
        return {
            deltaUpdate: 'boolean',
            deviceName: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            shadowMessage: 'string',
        };
    }
}
exports.UpdateDeviceShadowRequest = UpdateDeviceShadowRequest;
class UpdateDeviceShadowResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateDeviceShadowResponseBody = UpdateDeviceShadowResponseBody;
class UpdateDeviceShadowResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateDeviceShadowResponseBody,
        };
    }
}
exports.UpdateDeviceShadowResponse = UpdateDeviceShadowResponse;
class UpdateEdgeDriverVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            argument: 'Argument',
            configCheckRule: 'ConfigCheckRule',
            containerConfig: 'ContainerConfig',
            description: 'Description',
            driverConfig: 'DriverConfig',
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            edgeVersion: 'EdgeVersion',
            iotInstanceId: 'IotInstanceId',
            sourceConfig: 'SourceConfig',
        };
    }
    static types() {
        return {
            argument: 'string',
            configCheckRule: 'string',
            containerConfig: 'string',
            description: 'string',
            driverConfig: 'string',
            driverId: 'string',
            driverVersion: 'string',
            edgeVersion: 'string',
            iotInstanceId: 'string',
            sourceConfig: 'string',
        };
    }
}
exports.UpdateEdgeDriverVersionRequest = UpdateEdgeDriverVersionRequest;
class UpdateEdgeDriverVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateEdgeDriverVersionResponseBody = UpdateEdgeDriverVersionResponseBody;
class UpdateEdgeDriverVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateEdgeDriverVersionResponseBody,
        };
    }
}
exports.UpdateEdgeDriverVersionResponse = UpdateEdgeDriverVersionResponse;
class UpdateEdgeInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizEnable: 'BizEnable',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            spec: 'Spec',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            bizEnable: 'boolean',
            instanceId: 'string',
            iotInstanceId: 'string',
            name: 'string',
            spec: 'number',
            tags: 'string',
        };
    }
}
exports.UpdateEdgeInstanceRequest = UpdateEdgeInstanceRequest;
class UpdateEdgeInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateEdgeInstanceResponseBody = UpdateEdgeInstanceResponseBody;
class UpdateEdgeInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateEdgeInstanceResponseBody,
        };
    }
}
exports.UpdateEdgeInstanceResponse = UpdateEdgeInstanceResponse;
class UpdateEdgeInstanceChannelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            channelName: 'ChannelName',
            configs: 'Configs',
            driverId: 'DriverId',
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
        };
    }
    static types() {
        return {
            channelId: 'string',
            channelName: 'string',
            configs: { 'type': 'array', 'itemType': UpdateEdgeInstanceChannelRequestConfigs },
            driverId: 'string',
            instanceId: 'string',
            iotInstanceId: 'string',
        };
    }
}
exports.UpdateEdgeInstanceChannelRequest = UpdateEdgeInstanceChannelRequest;
class UpdateEdgeInstanceChannelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateEdgeInstanceChannelResponseBody = UpdateEdgeInstanceChannelResponseBody;
class UpdateEdgeInstanceChannelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateEdgeInstanceChannelResponseBody,
        };
    }
}
exports.UpdateEdgeInstanceChannelResponse = UpdateEdgeInstanceChannelResponse;
class UpdateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'InstanceId',
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            routeId: 'RouteId',
            sourceData: 'SourceData',
            sourceType: 'SourceType',
            targetData: 'TargetData',
            targetIotHubQos: 'TargetIotHubQos',
            targetType: 'TargetType',
            topicFilter: 'TopicFilter',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            iotInstanceId: 'string',
            name: 'string',
            routeId: 'number',
            sourceData: 'string',
            sourceType: 'string',
            targetData: 'string',
            targetIotHubQos: 'number',
            targetType: 'string',
            topicFilter: 'string',
        };
    }
}
exports.UpdateEdgeInstanceMessageRoutingRequest = UpdateEdgeInstanceMessageRoutingRequest;
class UpdateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateEdgeInstanceMessageRoutingResponseBody = UpdateEdgeInstanceMessageRoutingResponseBody;
class UpdateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateEdgeInstanceMessageRoutingResponseBody,
        };
    }
}
exports.UpdateEdgeInstanceMessageRoutingResponse = UpdateEdgeInstanceMessageRoutingResponse;
class UpdateJobRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            iotInstanceId: 'IotInstanceId',
            jobId: 'JobId',
            rolloutConfig: 'RolloutConfig',
            timeoutConfig: 'TimeoutConfig',
        };
    }
    static types() {
        return {
            description: 'string',
            iotInstanceId: 'string',
            jobId: 'string',
            rolloutConfig: 'string',
            timeoutConfig: 'string',
        };
    }
}
exports.UpdateJobRequest = UpdateJobRequest;
class UpdateJobResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateJobResponseBody = UpdateJobResponseBody;
class UpdateJobResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateJobResponseBody,
        };
    }
}
exports.UpdateJobResponse = UpdateJobResponse;
class UpdateOTAModuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'AliasName',
            desc: 'Desc',
            iotInstanceId: 'IotInstanceId',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            desc: 'string',
            iotInstanceId: 'string',
            moduleName: 'string',
            productKey: 'string',
        };
    }
}
exports.UpdateOTAModuleRequest = UpdateOTAModuleRequest;
class UpdateOTAModuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateOTAModuleResponseBody = UpdateOTAModuleResponseBody;
class UpdateOTAModuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateOTAModuleResponseBody,
        };
    }
}
exports.UpdateOTAModuleResponse = UpdateOTAModuleResponse;
class UpdateProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            productName: 'ProductName',
        };
    }
    static types() {
        return {
            description: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            productName: 'string',
        };
    }
}
exports.UpdateProductRequest = UpdateProductRequest;
class UpdateProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateProductResponseBody = UpdateProductResponseBody;
class UpdateProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateProductResponseBody,
        };
    }
}
exports.UpdateProductResponse = UpdateProductResponse;
class UpdateProductFilterConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            propertyTimestampFilter: 'PropertyTimestampFilter',
            propertyValueFilter: 'PropertyValueFilter',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            propertyTimestampFilter: 'boolean',
            propertyValueFilter: 'boolean',
        };
    }
}
exports.UpdateProductFilterConfigRequest = UpdateProductFilterConfigRequest;
class UpdateProductFilterConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateProductFilterConfigResponseBody = UpdateProductFilterConfigResponseBody;
class UpdateProductFilterConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateProductFilterConfigResponseBody,
        };
    }
}
exports.UpdateProductFilterConfigResponse = UpdateProductFilterConfigResponse;
class UpdateProductTagsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            productTag: { 'type': 'array', 'itemType': UpdateProductTagsRequestProductTag },
        };
    }
}
exports.UpdateProductTagsRequest = UpdateProductTagsRequest;
class UpdateProductTagsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            invalidProductTags: 'InvalidProductTags',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            invalidProductTags: UpdateProductTagsResponseBodyInvalidProductTags,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateProductTagsResponseBody = UpdateProductTagsResponseBody;
class UpdateProductTagsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateProductTagsResponseBody,
        };
    }
}
exports.UpdateProductTagsResponse = UpdateProductTagsResponse;
class UpdateProductTopicRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            iotInstanceId: 'IotInstanceId',
            operation: 'Operation',
            topicId: 'TopicId',
            topicShortName: 'TopicShortName',
        };
    }
    static types() {
        return {
            desc: 'string',
            iotInstanceId: 'string',
            operation: 'string',
            topicId: 'string',
            topicShortName: 'string',
        };
    }
}
exports.UpdateProductTopicRequest = UpdateProductTopicRequest;
class UpdateProductTopicResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateProductTopicResponseBody = UpdateProductTopicResponseBody;
class UpdateProductTopicResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateProductTopicResponseBody,
        };
    }
}
exports.UpdateProductTopicResponse = UpdateProductTopicResponse;
class UpdateRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            name: 'Name',
            productKey: 'ProductKey',
            ruleDesc: 'RuleDesc',
            ruleId: 'RuleId',
            select: 'Select',
            shortTopic: 'ShortTopic',
            topic: 'Topic',
            topicType: 'TopicType',
            where: 'Where',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            name: 'string',
            productKey: 'string',
            ruleDesc: 'string',
            ruleId: 'number',
            select: 'string',
            shortTopic: 'string',
            topic: 'string',
            topicType: 'number',
            where: 'string',
        };
    }
}
exports.UpdateRuleRequest = UpdateRuleRequest;
class UpdateRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateRuleResponseBody = UpdateRuleResponseBody;
class UpdateRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateRuleResponseBody,
        };
    }
}
exports.UpdateRuleResponse = UpdateRuleResponse;
class UpdateRuleActionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'ActionId',
            configuration: 'Configuration',
            iotInstanceId: 'IotInstanceId',
            type: 'Type',
        };
    }
    static types() {
        return {
            actionId: 'number',
            configuration: 'string',
            iotInstanceId: 'string',
            type: 'string',
        };
    }
}
exports.UpdateRuleActionRequest = UpdateRuleActionRequest;
class UpdateRuleActionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateRuleActionResponseBody = UpdateRuleActionResponseBody;
class UpdateRuleActionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateRuleActionResponseBody,
        };
    }
}
exports.UpdateRuleActionResponse = UpdateRuleActionResponse;
class UpdateSceneRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            ruleContent: 'RuleContent',
            ruleDescription: 'RuleDescription',
            ruleId: 'RuleId',
            ruleName: 'RuleName',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            ruleContent: 'string',
            ruleDescription: 'string',
            ruleId: 'string',
            ruleName: 'string',
        };
    }
}
exports.UpdateSceneRuleRequest = UpdateSceneRuleRequest;
class UpdateSceneRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateSceneRuleResponseBody = UpdateSceneRuleResponseBody;
class UpdateSceneRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateSceneRuleResponseBody,
        };
    }
}
exports.UpdateSceneRuleResponse = UpdateSceneRuleResponse;
class UpdateSpeechRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            projectCode: 'ProjectCode',
            speechCode: 'SpeechCode',
            speechRate: 'SpeechRate',
            voice: 'Voice',
            volume: 'Volume',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            projectCode: 'string',
            speechCode: 'string',
            speechRate: 'number',
            voice: 'string',
            volume: 'number',
        };
    }
}
exports.UpdateSpeechRequest = UpdateSpeechRequest;
class UpdateSpeechResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateSpeechResponseBody = UpdateSpeechResponseBody;
class UpdateSpeechResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateSpeechResponseBody,
        };
    }
}
exports.UpdateSpeechResponse = UpdateSpeechResponse;
class UpdateSubscribeRelationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupIds: 'ConsumerGroupIds',
            deviceDataFlag: 'DeviceDataFlag',
            deviceLifeCycleFlag: 'DeviceLifeCycleFlag',
            deviceStatusChangeFlag: 'DeviceStatusChangeFlag',
            deviceTagFlag: 'DeviceTagFlag',
            deviceTopoLifeCycleFlag: 'DeviceTopoLifeCycleFlag',
            foundDeviceListFlag: 'FoundDeviceListFlag',
            iotInstanceId: 'IotInstanceId',
            mnsConfiguration: 'MnsConfiguration',
            otaEventFlag: 'OtaEventFlag',
            otaJobFlag: 'OtaJobFlag',
            otaVersionFlag: 'OtaVersionFlag',
            productKey: 'ProductKey',
            thingHistoryFlag: 'ThingHistoryFlag',
            type: 'Type',
        };
    }
    static types() {
        return {
            consumerGroupIds: { 'type': 'array', 'itemType': 'string' },
            deviceDataFlag: 'boolean',
            deviceLifeCycleFlag: 'boolean',
            deviceStatusChangeFlag: 'boolean',
            deviceTagFlag: 'boolean',
            deviceTopoLifeCycleFlag: 'boolean',
            foundDeviceListFlag: 'boolean',
            iotInstanceId: 'string',
            mnsConfiguration: 'string',
            otaEventFlag: 'boolean',
            otaJobFlag: 'boolean',
            otaVersionFlag: 'boolean',
            productKey: 'string',
            thingHistoryFlag: 'boolean',
            type: 'string',
        };
    }
}
exports.UpdateSubscribeRelationRequest = UpdateSubscribeRelationRequest;
class UpdateSubscribeRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateSubscribeRelationResponseBody = UpdateSubscribeRelationResponseBody;
class UpdateSubscribeRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateSubscribeRelationResponseBody,
        };
    }
}
exports.UpdateSubscribeRelationResponse = UpdateSubscribeRelationResponse;
class UpdateThingModelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            functionBlockId: 'FunctionBlockId',
            functionBlockName: 'FunctionBlockName',
            identifier: 'Identifier',
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            thingModelJson: 'ThingModelJson',
        };
    }
    static types() {
        return {
            functionBlockId: 'string',
            functionBlockName: 'string',
            identifier: 'string',
            iotInstanceId: 'string',
            productKey: 'string',
            thingModelJson: 'string',
        };
    }
}
exports.UpdateThingModelRequest = UpdateThingModelRequest;
class UpdateThingModelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateThingModelResponseBody = UpdateThingModelResponseBody;
class UpdateThingModelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateThingModelResponseBody,
        };
    }
}
exports.UpdateThingModelResponse = UpdateThingModelResponse;
class UpdateThingModelValidationConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            validateType: 'ValidateType',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            validateType: 'number',
        };
    }
}
exports.UpdateThingModelValidationConfigRequest = UpdateThingModelValidationConfigRequest;
class UpdateThingModelValidationConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateThingModelValidationConfigResponseBody = UpdateThingModelValidationConfigResponseBody;
class UpdateThingModelValidationConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateThingModelValidationConfigResponseBody,
        };
    }
}
exports.UpdateThingModelValidationConfigResponse = UpdateThingModelValidationConfigResponse;
class UpdateThingScriptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotInstanceId: 'IotInstanceId',
            productKey: 'ProductKey',
            scriptContent: 'ScriptContent',
            scriptType: 'ScriptType',
        };
    }
    static types() {
        return {
            iotInstanceId: 'string',
            productKey: 'string',
            scriptContent: 'string',
            scriptType: 'string',
        };
    }
}
exports.UpdateThingScriptRequest = UpdateThingScriptRequest;
class UpdateThingScriptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            errorMessage: 'ErrorMessage',
            requestId: 'RequestId',
            success: 'Success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorMessage: 'string',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateThingScriptResponseBody = UpdateThingScriptResponseBody;
class UpdateThingScriptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            body: UpdateThingScriptResponseBody,
        };
    }
}
exports.UpdateThingScriptResponse = UpdateThingScriptResponse;
class BatchAddDeviceGroupRelationsRequestDevice extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchAddDeviceGroupRelationsRequestDevice = BatchAddDeviceGroupRelationsRequestDevice;
class BatchAddThingTopoRequestTopoAddItem extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clientId: 'ClientId',
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
            sign: 'Sign',
            signMethod: 'SignMethod',
            timestamp: 'Timestamp',
        };
    }
    static types() {
        return {
            clientId: 'string',
            deviceName: 'string',
            productKey: 'string',
            sign: 'string',
            signMethod: 'string',
            timestamp: 'string',
        };
    }
}
exports.BatchAddThingTopoRequestTopoAddItem = BatchAddThingTopoRequestTopoAddItem;
class BatchBindDevicesIntoProjectRequestDevices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchBindDevicesIntoProjectRequestDevices = BatchBindDevicesIntoProjectRequestDevices;
class BatchCheckDeviceNamesRequestDeviceNameList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceNickname: 'DeviceNickname',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceNickname: 'string',
        };
    }
}
exports.BatchCheckDeviceNamesRequestDeviceNameList = BatchCheckDeviceNamesRequestDeviceNameList;
class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invalidDeviceName: 'InvalidDeviceName',
        };
    }
    static types() {
        return {
            invalidDeviceName: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList = BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList;
class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invalidDeviceNickname: 'InvalidDeviceNickname',
        };
    }
    static types() {
        return {
            invalidDeviceNickname: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList = BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList;
class BatchCheckDeviceNamesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
            invalidDeviceNameList: 'InvalidDeviceNameList',
            invalidDeviceNicknameList: 'InvalidDeviceNicknameList',
        };
    }
    static types() {
        return {
            applyId: 'number',
            invalidDeviceNameList: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList,
            invalidDeviceNicknameList: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList,
        };
    }
}
exports.BatchCheckDeviceNamesResponseBodyData = BatchCheckDeviceNamesResponseBodyData;
class BatchDeleteDeviceGroupRelationsRequestDevice extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchDeleteDeviceGroupRelationsRequestDevice = BatchDeleteDeviceGroupRelationsRequestDevice;
class BatchGetDeviceBindStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bindStatus: 'BindStatus',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            bindStatus: 'number',
            iotId: 'string',
        };
    }
}
exports.BatchGetDeviceBindStatusResponseBodyData = BatchGetDeviceBindStatusResponseBodyData;
class BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            asAddress: 'AsAddress',
            deviceId: 'DeviceId',
            deviceName: 'DeviceName',
            iotId: 'IotId',
            lastOnlineTime: 'LastOnlineTime',
            status: 'Status',
        };
    }
    static types() {
        return {
            asAddress: 'string',
            deviceId: 'string',
            deviceName: 'string',
            iotId: 'string',
            lastOnlineTime: 'string',
            status: 'string',
        };
    }
}
exports.BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus = BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus;
class BatchGetDeviceStateResponseBodyDeviceStatusList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceStatus: 'DeviceStatus',
        };
    }
    static types() {
        return {
            deviceStatus: { 'type': 'array', 'itemType': BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus },
        };
    }
}
exports.BatchGetDeviceStateResponseBodyDeviceStatusList = BatchGetDeviceStateResponseBodyDeviceStatusList;
class BatchGetEdgeDriverResponseBodyDriverList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cpuArch: 'CpuArch',
            driverId: 'DriverId',
            driverName: 'DriverName',
            driverProtocol: 'DriverProtocol',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            isBuiltIn: 'IsBuiltIn',
            runtime: 'Runtime',
            type: 'Type',
        };
    }
    static types() {
        return {
            cpuArch: 'string',
            driverId: 'string',
            driverName: 'string',
            driverProtocol: 'string',
            gmtCreateTimestamp: 'number',
            gmtModifiedTimestamp: 'number',
            isBuiltIn: 'boolean',
            runtime: 'string',
            type: 'number',
        };
    }
}
exports.BatchGetEdgeDriverResponseBodyDriverList = BatchGetEdgeDriverResponseBodyDriverList;
class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configId: 'ConfigId',
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            configId: 'string',
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig = BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig;
class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            config: 'Config',
        };
    }
    static types() {
        return {
            config: { 'type': 'array', 'itemType': BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig },
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList = BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList;
class BatchGetEdgeInstanceChannelResponseBodyDataChannel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            channelName: 'ChannelName',
            configList: 'ConfigList',
        };
    }
    static types() {
        return {
            channelId: 'string',
            channelName: 'string',
            configList: BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList,
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponseBodyDataChannel = BatchGetEdgeInstanceChannelResponseBodyDataChannel;
class BatchGetEdgeInstanceChannelResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channel: 'Channel',
        };
    }
    static types() {
        return {
            channel: { 'type': 'array', 'itemType': BatchGetEdgeInstanceChannelResponseBodyDataChannel },
        };
    }
}
exports.BatchGetEdgeInstanceChannelResponseBodyData = BatchGetEdgeInstanceChannelResponseBodyData;
class BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            channelName: 'ChannelName',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            channelId: 'string',
            channelName: 'string',
            iotId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList = BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList;
class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            format: 'Format',
        };
    }
    static types() {
        return {
            content: 'string',
            format: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig = BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig;
class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            config: 'Config',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            config: BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig,
            iotId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList = BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList;
class BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            iotId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList = BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList;
class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configId: 'ConfigId',
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            configId: 'string',
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList = BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList;
class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configList: 'ConfigList',
            driverId: 'DriverId',
        };
    }
    static types() {
        return {
            configList: { 'type': 'array', 'itemType': BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList },
            driverId: 'string',
        };
    }
}
exports.BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList = BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList;
class BatchQueryDeviceDetailResponseBodyDataData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            firmwareVersion: 'FirmwareVersion',
            gmtActive: 'GmtActive',
            gmtCreate: 'GmtCreate',
            iotId: 'IotId',
            nickname: 'Nickname',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
            region: 'Region',
            status: 'Status',
            utcActive: 'UtcActive',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceSecret: 'string',
            firmwareVersion: 'string',
            gmtActive: 'string',
            gmtCreate: 'string',
            iotId: 'string',
            nickname: 'string',
            nodeType: 'number',
            productKey: 'string',
            productName: 'string',
            region: 'string',
            status: 'string',
            utcActive: 'string',
            utcCreate: 'string',
        };
    }
}
exports.BatchQueryDeviceDetailResponseBodyDataData = BatchQueryDeviceDetailResponseBodyDataData;
class BatchQueryDeviceDetailResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': BatchQueryDeviceDetailResponseBodyDataData },
        };
    }
}
exports.BatchQueryDeviceDetailResponseBodyData = BatchQueryDeviceDetailResponseBodyData;
class BatchRegisterDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
        };
    }
    static types() {
        return {
            applyId: 'number',
        };
    }
}
exports.BatchRegisterDeviceResponseBodyData = BatchRegisterDeviceResponseBodyData;
class BatchRegisterDeviceWithApplyIdResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyId: 'ApplyId',
        };
    }
    static types() {
        return {
            applyId: 'number',
        };
    }
}
exports.BatchRegisterDeviceWithApplyIdResponseBodyData = BatchRegisterDeviceWithApplyIdResponseBodyData;
class BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            content: 'string',
            iotId: 'string',
        };
    }
}
exports.BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs = BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs;
class BatchUnbindProjectDevicesRequestDevices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchUnbindProjectDevicesRequestDevices = BatchUnbindProjectDevicesRequestDevices;
class BatchUpdateDeviceNicknameRequestDeviceNicknameInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            nickname: 'Nickname',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            nickname: 'string',
            productKey: 'string',
        };
    }
}
exports.BatchUpdateDeviceNicknameRequestDeviceNicknameInfo = BatchUpdateDeviceNicknameRequestDeviceNicknameInfo;
class CreateDataAPIServiceRequestRequestParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            example: 'Example',
            name: 'Name',
            required: 'Required',
            type: 'Type',
        };
    }
    static types() {
        return {
            desc: 'string',
            example: 'string',
            name: 'string',
            required: 'boolean',
            type: 'string',
        };
    }
}
exports.CreateDataAPIServiceRequestRequestParam = CreateDataAPIServiceRequestRequestParam;
class CreateDataAPIServiceRequestResponseParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            example: 'Example',
            name: 'Name',
            required: 'Required',
            type: 'Type',
        };
    }
    static types() {
        return {
            desc: 'string',
            example: 'string',
            name: 'string',
            required: 'boolean',
            type: 'string',
        };
    }
}
exports.CreateDataAPIServiceRequestResponseParam = CreateDataAPIServiceRequestResponseParam;
class CreateDataAPIServiceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSrn: 'ApiSrn',
            createTime: 'CreateTime',
            lastUpdateTime: 'LastUpdateTime',
        };
    }
    static types() {
        return {
            apiSrn: 'string',
            createTime: 'number',
            lastUpdateTime: 'number',
        };
    }
}
exports.CreateDataAPIServiceResponseBodyData = CreateDataAPIServiceResponseBodyData;
class CreateDeviceDistributeJobRequestTargetInstanceConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetInstanceId: 'TargetInstanceId',
        };
    }
    static types() {
        return {
            targetInstanceId: 'string',
        };
    }
}
exports.CreateDeviceDistributeJobRequestTargetInstanceConfig = CreateDeviceDistributeJobRequestTargetInstanceConfig;
class CreateDeviceGroupResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
            utcCreate: 'string',
        };
    }
}
exports.CreateDeviceGroupResponseBodyData = CreateDeviceGroupResponseBodyData;
class CreateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.CreateEdgeInstanceChannelRequestConfigs = CreateEdgeInstanceChannelRequestConfigs;
class CreateEdgeOssPreSignedAddressResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ossAddress: 'OssAddress',
            ossPreSignedAddress: 'OssPreSignedAddress',
        };
    }
    static types() {
        return {
            ossAddress: 'string',
            ossPreSignedAddress: 'string',
        };
    }
}
exports.CreateEdgeOssPreSignedAddressResponseBodyData = CreateEdgeOssPreSignedAddressResponseBodyData;
class CreateLoRaNodesTaskRequestDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            devEui: 'DevEui',
            pinCode: 'PinCode',
        };
    }
    static types() {
        return {
            devEui: 'string',
            pinCode: 'string',
        };
    }
}
exports.CreateLoRaNodesTaskRequestDeviceInfo = CreateLoRaNodesTaskRequestDeviceInfo;
class CreateOTADynamicUpgradeJobRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.CreateOTADynamicUpgradeJobRequestTag = CreateOTADynamicUpgradeJobRequestTag;
class CreateOTADynamicUpgradeJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            jobId: 'string',
            utcCreate: 'string',
        };
    }
}
exports.CreateOTADynamicUpgradeJobResponseBodyData = CreateOTADynamicUpgradeJobResponseBodyData;
class CreateOTAFirmwareResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            utcCreate: 'string',
        };
    }
}
exports.CreateOTAFirmwareResponseBodyData = CreateOTAFirmwareResponseBodyData;
class CreateOTAStaticUpgradeJobRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.CreateOTAStaticUpgradeJobRequestTag = CreateOTAStaticUpgradeJobRequestTag;
class CreateOTAStaticUpgradeJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            jobId: 'string',
            utcCreate: 'string',
        };
    }
}
exports.CreateOTAStaticUpgradeJobResponseBodyData = CreateOTAStaticUpgradeJobResponseBodyData;
class CreateOTAVerifyJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'JobId',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            jobId: 'string',
            utcCreate: 'string',
        };
    }
}
exports.CreateOTAVerifyJobResponseBodyData = CreateOTAVerifyJobResponseBodyData;
class CreateProductResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliyunCommodityCode: 'AliyunCommodityCode',
            authType: 'AuthType',
            dataFormat: 'DataFormat',
            description: 'Description',
            id2: 'Id2',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
            productSecret: 'ProductSecret',
            protocolType: 'ProtocolType',
        };
    }
    static types() {
        return {
            aliyunCommodityCode: 'string',
            authType: 'string',
            dataFormat: 'number',
            description: 'string',
            id2: 'boolean',
            nodeType: 'number',
            productKey: 'string',
            productName: 'string',
            productSecret: 'string',
            protocolType: 'string',
        };
    }
}
exports.CreateProductResponseBodyData = CreateProductResponseBodyData;
class CreateProductTagsRequestProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.CreateProductTagsRequestProductTag = CreateProductTagsRequestProductTag;
class CreateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.CreateProductTagsResponseBodyInvalidProductTagsProductTag = CreateProductTagsResponseBodyInvalidProductTagsProductTag;
class CreateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            productTag: { 'type': 'array', 'itemType': CreateProductTagsResponseBodyInvalidProductTagsProductTag },
        };
    }
}
exports.CreateProductTagsResponseBodyInvalidProductTags = CreateProductTagsResponseBodyInvalidProductTags;
class CreateStudioAppDomainOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            host: 'Host',
            id: 'Id',
            isBeian: 'IsBeian',
            projectId: 'ProjectId',
            protocol: 'Protocol',
            tenantId: 'TenantId',
        };
    }
    static types() {
        return {
            appId: 'string',
            host: 'string',
            id: 'number',
            isBeian: 'string',
            projectId: 'string',
            protocol: 'string',
            tenantId: 'string',
        };
    }
}
exports.CreateStudioAppDomainOpenResponseBodyData = CreateStudioAppDomainOpenResponseBodyData;
class CreateTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            topic: 'Topic',
        };
    }
    static types() {
        return {
            topic: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.CreateTopicRouteTableResponseBodyFailureTopics = CreateTopicRouteTableResponseBodyFailureTopics;
class DeleteTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            topic: 'Topic',
        };
    }
    static types() {
        return {
            topic: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.DeleteTopicRouteTableResponseBodyFailureTopics = DeleteTopicRouteTableResponseBodyFailureTopics;
class GenerateDeviceNameListURLResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'AccessKeyId',
            fileUrl: 'FileUrl',
            host: 'Host',
            key: 'Key',
            objectStorage: 'ObjectStorage',
            policy: 'Policy',
            signature: 'Signature',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            fileUrl: 'string',
            host: 'string',
            key: 'string',
            objectStorage: 'string',
            policy: 'string',
            signature: 'string',
            utcCreate: 'string',
        };
    }
}
exports.GenerateDeviceNameListURLResponseBodyData = GenerateDeviceNameListURLResponseBodyData;
class GenerateFileUploadURLResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            host: 'Host',
            key: 'Key',
            objectStorage: 'ObjectStorage',
            ossAccessKeyId: 'OssAccessKeyId',
            policy: 'Policy',
            signature: 'Signature',
        };
    }
    static types() {
        return {
            host: 'string',
            key: 'string',
            objectStorage: 'string',
            ossAccessKeyId: 'string',
            policy: 'string',
            signature: 'string',
        };
    }
}
exports.GenerateFileUploadURLResponseBodyData = GenerateFileUploadURLResponseBodyData;
class GenerateOTAUploadURLResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareUrl: 'FirmwareUrl',
            host: 'Host',
            key: 'Key',
            OSSAccessKeyId: 'OSSAccessKeyId',
            objectStorage: 'ObjectStorage',
            policy: 'Policy',
            signature: 'Signature',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            firmwareUrl: 'string',
            host: 'string',
            key: 'string',
            OSSAccessKeyId: 'string',
            objectStorage: 'string',
            policy: 'string',
            signature: 'string',
            utcCreate: 'string',
        };
    }
}
exports.GenerateOTAUploadURLResponseBodyData = GenerateOTAUploadURLResponseBodyData;
class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            example: 'Example',
            name: 'Name',
            required: 'Required',
            type: 'Type',
        };
    }
    static types() {
        return {
            desc: 'string',
            example: 'string',
            name: 'string',
            required: 'boolean',
            type: 'string',
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams = GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams;
class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestParams: 'RequestParams',
        };
    }
    static types() {
        return {
            requestParams: { 'type': 'array', 'itemType': GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams },
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams = GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams;
class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            example: 'Example',
            name: 'Name',
            required: 'Required',
            type: 'Type',
        };
    }
    static types() {
        return {
            desc: 'string',
            example: 'string',
            name: 'string',
            required: 'boolean',
            type: 'string',
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams = GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams;
class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            responseParams: 'ResponseParams',
        };
    }
    static types() {
        return {
            responseParams: { 'type': 'array', 'itemType': GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams },
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams = GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams;
class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            originSql: 'OriginSql',
            requestParams: 'RequestParams',
            responseParams: 'ResponseParams',
            templateSql: 'TemplateSql',
        };
    }
    static types() {
        return {
            originSql: 'string',
            requestParams: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams,
            responseParams: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams,
            templateSql: 'string',
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO = GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO;
class GetDataAPIServiceDetailResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiPath: 'ApiPath',
            apiSrn: 'ApiSrn',
            createTime: 'CreateTime',
            dateFormat: 'DateFormat',
            description: 'Description',
            displayName: 'DisplayName',
            lastUpdateTime: 'LastUpdateTime',
            requestMethod: 'RequestMethod',
            requestProtocol: 'RequestProtocol',
            sqlTemplateDTO: 'SqlTemplateDTO',
            status: 'Status',
        };
    }
    static types() {
        return {
            apiPath: 'string',
            apiSrn: 'string',
            createTime: 'number',
            dateFormat: 'string',
            description: 'string',
            displayName: 'string',
            lastUpdateTime: 'number',
            requestMethod: 'string',
            requestProtocol: 'string',
            sqlTemplateDTO: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO,
            status: 'number',
        };
    }
}
exports.GetDataAPIServiceDetailResponseBodyData = GetDataAPIServiceDetailResponseBodyData;
class GetDeviceStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'Status',
            timestamp: 'Timestamp',
        };
    }
    static types() {
        return {
            status: 'string',
            timestamp: 'number',
        };
    }
}
exports.GetDeviceStatusResponseBodyData = GetDeviceStatusResponseBodyData;
class GetDeviceTunnelShareStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtOpened: 'GmtOpened',
            isOpen: 'IsOpen',
            password: 'Password',
            shareId: 'ShareId',
        };
    }
    static types() {
        return {
            gmtOpened: 'number',
            isOpen: 'boolean',
            password: 'string',
            shareId: 'string',
        };
    }
}
exports.GetDeviceTunnelShareStatusResponseBodyData = GetDeviceTunnelShareStatusResponseBodyData;
class GetEdgeDriverVersionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            argument: 'Argument',
            configCheckRule: 'ConfigCheckRule',
            containerConfig: 'ContainerConfig',
            description: 'Description',
            driverConfig: 'DriverConfig',
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            edgeVersion: 'EdgeVersion',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            sourceConfig: 'SourceConfig',
            versionState: 'VersionState',
        };
    }
    static types() {
        return {
            argument: 'string',
            configCheckRule: 'string',
            containerConfig: 'string',
            description: 'string',
            driverConfig: 'string',
            driverId: 'string',
            driverVersion: 'string',
            edgeVersion: 'string',
            gmtCreateTimestamp: 'number',
            gmtModifiedTimestamp: 'number',
            sourceConfig: 'string',
            versionState: 'string',
        };
    }
}
exports.GetEdgeDriverVersionResponseBodyData = GetEdgeDriverVersionResponseBodyData;
class GetEdgeInstanceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizEnable: 'BizEnable',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            instanceId: 'InstanceId',
            latestDeploymentStatus: 'LatestDeploymentStatus',
            latestDeploymentType: 'LatestDeploymentType',
            name: 'Name',
            roleArn: 'RoleArn',
            roleAttachTime: 'RoleAttachTime',
            roleAttachTimestamp: 'RoleAttachTimestamp',
            roleName: 'RoleName',
            spec: 'Spec',
            tags: 'Tags',
            type: 'Type',
        };
    }
    static types() {
        return {
            bizEnable: 'boolean',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            instanceId: 'string',
            latestDeploymentStatus: 'number',
            latestDeploymentType: 'string',
            name: 'string',
            roleArn: 'string',
            roleAttachTime: 'string',
            roleAttachTimestamp: 'number',
            roleName: 'string',
            spec: 'number',
            tags: 'string',
            type: 'string',
        };
    }
}
exports.GetEdgeInstanceResponseBodyData = GetEdgeInstanceResponseBodyData;
class GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCompleted: 'GmtCompleted',
            gmtCompletedTimestamp: 'GmtCompletedTimestamp',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            log: 'Log',
            operateType: 'OperateType',
            resourceId: 'ResourceId',
            resourceName: 'ResourceName',
            resourceType: 'ResourceType',
            snapshotId: 'SnapshotId',
            stage: 'Stage',
            status: 'Status',
        };
    }
    static types() {
        return {
            gmtCompleted: 'string',
            gmtCompletedTimestamp: 'number',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            log: 'string',
            operateType: 'number',
            resourceId: 'string',
            resourceName: 'string',
            resourceType: 'string',
            snapshotId: 'string',
            stage: 'number',
            status: 'number',
        };
    }
}
exports.GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList = GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList;
class GetEdgeInstanceDeploymentResponseBodyDataTaskList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gatewayId: 'GatewayId',
            gmtCompleted: 'GmtCompleted',
            gmtCompletedTimestamp: 'GmtCompletedTimestamp',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            resourceSnapshotList: 'ResourceSnapshotList',
            stage: 'Stage',
            status: 'Status',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            gatewayId: 'string',
            gmtCompleted: 'string',
            gmtCompletedTimestamp: 'number',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            resourceSnapshotList: { 'type': 'array', 'itemType': GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList },
            stage: 'number',
            status: 'number',
            taskId: 'string',
        };
    }
}
exports.GetEdgeInstanceDeploymentResponseBodyDataTaskList = GetEdgeInstanceDeploymentResponseBodyDataTaskList;
class GetEdgeInstanceDeploymentResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deploymentId: 'DeploymentId',
            description: 'Description',
            gmtCompleted: 'GmtCompleted',
            gmtCompletedTimestamp: 'GmtCompletedTimestamp',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            status: 'Status',
            taskList: 'TaskList',
            type: 'Type',
        };
    }
    static types() {
        return {
            deploymentId: 'string',
            description: 'string',
            gmtCompleted: 'string',
            gmtCompletedTimestamp: 'number',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            status: 'number',
            taskList: { 'type': 'array', 'itemType': GetEdgeInstanceDeploymentResponseBodyDataTaskList },
            type: 'string',
        };
    }
}
exports.GetEdgeInstanceDeploymentResponseBodyData = GetEdgeInstanceDeploymentResponseBodyData;
class GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            qos: 'Qos',
            sourceApplicationName: 'SourceApplicationName',
            sourceFcFunctionName: 'SourceFcFunctionName',
            sourceFcServiceName: 'SourceFcServiceName',
            targetApplicationName: 'TargetApplicationName',
            targetFcFunctionName: 'TargetFcFunctionName',
            targetFcServiceName: 'TargetFcServiceName',
        };
    }
    static types() {
        return {
            qos: 'string',
            sourceApplicationName: 'string',
            sourceFcFunctionName: 'string',
            sourceFcServiceName: 'string',
            targetApplicationName: 'string',
            targetFcFunctionName: 'string',
            targetFcServiceName: 'string',
        };
    }
}
exports.GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext = GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext;
class GetEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            name: 'Name',
            routeContext: 'RouteContext',
            sourceData: 'SourceData',
            sourceType: 'SourceType',
            targetData: 'TargetData',
            targetType: 'TargetType',
            topicFilter: 'TopicFilter',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            name: 'string',
            routeContext: GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext,
            sourceData: 'string',
            sourceType: 'string',
            targetData: 'string',
            targetType: 'string',
            topicFilter: 'string',
        };
    }
}
exports.GetEdgeInstanceMessageRoutingResponseBodyData = GetEdgeInstanceMessageRoutingResponseBodyData;
class GetGatewayBySubDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            firmwareVersion: 'FirmwareVersion',
            gmtActive: 'GmtActive',
            gmtCreate: 'GmtCreate',
            gmtOnline: 'GmtOnline',
            ipAddress: 'IpAddress',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
            status: 'Status',
            utcActive: 'UtcActive',
            utcCreate: 'UtcCreate',
            utcOnline: 'UtcOnline',
            iotId: 'iotId',
            region: 'region',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceSecret: 'string',
            firmwareVersion: 'string',
            gmtActive: 'string',
            gmtCreate: 'string',
            gmtOnline: 'string',
            ipAddress: 'string',
            nodeType: 'string',
            productKey: 'string',
            productName: 'string',
            status: 'string',
            utcActive: 'string',
            utcCreate: 'string',
            utcOnline: 'string',
            iotId: 'string',
            region: 'string',
        };
    }
}
exports.GetGatewayBySubDeviceResponseBodyData = GetGatewayBySubDeviceResponseBodyData;
class GetLoraNodesTaskResponseBodySuccessDevEuis extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            successDevEui: 'SuccessDevEui',
        };
    }
    static types() {
        return {
            successDevEui: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetLoraNodesTaskResponseBodySuccessDevEuis = GetLoraNodesTaskResponseBodySuccessDevEuis;
class GetNodesAddingTaskResponseBodySuccessDevEuis extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            successDevEui: 'SuccessDevEui',
        };
    }
    static types() {
        return {
            successDevEui: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetNodesAddingTaskResponseBodySuccessDevEuis = GetNodesAddingTaskResponseBodySuccessDevEuis;
class GetRuleResponseBodyRuleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createUserId: 'CreateUserId',
            created: 'Created',
            dataType: 'DataType',
            id: 'Id',
            modified: 'Modified',
            name: 'Name',
            productKey: 'ProductKey',
            ruleDesc: 'RuleDesc',
            select: 'Select',
            shortTopic: 'ShortTopic',
            status: 'Status',
            topic: 'Topic',
            topicType: 'TopicType',
            utcCreated: 'UtcCreated',
            utcModified: 'UtcModified',
            where: 'Where',
        };
    }
    static types() {
        return {
            createUserId: 'number',
            created: 'string',
            dataType: 'string',
            id: 'number',
            modified: 'string',
            name: 'string',
            productKey: 'string',
            ruleDesc: 'string',
            select: 'string',
            shortTopic: 'string',
            status: 'string',
            topic: 'string',
            topicType: 'number',
            utcCreated: 'string',
            utcModified: 'string',
            where: 'string',
        };
    }
}
exports.GetRuleResponseBodyRuleInfo = GetRuleResponseBodyRuleInfo;
class GetRuleActionResponseBodyRuleActionInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configuration: 'Configuration',
            errorActionFlag: 'ErrorActionFlag',
            id: 'Id',
            ruleId: 'RuleId',
            type: 'Type',
        };
    }
    static types() {
        return {
            configuration: 'string',
            errorActionFlag: 'boolean',
            id: 'number',
            ruleId: 'number',
            type: 'string',
        };
    }
}
exports.GetRuleActionResponseBodyRuleActionInfo = GetRuleActionResponseBodyRuleActionInfo;
class GetSceneRuleResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            ruleContent: 'RuleContent',
            ruleDescription: 'RuleDescription',
            ruleName: 'RuleName',
            ruleStatus: 'RuleStatus',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            gmtModified: 'number',
            ruleContent: 'string',
            ruleDescription: 'string',
            ruleName: 'string',
            ruleStatus: 'number',
        };
    }
}
exports.GetSceneRuleResponseBodyData = GetSceneRuleResponseBodyData;
class GetSpeechVoiceResponseBodyDataItemsVoiceListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'Label',
            value: 'Value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.GetSpeechVoiceResponseBodyDataItemsVoiceListItems = GetSpeechVoiceResponseBodyDataItemsVoiceListItems;
class GetSpeechVoiceResponseBodyDataItemsVoiceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': GetSpeechVoiceResponseBodyDataItemsVoiceListItems },
        };
    }
}
exports.GetSpeechVoiceResponseBodyDataItemsVoiceList = GetSpeechVoiceResponseBodyDataItemsVoiceList;
class GetSpeechVoiceResponseBodyDataItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'Label',
            value: 'Value',
            voiceList: 'VoiceList',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
            voiceList: GetSpeechVoiceResponseBodyDataItemsVoiceList,
        };
    }
}
exports.GetSpeechVoiceResponseBodyDataItems = GetSpeechVoiceResponseBodyDataItems;
class GetSpeechVoiceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': GetSpeechVoiceResponseBodyDataItems },
        };
    }
}
exports.GetSpeechVoiceResponseBodyData = GetSpeechVoiceResponseBodyData;
class GetStudioAppTokenOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            bizType: 'BizType',
            isEnable: 'IsEnable',
            token: 'Token',
            type: 'Type',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'string',
            isEnable: 'string',
            token: 'string',
            type: 'string',
        };
    }
}
exports.GetStudioAppTokenOpenResponseBodyData = GetStudioAppTokenOpenResponseBodyData;
class GetThingModelTslResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tslStr: 'TslStr',
            tslUri: 'TslUri',
        };
    }
    static types() {
        return {
            tslStr: 'string',
            tslUri: 'string',
        };
    }
}
exports.GetThingModelTslResponseBodyData = GetThingModelTslResponseBodyData;
class GetThingModelTslPublishedResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tslStr: 'TslStr',
            tslUri: 'TslUri',
        };
    }
    static types() {
        return {
            tslStr: 'string',
            tslUri: 'string',
        };
    }
}
exports.GetThingModelTslPublishedResponseBodyData = GetThingModelTslPublishedResponseBodyData;
class GetThingScriptResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scriptType: 'ScriptType',
            scriptUrl: 'ScriptUrl',
        };
    }
    static types() {
        return {
            scriptType: 'string',
            scriptUrl: 'string',
        };
    }
}
exports.GetThingScriptResponseBodyData = GetThingScriptResponseBodyData;
class GetThingTopoResponseBodyDataListDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            productKey: 'string',
        };
    }
}
exports.GetThingTopoResponseBodyDataListDeviceInfo = GetThingTopoResponseBodyDataListDeviceInfo;
class GetThingTopoResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceInfo: 'deviceInfo',
        };
    }
    static types() {
        return {
            deviceInfo: { 'type': 'array', 'itemType': GetThingTopoResponseBodyDataListDeviceInfo },
        };
    }
}
exports.GetThingTopoResponseBodyDataList = GetThingTopoResponseBodyDataList;
class GetThingTopoResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            list: 'List',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            list: GetThingTopoResponseBodyDataList,
            pageCount: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.GetThingTopoResponseBodyData = GetThingTopoResponseBodyData;
class InvokeDataAPIServiceRequestParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            listParamType: 'ListParamType',
            listParamValue: 'ListParamValue',
            paramName: 'ParamName',
            paramType: 'ParamType',
            paramValue: 'ParamValue',
        };
    }
    static types() {
        return {
            listParamType: 'string',
            listParamValue: { 'type': 'array', 'itemType': 'string' },
            paramName: 'string',
            paramType: 'string',
            paramValue: 'string',
        };
    }
}
exports.InvokeDataAPIServiceRequestParam = InvokeDataAPIServiceRequestParam;
class InvokeDataAPIServiceResponseBodyDataFieldNameList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldNameList: 'FieldNameList',
        };
    }
    static types() {
        return {
            fieldNameList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.InvokeDataAPIServiceResponseBodyDataFieldNameList = InvokeDataAPIServiceResponseBodyDataFieldNameList;
class InvokeDataAPIServiceResponseBodyDataResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultList: 'ResultList',
        };
    }
    static types() {
        return {
            resultList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.InvokeDataAPIServiceResponseBodyDataResultList = InvokeDataAPIServiceResponseBodyDataResultList;
class InvokeDataAPIServiceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSrn: 'ApiSrn',
            fieldNameList: 'FieldNameList',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            resultList: 'ResultList',
        };
    }
    static types() {
        return {
            apiSrn: 'string',
            fieldNameList: InvokeDataAPIServiceResponseBodyDataFieldNameList,
            pageNo: 'number',
            pageSize: 'number',
            resultList: InvokeDataAPIServiceResponseBodyDataResultList,
        };
    }
}
exports.InvokeDataAPIServiceResponseBodyData = InvokeDataAPIServiceResponseBodyData;
class InvokeThingServiceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageId: 'MessageId',
            result: 'Result',
        };
    }
    static types() {
        return {
            messageId: 'string',
            result: 'string',
        };
    }
}
exports.InvokeThingServiceResponseBodyData = InvokeThingServiceResponseBodyData;
class ListAnalyticsDataRequestCondition extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            betweenEnd: 'BetweenEnd',
            betweenStart: 'BetweenStart',
            fieldName: 'FieldName',
            operate: 'Operate',
            value: 'Value',
        };
    }
    static types() {
        return {
            betweenEnd: 'string',
            betweenStart: 'string',
            fieldName: 'string',
            operate: 'string',
            value: 'string',
        };
    }
}
exports.ListAnalyticsDataRequestCondition = ListAnalyticsDataRequestCondition;
class ListAnalyticsDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'Count',
            hasNext: 'HasNext',
            pageNum: 'PageNum',
            pageSize: 'PageSize',
            resultJson: 'ResultJson',
        };
    }
    static types() {
        return {
            count: 'number',
            hasNext: 'boolean',
            pageNum: 'number',
            pageSize: 'number',
            resultJson: 'string',
        };
    }
}
exports.ListAnalyticsDataResponseBodyData = ListAnalyticsDataResponseBodyData;
class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetInstanceId: 'TargetInstanceId',
            targetInstanceName: 'TargetInstanceName',
            targetRegion: 'TargetRegion',
        };
    }
    static types() {
        return {
            targetInstanceId: 'string',
            targetInstanceName: 'string',
            targetRegion: 'string',
        };
    }
}
exports.ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs = ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs;
class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetInstanceConfigs: 'targetInstanceConfigs',
        };
    }
    static types() {
        return {
            targetInstanceConfigs: { 'type': 'array', 'itemType': ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs },
        };
    }
}
exports.ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs = ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs;
class ListDeviceDistributeJobResponseBodyDataJobInfoItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            jobId: 'JobId',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            sourceInstanceName: 'SourceInstanceName',
            sourceRegion: 'SourceRegion',
            sourceUid: 'SourceUid',
            status: 'Status',
            strategy: 'Strategy',
            targetInstanceConfigs: 'TargetInstanceConfigs',
            targetUid: 'TargetUid',
            total: 'Total',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            jobId: 'string',
            productKey: 'string',
            sourceInstanceId: 'string',
            sourceInstanceName: 'string',
            sourceRegion: 'string',
            sourceUid: 'string',
            status: 'number',
            strategy: 'number',
            targetInstanceConfigs: ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs,
            targetUid: 'string',
            total: 'number',
        };
    }
}
exports.ListDeviceDistributeJobResponseBodyDataJobInfoItems = ListDeviceDistributeJobResponseBodyDataJobInfoItems;
class ListDeviceDistributeJobResponseBodyDataJobInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': ListDeviceDistributeJobResponseBodyDataJobInfoItems },
        };
    }
}
exports.ListDeviceDistributeJobResponseBodyDataJobInfo = ListDeviceDistributeJobResponseBodyDataJobInfo;
class ListDeviceDistributeJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobInfo: 'JobInfo',
            nextToken: 'NextToken',
            total: 'Total',
        };
    }
    static types() {
        return {
            jobInfo: ListDeviceDistributeJobResponseBodyDataJobInfo,
            nextToken: 'string',
            total: 'number',
        };
    }
}
exports.ListDeviceDistributeJobResponseBodyData = ListDeviceDistributeJobResponseBodyData;
class ListDistributedDeviceResponseBodyDataInfoItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            sourceInstanceName: 'SourceInstanceName',
            sourceRegion: 'SourceRegion',
            sourceUid: 'SourceUid',
            targetAliyunId: 'TargetAliyunId',
            targetInstanceId: 'TargetInstanceId',
            targetInstanceName: 'TargetInstanceName',
            targetRegion: 'TargetRegion',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            productKey: 'string',
            sourceInstanceId: 'string',
            sourceInstanceName: 'string',
            sourceRegion: 'string',
            sourceUid: 'string',
            targetAliyunId: 'string',
            targetInstanceId: 'string',
            targetInstanceName: 'string',
            targetRegion: 'string',
            targetUid: 'string',
        };
    }
}
exports.ListDistributedDeviceResponseBodyDataInfoItems = ListDistributedDeviceResponseBodyDataInfoItems;
class ListDistributedDeviceResponseBodyDataInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': ListDistributedDeviceResponseBodyDataInfoItems },
        };
    }
}
exports.ListDistributedDeviceResponseBodyDataInfo = ListDistributedDeviceResponseBodyDataInfo;
class ListDistributedDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            total: 'Total',
        };
    }
    static types() {
        return {
            info: ListDistributedDeviceResponseBodyDataInfo,
            total: 'number',
        };
    }
}
exports.ListDistributedDeviceResponseBodyData = ListDistributedDeviceResponseBodyData;
class ListDistributedProductResponseBodyDataInfoItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            sourceInstanceName: 'SourceInstanceName',
            sourceRegion: 'SourceRegion',
            sourceUid: 'SourceUid',
            targetAliyunId: 'TargetAliyunId',
            targetInstanceId: 'TargetInstanceId',
            targetInstanceName: 'TargetInstanceName',
            targetRegion: 'TargetRegion',
            targetUid: 'TargetUid',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            productKey: 'string',
            sourceInstanceId: 'string',
            sourceInstanceName: 'string',
            sourceRegion: 'string',
            sourceUid: 'string',
            targetAliyunId: 'string',
            targetInstanceId: 'string',
            targetInstanceName: 'string',
            targetRegion: 'string',
            targetUid: 'string',
        };
    }
}
exports.ListDistributedProductResponseBodyDataInfoItems = ListDistributedProductResponseBodyDataInfoItems;
class ListDistributedProductResponseBodyDataInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': ListDistributedProductResponseBodyDataInfoItems },
        };
    }
}
exports.ListDistributedProductResponseBodyDataInfo = ListDistributedProductResponseBodyDataInfo;
class ListDistributedProductResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            info: 'Info',
            total: 'Total',
        };
    }
    static types() {
        return {
            info: ListDistributedProductResponseBodyDataInfo,
            total: 'number',
        };
    }
}
exports.ListDistributedProductResponseBodyData = ListDistributedProductResponseBodyData;
class ListJobResponseBodyDataData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            jobId: 'JobId',
            jobName: 'JobName',
            scheduledTime: 'ScheduledTime',
            status: 'Status',
            type: 'Type',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            description: 'string',
            jobId: 'string',
            jobName: 'string',
            scheduledTime: 'number',
            status: 'string',
            type: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.ListJobResponseBodyDataData = ListJobResponseBodyDataData;
class ListJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ListJobResponseBodyDataData },
        };
    }
}
exports.ListJobResponseBodyData = ListJobResponseBodyData;
class ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            firmwareDesc: 'FirmwareDesc',
            firmwareId: 'FirmwareId',
            firmwareName: 'FirmwareName',
            firmwareSign: 'FirmwareSign',
            firmwareSize: 'FirmwareSize',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
            productName: 'ProductName',
            signMethod: 'SignMethod',
            srcVersion: 'SrcVersion',
            status: 'Status',
            type: 'Type',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            firmwareDesc: 'string',
            firmwareId: 'string',
            firmwareName: 'string',
            firmwareSign: 'string',
            firmwareSize: 'number',
            moduleName: 'string',
            productKey: 'string',
            productName: 'string',
            signMethod: 'string',
            srcVersion: 'string',
            status: 'number',
            type: 'number',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo = ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo;
class ListOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleFirmwareInfo: 'SimpleFirmwareInfo',
        };
    }
    static types() {
        return {
            simpleFirmwareInfo: { 'type': 'array', 'itemType': ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo },
        };
    }
}
exports.ListOTAFirmwareResponseBodyFirmwareInfo = ListOTAFirmwareResponseBodyFirmwareInfo;
class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO = ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO;
class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            otaTagDTO: 'OtaTagDTO',
        };
    }
    static types() {
        return {
            otaTagDTO: { 'type': 'array', 'itemType': ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO },
        };
    }
}
exports.ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags = ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags;
class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            jobId: 'JobId',
            jobStatus: 'JobStatus',
            jobType: 'JobType',
            productKey: 'ProductKey',
            selectionType: 'SelectionType',
            tags: 'Tags',
            targetSelection: 'TargetSelection',
            utcCreate: 'UtcCreate',
            utcEndTime: 'UtcEndTime',
            utcModified: 'UtcModified',
            utcStartTime: 'UtcStartTime',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            jobId: 'string',
            jobStatus: 'string',
            jobType: 'string',
            productKey: 'string',
            selectionType: 'string',
            tags: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags,
            targetSelection: 'string',
            utcCreate: 'string',
            utcEndTime: 'string',
            utcModified: 'string',
            utcStartTime: 'string',
        };
    }
}
exports.ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo = ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo;
class ListOTAJobByDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleOTAJobInfo: 'SimpleOTAJobInfo',
        };
    }
    static types() {
        return {
            simpleOTAJobInfo: { 'type': 'array', 'itemType': ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo },
        };
    }
}
exports.ListOTAJobByDeviceResponseBodyData = ListOTAJobByDeviceResponseBodyData;
class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO = ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO;
class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            otaTagDTO: 'OtaTagDTO',
        };
    }
    static types() {
        return {
            otaTagDTO: { 'type': 'array', 'itemType': ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO },
        };
    }
}
exports.ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags = ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags;
class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareId: 'FirmwareId',
            jobId: 'JobId',
            jobStatus: 'JobStatus',
            jobType: 'JobType',
            productKey: 'ProductKey',
            selectionType: 'SelectionType',
            tags: 'Tags',
            targetSelection: 'TargetSelection',
            utcCreate: 'UtcCreate',
            utcEndTime: 'UtcEndTime',
            utcModified: 'UtcModified',
            utcStartTime: 'UtcStartTime',
        };
    }
    static types() {
        return {
            firmwareId: 'string',
            jobId: 'string',
            jobStatus: 'string',
            jobType: 'string',
            productKey: 'string',
            selectionType: 'string',
            tags: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags,
            targetSelection: 'string',
            utcCreate: 'string',
            utcEndTime: 'string',
            utcModified: 'string',
            utcStartTime: 'string',
        };
    }
}
exports.ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo = ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo;
class ListOTAJobByFirmwareResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleOTAJobInfo: 'SimpleOTAJobInfo',
        };
    }
    static types() {
        return {
            simpleOTAJobInfo: { 'type': 'array', 'itemType': ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo },
        };
    }
}
exports.ListOTAJobByFirmwareResponseBodyData = ListOTAJobByFirmwareResponseBodyData;
class ListOTAModuleByProductResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasName: 'AliasName',
            desc: 'Desc',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            aliasName: 'string',
            desc: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            moduleName: 'string',
            productKey: 'string',
        };
    }
}
exports.ListOTAModuleByProductResponseBodyData = ListOTAModuleByProductResponseBodyData;
class ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            moduleName: 'ModuleName',
            moduleVersion: 'ModuleVersion',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            moduleName: 'string',
            moduleVersion: 'string',
            productKey: 'string',
        };
    }
}
exports.ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo = ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo;
class ListOTAModuleVersionsByDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleOTAModuleInfo: 'SimpleOTAModuleInfo',
        };
    }
    static types() {
        return {
            simpleOTAModuleInfo: { 'type': 'array', 'itemType': ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo },
        };
    }
}
exports.ListOTAModuleVersionsByDeviceResponseBodyData = ListOTAModuleVersionsByDeviceResponseBodyData;
class ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            deviceName: 'DeviceName',
            firmwareId: 'FirmwareId',
            iotId: 'IotId',
            jobId: 'JobId',
            productKey: 'ProductKey',
            productName: 'ProductName',
            progress: 'Progress',
            srcVersion: 'SrcVersion',
            taskDesc: 'TaskDesc',
            taskId: 'TaskId',
            taskStatus: 'TaskStatus',
            timeout: 'Timeout',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            deviceName: 'string',
            firmwareId: 'string',
            iotId: 'string',
            jobId: 'string',
            productKey: 'string',
            productName: 'string',
            progress: 'string',
            srcVersion: 'string',
            taskDesc: 'string',
            taskId: 'string',
            taskStatus: 'string',
            timeout: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo = ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo;
class ListOTATaskByJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleOTATaskInfo: 'SimpleOTATaskInfo',
        };
    }
    static types() {
        return {
            simpleOTATaskInfo: { 'type': 'array', 'itemType': ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo },
        };
    }
}
exports.ListOTATaskByJobResponseBodyData = ListOTATaskByJobResponseBodyData;
class ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            deviceName: 'DeviceName',
            firmwareId: 'FirmwareId',
            iotId: 'IotId',
            jobId: 'JobId',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
            productName: 'ProductName',
            srcVersion: 'SrcVersion',
            taskId: 'TaskId',
            taskStatus: 'TaskStatus',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            deviceName: 'string',
            firmwareId: 'string',
            iotId: 'string',
            jobId: 'string',
            moduleName: 'string',
            productKey: 'string',
            productName: 'string',
            srcVersion: 'string',
            taskId: 'string',
            taskStatus: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo = ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo;
class ListOTAUnfinishedTaskByDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleOTATaskInfo: 'SimpleOTATaskInfo',
        };
    }
    static types() {
        return {
            simpleOTATaskInfo: { 'type': 'array', 'itemType': ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo },
        };
    }
}
exports.ListOTAUnfinishedTaskByDeviceResponseBodyData = ListOTAUnfinishedTaskByDeviceResponseBodyData;
class ListProductByTagsRequestProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.ListProductByTagsRequestProductTag = ListProductByTagsRequestProductTag;
class ListProductByTagsResponseBodyProductInfosProductInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'CreateTime',
            description: 'Description',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
        };
    }
    static types() {
        return {
            createTime: 'number',
            description: 'string',
            nodeType: 'number',
            productKey: 'string',
            productName: 'string',
        };
    }
}
exports.ListProductByTagsResponseBodyProductInfosProductInfo = ListProductByTagsResponseBodyProductInfosProductInfo;
class ListProductByTagsResponseBodyProductInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productInfo: 'ProductInfo',
        };
    }
    static types() {
        return {
            productInfo: { 'type': 'array', 'itemType': ListProductByTagsResponseBodyProductInfosProductInfo },
        };
    }
}
exports.ListProductByTagsResponseBodyProductInfos = ListProductByTagsResponseBodyProductInfos;
class ListProductTagsResponseBodyDataProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.ListProductTagsResponseBodyDataProductTag = ListProductTagsResponseBodyDataProductTag;
class ListProductTagsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            productTag: { 'type': 'array', 'itemType': ListProductTagsResponseBodyDataProductTag },
        };
    }
}
exports.ListProductTagsResponseBodyData = ListProductTagsResponseBodyData;
class ListRuleResponseBodyDataRuleInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createUserId: 'CreateUserId',
            created: 'Created',
            dataType: 'DataType',
            id: 'Id',
            modified: 'Modified',
            name: 'Name',
            productKey: 'ProductKey',
            ruleDesc: 'RuleDesc',
            select: 'Select',
            shortTopic: 'ShortTopic',
            status: 'Status',
            topic: 'Topic',
            utcCreated: 'UtcCreated',
            utcModified: 'UtcModified',
            where: 'Where',
        };
    }
    static types() {
        return {
            createUserId: 'number',
            created: 'string',
            dataType: 'string',
            id: 'number',
            modified: 'string',
            name: 'string',
            productKey: 'string',
            ruleDesc: 'string',
            select: 'string',
            shortTopic: 'string',
            status: 'string',
            topic: 'string',
            utcCreated: 'string',
            utcModified: 'string',
            where: 'string',
        };
    }
}
exports.ListRuleResponseBodyDataRuleInfo = ListRuleResponseBodyDataRuleInfo;
class ListRuleResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ruleInfo: 'RuleInfo',
        };
    }
    static types() {
        return {
            ruleInfo: { 'type': 'array', 'itemType': ListRuleResponseBodyDataRuleInfo },
        };
    }
}
exports.ListRuleResponseBodyData = ListRuleResponseBodyData;
class ListRuleActionsResponseBodyRuleActionListRuleActionInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configuration: 'Configuration',
            errorActionFlag: 'ErrorActionFlag',
            id: 'Id',
            ruleId: 'RuleId',
            type: 'Type',
        };
    }
    static types() {
        return {
            configuration: 'string',
            errorActionFlag: 'boolean',
            id: 'number',
            ruleId: 'number',
            type: 'string',
        };
    }
}
exports.ListRuleActionsResponseBodyRuleActionListRuleActionInfo = ListRuleActionsResponseBodyRuleActionListRuleActionInfo;
class ListRuleActionsResponseBodyRuleActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ruleActionInfo: 'RuleActionInfo',
        };
    }
    static types() {
        return {
            ruleActionInfo: { 'type': 'array', 'itemType': ListRuleActionsResponseBodyRuleActionListRuleActionInfo },
        };
    }
}
exports.ListRuleActionsResponseBodyRuleActionList = ListRuleActionsResponseBodyRuleActionList;
class ListTaskResponseBodyDataData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            jobId: 'JobId',
            jobName: 'JobName',
            productKey: 'ProductKey',
            progress: 'Progress',
            status: 'Status',
            taskId: 'TaskId',
            utcModified: 'UtcModified',
            utcQueueTime: 'UtcQueueTime',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            jobId: 'string',
            jobName: 'string',
            productKey: 'string',
            progress: 'string',
            status: 'string',
            taskId: 'string',
            utcModified: 'string',
            utcQueueTime: 'string',
        };
    }
}
exports.ListTaskResponseBodyDataData = ListTaskResponseBodyDataData;
class ListTaskResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ListTaskResponseBodyDataData },
        };
    }
}
exports.ListTaskResponseBodyData = ListTaskResponseBodyData;
class ListTaskByPageResponseBodyDataData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            jobId: 'JobId',
            jobName: 'JobName',
            productKey: 'ProductKey',
            productName: 'ProductName',
            progress: 'Progress',
            status: 'Status',
            statusDetail: 'StatusDetail',
            taskId: 'TaskId',
            utcModified: 'UtcModified',
            utcQueueTime: 'UtcQueueTime',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            jobId: 'string',
            jobName: 'string',
            productKey: 'string',
            productName: 'string',
            progress: 'number',
            status: 'string',
            statusDetail: 'string',
            taskId: 'string',
            utcModified: 'string',
            utcQueueTime: 'string',
        };
    }
}
exports.ListTaskByPageResponseBodyDataData = ListTaskByPageResponseBodyDataData;
class ListTaskByPageResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ListTaskByPageResponseBodyDataData },
        };
    }
}
exports.ListTaskByPageResponseBodyData = ListTaskByPageResponseBodyData;
class ListThingModelVersionResponseBodyDataModelVersions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            gmtCreate: 'GmtCreate',
            modelVersion: 'ModelVersion',
        };
    }
    static types() {
        return {
            description: 'string',
            gmtCreate: 'number',
            modelVersion: 'string',
        };
    }
}
exports.ListThingModelVersionResponseBodyDataModelVersions = ListThingModelVersionResponseBodyDataModelVersions;
class ListThingModelVersionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            modelVersions: 'ModelVersions',
        };
    }
    static types() {
        return {
            modelVersions: { 'type': 'array', 'itemType': ListThingModelVersionResponseBodyDataModelVersions },
        };
    }
}
exports.ListThingModelVersionResponseBodyData = ListThingModelVersionResponseBodyData;
class ListThingTemplatesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryKey: 'CategoryKey',
            categoryName: 'CategoryName',
        };
    }
    static types() {
        return {
            categoryKey: 'string',
            categoryName: 'string',
        };
    }
}
exports.ListThingTemplatesResponseBodyData = ListThingTemplatesResponseBodyData;
class NotifyAddThingTopoResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            messageId: 'string',
        };
    }
}
exports.NotifyAddThingTopoResponseBodyData = NotifyAddThingTopoResponseBodyData;
class PrintByTemplateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceErrorCode: 'DeviceErrorCode',
            deviceErrorMessage: 'DeviceErrorMessage',
            id: 'Id',
            maxRetryCount: 'MaxRetryCount',
            retryCount: 'RetryCount',
            success: 'Success',
        };
    }
    static types() {
        return {
            deviceErrorCode: 'string',
            deviceErrorMessage: 'string',
            id: 'string',
            maxRetryCount: 'number',
            retryCount: 'number',
            success: 'boolean',
        };
    }
}
exports.PrintByTemplateResponseBodyData = PrintByTemplateResponseBodyData;
class PubRequestUserProp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.PubRequestUserProp = PubRequestUserProp;
class QueryAppDeviceListRequestTagList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagName: 'TagName',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagName: 'string',
            tagValue: 'string',
        };
    }
}
exports.QueryAppDeviceListRequestTagList = QueryAppDeviceListRequestTagList;
class QueryAppDeviceListResponseBodyDataData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTime: 'ActiveTime',
            childDeviceCount: 'ChildDeviceCount',
            createTime: 'CreateTime',
            deviceName: 'DeviceName',
            lastOnlineTime: 'LastOnlineTime',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
            status: 'Status',
            utcActiveTime: 'UtcActiveTime',
            utcCreateTime: 'UtcCreateTime',
            utcLastOnlineTime: 'UtcLastOnlineTime',
        };
    }
    static types() {
        return {
            activeTime: 'string',
            childDeviceCount: 'number',
            createTime: 'string',
            deviceName: 'string',
            lastOnlineTime: 'string',
            nodeType: 'number',
            productKey: 'string',
            productName: 'string',
            status: 'string',
            utcActiveTime: 'string',
            utcCreateTime: 'string',
            utcLastOnlineTime: 'string',
        };
    }
}
exports.QueryAppDeviceListResponseBodyDataData = QueryAppDeviceListResponseBodyDataData;
class QueryAppDeviceListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'Data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': QueryAppDeviceListResponseBodyDataData },
        };
    }
}
exports.QueryAppDeviceListResponseBodyData = QueryAppDeviceListResponseBodyData;
class QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
        };
    }
    static types() {
        return {
            name: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList = QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList;
class QueryBatchRegisterDeviceStatusResponseBodyDataValidList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'Name',
        };
    }
    static types() {
        return {
            name: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryBatchRegisterDeviceStatusResponseBodyDataValidList = QueryBatchRegisterDeviceStatusResponseBodyDataValidList;
class QueryBatchRegisterDeviceStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invalidList: 'InvalidList',
            status: 'Status',
            validList: 'ValidList',
        };
    }
    static types() {
        return {
            invalidList: QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList,
            status: 'string',
            validList: QueryBatchRegisterDeviceStatusResponseBodyDataValidList,
        };
    }
}
exports.QueryBatchRegisterDeviceStatusResponseBodyData = QueryBatchRegisterDeviceStatusResponseBodyData;
class QueryConsumerGroupByGroupIdResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'CreateTime',
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            createTime: 'string',
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.QueryConsumerGroupByGroupIdResponseBodyData = QueryConsumerGroupByGroupIdResponseBodyData;
class QueryConsumerGroupListResponseBodyDataConsumerGroupDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'CreateTime',
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            createTime: 'string',
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.QueryConsumerGroupListResponseBodyDataConsumerGroupDTO = QueryConsumerGroupListResponseBodyDataConsumerGroupDTO;
class QueryConsumerGroupListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupDTO: 'ConsumerGroupDTO',
        };
    }
    static types() {
        return {
            consumerGroupDTO: { 'type': 'array', 'itemType': QueryConsumerGroupListResponseBodyDataConsumerGroupDTO },
        };
    }
}
exports.QueryConsumerGroupListResponseBodyData = QueryConsumerGroupListResponseBodyData;
class QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accumulatedConsumeCountPerMinute: 'AccumulatedConsumeCountPerMinute',
            clientId: 'ClientId',
            clientIpPort: 'ClientIpPort',
            onlineTime: 'OnlineTime',
            realTimeConsumeCountPerMinute: 'RealTimeConsumeCountPerMinute',
        };
    }
    static types() {
        return {
            accumulatedConsumeCountPerMinute: 'number',
            clientId: 'string',
            clientIpPort: 'string',
            onlineTime: 'number',
            realTimeConsumeCountPerMinute: 'number',
        };
    }
}
exports.QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo = QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo;
class QueryConsumerGroupStatusResponseBodyClientConnectionStatusList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumerGroupClientConnectionInfo: 'ConsumerGroupClientConnectionInfo',
        };
    }
    static types() {
        return {
            consumerGroupClientConnectionInfo: { 'type': 'array', 'itemType': QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo },
        };
    }
}
exports.QueryConsumerGroupStatusResponseBodyClientConnectionStatusList = QueryConsumerGroupStatusResponseBodyClientConnectionStatusList;
class QueryDetailSceneRuleLogResponseBodyDataLogList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            pkDn: 'PkDn',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            pkDn: 'string',
        };
    }
}
exports.QueryDetailSceneRuleLogResponseBodyDataLogList = QueryDetailSceneRuleLogResponseBodyDataLogList;
class QueryDetailSceneRuleLogResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            logList: 'LogList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            logList: { 'type': 'array', 'itemType': QueryDetailSceneRuleLogResponseBodyDataLogList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryDetailSceneRuleLogResponseBodyData = QueryDetailSceneRuleLogResponseBodyData;
class QueryDeviceResponseBodyDataDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceId: 'DeviceId',
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            deviceStatus: 'DeviceStatus',
            deviceType: 'DeviceType',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            iotId: 'IotId',
            nickname: 'Nickname',
            productKey: 'ProductKey',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            deviceId: 'string',
            deviceName: 'string',
            deviceSecret: 'string',
            deviceStatus: 'string',
            deviceType: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            iotId: 'string',
            nickname: 'string',
            productKey: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.QueryDeviceResponseBodyDataDeviceInfo = QueryDeviceResponseBodyDataDeviceInfo;
class QueryDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceInfo: 'DeviceInfo',
        };
    }
    static types() {
        return {
            deviceInfo: { 'type': 'array', 'itemType': QueryDeviceResponseBodyDataDeviceInfo },
        };
    }
}
exports.QueryDeviceResponseBodyData = QueryDeviceResponseBodyData;
class QueryDeviceBySQLResponseBodyDataGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
        };
    }
    static types() {
        return {
            groupId: 'string',
        };
    }
}
exports.QueryDeviceBySQLResponseBodyDataGroups = QueryDeviceBySQLResponseBodyDataGroups;
class QueryDeviceBySQLResponseBodyDataOTAModules extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            firmwareVersion: 'FirmwareVersion',
            moduleName: 'ModuleName',
        };
    }
    static types() {
        return {
            firmwareVersion: 'string',
            moduleName: 'string',
        };
    }
}
exports.QueryDeviceBySQLResponseBodyDataOTAModules = QueryDeviceBySQLResponseBodyDataOTAModules;
class QueryDeviceBySQLResponseBodyDataTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagName: 'TagName',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagName: 'string',
            tagValue: 'string',
        };
    }
}
exports.QueryDeviceBySQLResponseBodyDataTags = QueryDeviceBySQLResponseBodyDataTags;
class QueryDeviceBySQLResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTime: 'ActiveTime',
            deviceName: 'DeviceName',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            groups: 'Groups',
            iotId: 'IotId',
            nickname: 'Nickname',
            OTAModules: 'OTAModules',
            productKey: 'ProductKey',
            status: 'Status',
            tags: 'Tags',
        };
    }
    static types() {
        return {
            activeTime: 'string',
            deviceName: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            groups: { 'type': 'array', 'itemType': QueryDeviceBySQLResponseBodyDataGroups },
            iotId: 'string',
            nickname: 'string',
            OTAModules: { 'type': 'array', 'itemType': QueryDeviceBySQLResponseBodyDataOTAModules },
            productKey: 'string',
            status: 'string',
            tags: { 'type': 'array', 'itemType': QueryDeviceBySQLResponseBodyDataTags },
        };
    }
}
exports.QueryDeviceBySQLResponseBodyData = QueryDeviceBySQLResponseBodyData;
class QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            iotId: 'IotId',
            nickname: 'Nickname',
            productKey: 'ProductKey',
            status: 'Status',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceSecret: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            iotId: 'string',
            nickname: 'string',
            productKey: 'string',
            status: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo = QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo;
class QueryDeviceByStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleDeviceInfo: 'SimpleDeviceInfo',
        };
    }
    static types() {
        return {
            simpleDeviceInfo: { 'type': 'array', 'itemType': QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo },
        };
    }
}
exports.QueryDeviceByStatusResponseBodyData = QueryDeviceByStatusResponseBodyData;
class QueryDeviceByTagsRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.QueryDeviceByTagsRequestTag = QueryDeviceByTagsRequestTag;
class QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            productKey: 'ProductKey',
            productName: 'ProductName',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            productKey: 'string',
            productName: 'string',
        };
    }
}
exports.QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo = QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo;
class QueryDeviceByTagsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleDeviceInfo: 'SimpleDeviceInfo',
        };
    }
    static types() {
        return {
            simpleDeviceInfo: { 'type': 'array', 'itemType': QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo },
        };
    }
}
exports.QueryDeviceByTagsResponseBodyData = QueryDeviceByTagsResponseBodyData;
class QueryDeviceCertResponseBodyDeviceCertInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            certSN: 'CertSN',
            certificate: 'Certificate',
            privateKey: 'PrivateKey',
            status: 'Status',
        };
    }
    static types() {
        return {
            certSN: 'string',
            certificate: 'string',
            privateKey: 'string',
            status: 'number',
        };
    }
}
exports.QueryDeviceCertResponseBodyDeviceCertInfo = QueryDeviceCertResponseBodyDeviceCertInfo;
class QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataType: 'DataType',
            identifier: 'Identifier',
            name: 'Name',
            time: 'Time',
            unit: 'Unit',
            value: 'Value',
            version: 'Version',
        };
    }
    static types() {
        return {
            dataType: 'string',
            identifier: 'string',
            name: 'string',
            time: 'string',
            unit: 'string',
            value: 'string',
            version: 'number',
        };
    }
}
exports.QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo = QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo;
class QueryDeviceDesiredPropertyResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desiredPropertyInfo: 'DesiredPropertyInfo',
        };
    }
    static types() {
        return {
            desiredPropertyInfo: { 'type': 'array', 'itemType': QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo },
        };
    }
}
exports.QueryDeviceDesiredPropertyResponseBodyDataList = QueryDeviceDesiredPropertyResponseBodyDataList;
class QueryDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
        };
    }
    static types() {
        return {
            list: QueryDeviceDesiredPropertyResponseBodyDataList,
        };
    }
}
exports.QueryDeviceDesiredPropertyResponseBodyData = QueryDeviceDesiredPropertyResponseBodyData;
class QueryDeviceDetailResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            firmwareVersion: 'FirmwareVersion',
            gmtActive: 'GmtActive',
            gmtCreate: 'GmtCreate',
            gmtOnline: 'GmtOnline',
            iotId: 'IotId',
            ipAddress: 'IpAddress',
            nickname: 'Nickname',
            nodeType: 'NodeType',
            owner: 'Owner',
            productKey: 'ProductKey',
            productName: 'ProductName',
            region: 'Region',
            status: 'Status',
            utcActive: 'UtcActive',
            utcCreate: 'UtcCreate',
            utcOnline: 'UtcOnline',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceSecret: 'string',
            firmwareVersion: 'string',
            gmtActive: 'string',
            gmtCreate: 'string',
            gmtOnline: 'string',
            iotId: 'string',
            ipAddress: 'string',
            nickname: 'string',
            nodeType: 'number',
            owner: 'boolean',
            productKey: 'string',
            productName: 'string',
            region: 'string',
            status: 'string',
            utcActive: 'string',
            utcCreate: 'string',
            utcOnline: 'string',
        };
    }
}
exports.QueryDeviceDetailResponseBodyData = QueryDeviceDetailResponseBodyData;
class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetInstanceId: 'TargetInstanceId',
        };
    }
    static types() {
        return {
            targetInstanceId: 'string',
        };
    }
}
exports.QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs = QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs;
class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetInstanceConfigs: 'targetInstanceConfigs',
        };
    }
    static types() {
        return {
            targetInstanceConfigs: { 'type': 'array', 'itemType': QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs },
        };
    }
}
exports.QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs = QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs;
class QueryDeviceDistributeJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            jobId: 'JobId',
            productKey: 'ProductKey',
            sourceInstanceId: 'SourceInstanceId',
            sourceUid: 'SourceUid',
            status: 'Status',
            strategy: 'Strategy',
            targetInstanceConfigs: 'TargetInstanceConfigs',
            targetUid: 'TargetUid',
            total: 'Total',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            jobId: 'string',
            productKey: 'string',
            sourceInstanceId: 'string',
            sourceUid: 'string',
            status: 'number',
            strategy: 'number',
            targetInstanceConfigs: QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs,
            targetUid: 'string',
            total: 'number',
        };
    }
}
exports.QueryDeviceDistributeJobResponseBodyData = QueryDeviceDistributeJobResponseBodyData;
class QueryDeviceEventDataResponseBodyDataListEventInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventType: 'EventType',
            identifier: 'Identifier',
            name: 'Name',
            outputData: 'OutputData',
            time: 'Time',
        };
    }
    static types() {
        return {
            eventType: 'string',
            identifier: 'string',
            name: 'string',
            outputData: 'string',
            time: 'string',
        };
    }
}
exports.QueryDeviceEventDataResponseBodyDataListEventInfo = QueryDeviceEventDataResponseBodyDataListEventInfo;
class QueryDeviceEventDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventInfo: 'EventInfo',
        };
    }
    static types() {
        return {
            eventInfo: { 'type': 'array', 'itemType': QueryDeviceEventDataResponseBodyDataListEventInfo },
        };
    }
}
exports.QueryDeviceEventDataResponseBodyDataList = QueryDeviceEventDataResponseBodyDataList;
class QueryDeviceEventDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextTime: 'NextTime',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDeviceEventDataResponseBodyDataList,
            nextTime: 'number',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDeviceEventDataResponseBodyData = QueryDeviceEventDataResponseBodyData;
class QueryDeviceFileResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            downloadUrl: 'DownloadUrl',
            fileId: 'FileId',
            name: 'Name',
            size: 'Size',
            utcCreatedOn: 'UtcCreatedOn',
        };
    }
    static types() {
        return {
            downloadUrl: 'string',
            fileId: 'string',
            name: 'string',
            size: 'string',
            utcCreatedOn: 'string',
        };
    }
}
exports.QueryDeviceFileResponseBodyData = QueryDeviceFileResponseBodyData;
class QueryDeviceFileListResponseBodyDataFileSummary extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileId: 'FileId',
            name: 'Name',
            size: 'Size',
            utcCreatedOn: 'UtcCreatedOn',
        };
    }
    static types() {
        return {
            fileId: 'string',
            name: 'string',
            size: 'string',
            utcCreatedOn: 'string',
        };
    }
}
exports.QueryDeviceFileListResponseBodyDataFileSummary = QueryDeviceFileListResponseBodyDataFileSummary;
class QueryDeviceFileListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileSummary: 'FileSummary',
        };
    }
    static types() {
        return {
            fileSummary: { 'type': 'array', 'itemType': QueryDeviceFileListResponseBodyDataFileSummary },
        };
    }
}
exports.QueryDeviceFileListResponseBodyData = QueryDeviceFileListResponseBodyData;
class QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
            utcCreate: 'string',
        };
    }
}
exports.QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo = QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo;
class QueryDeviceGroupByDeviceResponseBodyGroupInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfo: 'GroupInfo',
        };
    }
    static types() {
        return {
            groupInfo: { 'type': 'array', 'itemType': QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo },
        };
    }
}
exports.QueryDeviceGroupByDeviceResponseBodyGroupInfos = QueryDeviceGroupByDeviceResponseBodyGroupInfos;
class QueryDeviceGroupByTagsRequestTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.QueryDeviceGroupByTagsRequestTag = QueryDeviceGroupByTagsRequestTag;
class QueryDeviceGroupByTagsResponseBodyDataDeviceGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.QueryDeviceGroupByTagsResponseBodyDataDeviceGroup = QueryDeviceGroupByTagsResponseBodyDataDeviceGroup;
class QueryDeviceGroupByTagsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceGroup: 'DeviceGroup',
        };
    }
    static types() {
        return {
            deviceGroup: { 'type': 'array', 'itemType': QueryDeviceGroupByTagsResponseBodyDataDeviceGroup },
        };
    }
}
exports.QueryDeviceGroupByTagsResponseBodyData = QueryDeviceGroupByTagsResponseBodyData;
class QueryDeviceGroupInfoResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceActive: 'DeviceActive',
            deviceCount: 'DeviceCount',
            deviceOnline: 'DeviceOnline',
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            deviceActive: 'number',
            deviceCount: 'number',
            deviceOnline: 'number',
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
            utcCreate: 'string',
        };
    }
}
exports.QueryDeviceGroupInfoResponseBodyData = QueryDeviceGroupInfoResponseBodyData;
class QueryDeviceGroupListResponseBodyDataGroupInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
            utcCreate: 'UtcCreate',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
            utcCreate: 'string',
        };
    }
}
exports.QueryDeviceGroupListResponseBodyDataGroupInfo = QueryDeviceGroupListResponseBodyDataGroupInfo;
class QueryDeviceGroupListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfo: 'GroupInfo',
        };
    }
    static types() {
        return {
            groupInfo: { 'type': 'array', 'itemType': QueryDeviceGroupListResponseBodyDataGroupInfo },
        };
    }
}
exports.QueryDeviceGroupListResponseBodyData = QueryDeviceGroupListResponseBodyData;
class QueryDeviceGroupTagListResponseBodyDataGroupTagInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.QueryDeviceGroupTagListResponseBodyDataGroupTagInfo = QueryDeviceGroupTagListResponseBodyDataGroupTagInfo;
class QueryDeviceGroupTagListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupTagInfo: 'GroupTagInfo',
        };
    }
    static types() {
        return {
            groupTagInfo: { 'type': 'array', 'itemType': QueryDeviceGroupTagListResponseBodyDataGroupTagInfo },
        };
    }
}
exports.QueryDeviceGroupTagListResponseBodyData = QueryDeviceGroupTagListResponseBodyData;
class QueryDeviceInfoResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            iotId: 'IotId',
            nickname: 'Nickname',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            deviceSecret: 'string',
            iotId: 'string',
            nickname: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryDeviceInfoResponseBodyData = QueryDeviceInfoResponseBodyData;
class QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            productKey: 'ProductKey',
            productName: 'ProductName',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            productKey: 'string',
            productName: 'string',
        };
    }
}
exports.QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo = QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo;
class QueryDeviceListByDeviceGroupResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            simpleDeviceInfo: 'SimpleDeviceInfo',
        };
    }
    static types() {
        return {
            simpleDeviceInfo: { 'type': 'array', 'itemType': QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo },
        };
    }
}
exports.QueryDeviceListByDeviceGroupResponseBodyData = QueryDeviceListByDeviceGroupResponseBodyData;
class QueryDeviceOriginalEventDataResponseBodyDataListEventInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventType: 'EventType',
            identifier: 'Identifier',
            name: 'Name',
            outputData: 'OutputData',
            time: 'Time',
        };
    }
    static types() {
        return {
            eventType: 'string',
            identifier: 'string',
            name: 'string',
            outputData: 'string',
            time: 'string',
        };
    }
}
exports.QueryDeviceOriginalEventDataResponseBodyDataListEventInfo = QueryDeviceOriginalEventDataResponseBodyDataListEventInfo;
class QueryDeviceOriginalEventDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventInfo: 'EventInfo',
        };
    }
    static types() {
        return {
            eventInfo: { 'type': 'array', 'itemType': QueryDeviceOriginalEventDataResponseBodyDataListEventInfo },
        };
    }
}
exports.QueryDeviceOriginalEventDataResponseBodyDataList = QueryDeviceOriginalEventDataResponseBodyDataList;
class QueryDeviceOriginalEventDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextPageToken: 'NextPageToken',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDeviceOriginalEventDataResponseBodyDataList,
            nextPageToken: 'string',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalEventDataResponseBodyData = QueryDeviceOriginalEventDataResponseBodyData;
class QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            time: 'Time',
            value: 'Value',
        };
    }
    static types() {
        return {
            time: 'string',
            value: 'string',
        };
    }
}
exports.QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo = QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo;
class QueryDeviceOriginalPropertyDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyInfo: 'PropertyInfo',
        };
    }
    static types() {
        return {
            propertyInfo: { 'type': 'array', 'itemType': QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo },
        };
    }
}
exports.QueryDeviceOriginalPropertyDataResponseBodyDataList = QueryDeviceOriginalPropertyDataResponseBodyDataList;
class QueryDeviceOriginalPropertyDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextValid: 'NextValid',
            nextPageToken: 'nextPageToken',
        };
    }
    static types() {
        return {
            list: QueryDeviceOriginalPropertyDataResponseBodyDataList,
            nextValid: 'boolean',
            nextPageToken: 'string',
        };
    }
}
exports.QueryDeviceOriginalPropertyDataResponseBodyData = QueryDeviceOriginalPropertyDataResponseBodyData;
class QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identifier: 'Identifier',
            time: 'Time',
            value: 'Value',
        };
    }
    static types() {
        return {
            identifier: 'string',
            time: 'number',
            value: 'string',
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo = QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo;
class QueryDeviceOriginalPropertyStatusResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyStatusDataInfo: 'PropertyStatusDataInfo',
        };
    }
    static types() {
        return {
            propertyStatusDataInfo: { 'type': 'array', 'itemType': QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo },
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusResponseBodyDataList = QueryDeviceOriginalPropertyStatusResponseBodyDataList;
class QueryDeviceOriginalPropertyStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextPageToken: 'NextPageToken',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDeviceOriginalPropertyStatusResponseBodyDataList,
            nextPageToken: 'string',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalPropertyStatusResponseBodyData = QueryDeviceOriginalPropertyStatusResponseBodyData;
class QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identifier: 'Identifier',
            inputData: 'InputData',
            name: 'Name',
            outputData: 'OutputData',
            time: 'Time',
        };
    }
    static types() {
        return {
            identifier: 'string',
            inputData: 'string',
            name: 'string',
            outputData: 'string',
            time: 'string',
        };
    }
}
exports.QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo = QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo;
class QueryDeviceOriginalServiceDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceInfo: 'ServiceInfo',
        };
    }
    static types() {
        return {
            serviceInfo: { 'type': 'array', 'itemType': QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo },
        };
    }
}
exports.QueryDeviceOriginalServiceDataResponseBodyDataList = QueryDeviceOriginalServiceDataResponseBodyDataList;
class QueryDeviceOriginalServiceDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextPageToken: 'NextPageToken',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDeviceOriginalServiceDataResponseBodyDataList,
            nextPageToken: 'string',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDeviceOriginalServiceDataResponseBodyData = QueryDeviceOriginalServiceDataResponseBodyData;
class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            time: 'Time',
            value: 'Value',
        };
    }
    static types() {
        return {
            time: 'number',
            value: 'string',
        };
    }
}
exports.QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo = QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo;
class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyInfo: 'PropertyInfo',
        };
    }
    static types() {
        return {
            propertyInfo: { 'type': 'array', 'itemType': QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo },
        };
    }
}
exports.QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList = QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList;
class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identifier: 'Identifier',
            list: 'List',
        };
    }
    static types() {
        return {
            identifier: 'string',
            list: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList,
        };
    }
}
exports.QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo = QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo;
class QueryDevicePropertiesDataResponseBodyPropertyDataInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyDataInfo: 'PropertyDataInfo',
        };
    }
    static types() {
        return {
            propertyDataInfo: { 'type': 'array', 'itemType': QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo },
        };
    }
}
exports.QueryDevicePropertiesDataResponseBodyPropertyDataInfos = QueryDevicePropertiesDataResponseBodyPropertyDataInfos;
class QueryDevicePropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            time: 'Time',
            value: 'Value',
        };
    }
    static types() {
        return {
            time: 'string',
            value: 'string',
        };
    }
}
exports.QueryDevicePropertyDataResponseBodyDataListPropertyInfo = QueryDevicePropertyDataResponseBodyDataListPropertyInfo;
class QueryDevicePropertyDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyInfo: 'PropertyInfo',
        };
    }
    static types() {
        return {
            propertyInfo: { 'type': 'array', 'itemType': QueryDevicePropertyDataResponseBodyDataListPropertyInfo },
        };
    }
}
exports.QueryDevicePropertyDataResponseBodyDataList = QueryDevicePropertyDataResponseBodyDataList;
class QueryDevicePropertyDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextTime: 'NextTime',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDevicePropertyDataResponseBodyDataList,
            nextTime: 'number',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDevicePropertyDataResponseBodyData = QueryDevicePropertyDataResponseBodyData;
class QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataType: 'DataType',
            identifier: 'Identifier',
            name: 'Name',
            time: 'Time',
            unit: 'Unit',
            value: 'Value',
        };
    }
    static types() {
        return {
            dataType: 'string',
            identifier: 'string',
            name: 'string',
            time: 'string',
            unit: 'string',
            value: 'string',
        };
    }
}
exports.QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo = QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo;
class QueryDevicePropertyStatusResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyStatusInfo: 'PropertyStatusInfo',
        };
    }
    static types() {
        return {
            propertyStatusInfo: { 'type': 'array', 'itemType': QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo },
        };
    }
}
exports.QueryDevicePropertyStatusResponseBodyDataList = QueryDevicePropertyStatusResponseBodyDataList;
class QueryDevicePropertyStatusResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
        };
    }
    static types() {
        return {
            list: QueryDevicePropertyStatusResponseBodyDataList,
        };
    }
}
exports.QueryDevicePropertyStatusResponseBodyData = QueryDevicePropertyStatusResponseBodyData;
class QueryDeviceServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            identifier: 'Identifier',
            inputData: 'InputData',
            name: 'Name',
            outputData: 'OutputData',
            time: 'Time',
        };
    }
    static types() {
        return {
            identifier: 'string',
            inputData: 'string',
            name: 'string',
            outputData: 'string',
            time: 'string',
        };
    }
}
exports.QueryDeviceServiceDataResponseBodyDataListServiceInfo = QueryDeviceServiceDataResponseBodyDataListServiceInfo;
class QueryDeviceServiceDataResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            serviceInfo: 'ServiceInfo',
        };
    }
    static types() {
        return {
            serviceInfo: { 'type': 'array', 'itemType': QueryDeviceServiceDataResponseBodyDataListServiceInfo },
        };
    }
}
exports.QueryDeviceServiceDataResponseBodyDataList = QueryDeviceServiceDataResponseBodyDataList;
class QueryDeviceServiceDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            nextTime: 'NextTime',
            nextValid: 'NextValid',
        };
    }
    static types() {
        return {
            list: QueryDeviceServiceDataResponseBodyDataList,
            nextTime: 'number',
            nextValid: 'boolean',
        };
    }
}
exports.QueryDeviceServiceDataResponseBodyData = QueryDeviceServiceDataResponseBodyData;
class QueryDeviceStatisticsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeCount: 'activeCount',
            deviceCount: 'deviceCount',
            onlineCount: 'onlineCount',
        };
    }
    static types() {
        return {
            activeCount: 'number',
            deviceCount: 'number',
            onlineCount: 'number',
        };
    }
}
exports.QueryDeviceStatisticsResponseBodyData = QueryDeviceStatisticsResponseBodyData;
class QueryEdgeDriverResponseBodyDataDriverList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cpuArch: 'CpuArch',
            driverId: 'DriverId',
            driverName: 'DriverName',
            driverProtocol: 'DriverProtocol',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            isBuiltIn: 'IsBuiltIn',
            runtime: 'Runtime',
            type: 'Type',
        };
    }
    static types() {
        return {
            cpuArch: 'string',
            driverId: 'string',
            driverName: 'string',
            driverProtocol: 'string',
            gmtCreateTimestamp: 'number',
            gmtModifiedTimestamp: 'number',
            isBuiltIn: 'boolean',
            runtime: 'string',
            type: 'number',
        };
    }
}
exports.QueryEdgeDriverResponseBodyDataDriverList = QueryEdgeDriverResponseBodyDataDriverList;
class QueryEdgeDriverResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            driverList: 'DriverList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            driverList: { 'type': 'array', 'itemType': QueryEdgeDriverResponseBodyDataDriverList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeDriverResponseBodyData = QueryEdgeDriverResponseBodyData;
class QueryEdgeDriverVersionResponseBodyDataDriverVersionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            argument: 'Argument',
            configCheckRule: 'ConfigCheckRule',
            containerConfig: 'ContainerConfig',
            description: 'Description',
            driverConfig: 'DriverConfig',
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            edgeVersion: 'EdgeVersion',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            sourceConfig: 'SourceConfig',
            versionState: 'VersionState',
        };
    }
    static types() {
        return {
            argument: 'string',
            configCheckRule: 'string',
            containerConfig: 'string',
            description: 'string',
            driverConfig: 'string',
            driverId: 'string',
            driverVersion: 'string',
            edgeVersion: 'string',
            gmtCreateTimestamp: 'number',
            gmtModifiedTimestamp: 'number',
            sourceConfig: 'string',
            versionState: 'string',
        };
    }
}
exports.QueryEdgeDriverVersionResponseBodyDataDriverVersionList = QueryEdgeDriverVersionResponseBodyDataDriverVersionList;
class QueryEdgeDriverVersionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            driverVersionList: 'DriverVersionList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            driverVersionList: { 'type': 'array', 'itemType': QueryEdgeDriverVersionResponseBodyDataDriverVersionList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeDriverVersionResponseBodyData = QueryEdgeDriverVersionResponseBodyData;
class QueryEdgeInstanceResponseBodyDataInstanceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizEnable: 'BizEnable',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            instanceId: 'InstanceId',
            latestDeploymentStatus: 'LatestDeploymentStatus',
            latestDeploymentType: 'LatestDeploymentType',
            name: 'Name',
            roleArn: 'RoleArn',
            roleAttachTime: 'RoleAttachTime',
            roleAttachTimestamp: 'RoleAttachTimestamp',
            roleName: 'RoleName',
            spec: 'Spec',
            tags: 'Tags',
            type: 'Type',
        };
    }
    static types() {
        return {
            bizEnable: 'boolean',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            instanceId: 'string',
            latestDeploymentStatus: 'number',
            latestDeploymentType: 'string',
            name: 'string',
            roleArn: 'string',
            roleAttachTime: 'string',
            roleAttachTimestamp: 'number',
            roleName: 'string',
            spec: 'number',
            tags: 'string',
            type: 'number',
        };
    }
}
exports.QueryEdgeInstanceResponseBodyDataInstanceList = QueryEdgeInstanceResponseBodyDataInstanceList;
class QueryEdgeInstanceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            instanceList: 'InstanceList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            instanceList: { 'type': 'array', 'itemType': QueryEdgeInstanceResponseBodyDataInstanceList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceResponseBodyData = QueryEdgeInstanceResponseBodyData;
class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configId: 'ConfigId',
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            configId: 'string',
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig = QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig;
class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            config: 'Config',
        };
    }
    static types() {
        return {
            config: { 'type': 'array', 'itemType': QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig },
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList = QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList;
class QueryEdgeInstanceChannelResponseBodyDataChannelListChannel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelId: 'ChannelId',
            channelName: 'ChannelName',
            configList: 'ConfigList',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
        };
    }
    static types() {
        return {
            channelId: 'string',
            channelName: 'string',
            configList: QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList,
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBodyDataChannelListChannel = QueryEdgeInstanceChannelResponseBodyDataChannelListChannel;
class QueryEdgeInstanceChannelResponseBodyDataChannelList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channel: 'Channel',
        };
    }
    static types() {
        return {
            channel: { 'type': 'array', 'itemType': QueryEdgeInstanceChannelResponseBodyDataChannelListChannel },
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBodyDataChannelList = QueryEdgeInstanceChannelResponseBodyDataChannelList;
class QueryEdgeInstanceChannelResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            channelList: 'ChannelList',
            currentPage: 'CurrentPage',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            channelList: QueryEdgeInstanceChannelResponseBodyDataChannelList,
            currentPage: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceChannelResponseBodyData = QueryEdgeInstanceChannelResponseBodyData;
class QueryEdgeInstanceDeviceResponseBodyDataDeviceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            driverId: 'DriverId',
            iotId: 'IotId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            driverId: 'string',
            iotId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryEdgeInstanceDeviceResponseBodyDataDeviceList = QueryEdgeInstanceDeviceResponseBodyDataDeviceList;
class QueryEdgeInstanceDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceList: 'DeviceList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceList: { 'type': 'array', 'itemType': QueryEdgeInstanceDeviceResponseBodyDataDeviceList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceDeviceResponseBodyData = QueryEdgeInstanceDeviceResponseBodyData;
class QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            iotId: 'string',
        };
    }
}
exports.QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList = QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList;
class QueryEdgeInstanceDeviceByDriverResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deviceList: 'DeviceList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deviceList: { 'type': 'array', 'itemType': QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceDeviceByDriverResponseBodyData = QueryEdgeInstanceDeviceByDriverResponseBodyData;
class QueryEdgeInstanceDriverResponseBodyDataDriverList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            driverId: 'DriverId',
            driverVersion: 'DriverVersion',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            orderId: 'OrderId',
        };
    }
    static types() {
        return {
            driverId: 'string',
            driverVersion: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            orderId: 'string',
        };
    }
}
exports.QueryEdgeInstanceDriverResponseBodyDataDriverList = QueryEdgeInstanceDriverResponseBodyDataDriverList;
class QueryEdgeInstanceDriverResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            driverList: 'DriverList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            driverList: { 'type': 'array', 'itemType': QueryEdgeInstanceDriverResponseBodyDataDriverList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceDriverResponseBodyData = QueryEdgeInstanceDriverResponseBodyData;
class QueryEdgeInstanceGatewayResponseBodyGatewayList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            edgeVersion: 'EdgeVersion',
            iotId: 'IotId',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            edgeVersion: 'string',
            iotId: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryEdgeInstanceGatewayResponseBodyGatewayList = QueryEdgeInstanceGatewayResponseBodyGatewayList;
class QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deploymentId: 'DeploymentId',
            description: 'Description',
            gmtCompleted: 'GmtCompleted',
            gmtCompletedTimestamp: 'GmtCompletedTimestamp',
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            deploymentId: 'string',
            description: 'string',
            gmtCompleted: 'string',
            gmtCompletedTimestamp: 'number',
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            status: 'number',
            type: 'string',
        };
    }
}
exports.QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList = QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList;
class QueryEdgeInstanceHistoricDeploymentResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            deploymentList: 'DeploymentList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            deploymentList: { 'type': 'array', 'itemType': QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList },
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceHistoricDeploymentResponseBodyData = QueryEdgeInstanceHistoricDeploymentResponseBodyData;
class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            qos: 'Qos',
            sourceApplicationName: 'SourceApplicationName',
            sourceFcFunctionName: 'SourceFcFunctionName',
            sourceFcServiceName: 'SourceFcServiceName',
            targetApplicationName: 'TargetApplicationName',
            targetFcFunctionName: 'TargetFcFunctionName',
            targetFcServiceName: 'TargetFcServiceName',
        };
    }
    static types() {
        return {
            qos: 'string',
            sourceApplicationName: 'string',
            sourceFcFunctionName: 'string',
            sourceFcServiceName: 'string',
            targetApplicationName: 'string',
            targetFcFunctionName: 'string',
            targetFcServiceName: 'string',
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext = QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext;
class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtCreateTimestamp: 'GmtCreateTimestamp',
            gmtModified: 'GmtModified',
            gmtModifiedTimestamp: 'GmtModifiedTimestamp',
            name: 'Name',
            routeContext: 'RouteContext',
            routeId: 'RouteId',
            sourceData: 'SourceData',
            sourceType: 'SourceType',
            targetData: 'TargetData',
            targetType: 'TargetType',
            topicFilter: 'TopicFilter',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtCreateTimestamp: 'number',
            gmtModified: 'string',
            gmtModifiedTimestamp: 'number',
            name: 'string',
            routeContext: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext,
            routeId: 'number',
            sourceData: 'string',
            sourceType: 'string',
            targetData: 'string',
            targetType: 'string',
            topicFilter: 'string',
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute = QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute;
class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageRoute: 'MessageRoute',
        };
    }
    static types() {
        return {
            messageRoute: { 'type': 'array', 'itemType': QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute },
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList = QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList;
class QueryEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            messageRouteList: 'MessageRouteList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            messageRouteList: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList,
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceMessageRoutingResponseBodyData = QueryEdgeInstanceMessageRoutingResponseBodyData;
class QueryEdgeInstanceSceneRuleResponseBodyDataRuleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            isExisted: 'IsExisted',
            ruleId: 'RuleId',
            ruleName: 'RuleName',
            status: 'Status',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            isExisted: 'number',
            ruleId: 'string',
            ruleName: 'string',
            status: 'number',
        };
    }
}
exports.QueryEdgeInstanceSceneRuleResponseBodyDataRuleList = QueryEdgeInstanceSceneRuleResponseBodyDataRuleList;
class QueryEdgeInstanceSceneRuleResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            pageSize: 'PageSize',
            ruleList: 'RuleList',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            pageSize: 'number',
            ruleList: { 'type': 'array', 'itemType': QueryEdgeInstanceSceneRuleResponseBodyDataRuleList },
            total: 'number',
        };
    }
}
exports.QueryEdgeInstanceSceneRuleResponseBodyData = QueryEdgeInstanceSceneRuleResponseBodyData;
class QueryJobResponseBodyDataJobFile extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileUrl: 'FileUrl',
            sign: 'Sign',
            signMethod: 'SignMethod',
        };
    }
    static types() {
        return {
            fileUrl: 'string',
            sign: 'string',
            signMethod: 'string',
        };
    }
}
exports.QueryJobResponseBodyDataJobFile = QueryJobResponseBodyDataJobFile;
class QueryJobResponseBodyDataRolloutConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maximumPerMinute: 'MaximumPerMinute',
        };
    }
    static types() {
        return {
            maximumPerMinute: 'number',
        };
    }
}
exports.QueryJobResponseBodyDataRolloutConfig = QueryJobResponseBodyDataRolloutConfig;
class QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            productKey: 'string',
        };
    }
}
exports.QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices = QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices;
class QueryJobResponseBodyDataTargetConfigTargetDevices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetDevices: 'targetDevices',
        };
    }
    static types() {
        return {
            targetDevices: { 'type': 'array', 'itemType': QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices },
        };
    }
}
exports.QueryJobResponseBodyDataTargetConfigTargetDevices = QueryJobResponseBodyDataTargetConfigTargetDevices;
class QueryJobResponseBodyDataTargetConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetDevices: 'TargetDevices',
            targetGroup: 'TargetGroup',
            targetProduct: 'TargetProduct',
            targetType: 'TargetType',
        };
    }
    static types() {
        return {
            targetDevices: QueryJobResponseBodyDataTargetConfigTargetDevices,
            targetGroup: 'string',
            targetProduct: 'string',
            targetType: 'string',
        };
    }
}
exports.QueryJobResponseBodyDataTargetConfig = QueryJobResponseBodyDataTargetConfig;
class QueryJobResponseBodyDataTimeoutConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inProgressTimeoutInMinutes: 'InProgressTimeoutInMinutes',
        };
    }
    static types() {
        return {
            inProgressTimeoutInMinutes: 'number',
        };
    }
}
exports.QueryJobResponseBodyDataTimeoutConfig = QueryJobResponseBodyDataTimeoutConfig;
class QueryJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            jobDocument: 'JobDocument',
            jobFile: 'JobFile',
            jobId: 'JobId',
            jobName: 'JobName',
            rolloutConfig: 'RolloutConfig',
            scheduledTime: 'ScheduledTime',
            status: 'Status',
            targetConfig: 'TargetConfig',
            timeoutConfig: 'TimeoutConfig',
            type: 'Type',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
        };
    }
    static types() {
        return {
            description: 'string',
            jobDocument: 'string',
            jobFile: QueryJobResponseBodyDataJobFile,
            jobId: 'string',
            jobName: 'string',
            rolloutConfig: QueryJobResponseBodyDataRolloutConfig,
            scheduledTime: 'number',
            status: 'string',
            targetConfig: QueryJobResponseBodyDataTargetConfig,
            timeoutConfig: QueryJobResponseBodyDataTimeoutConfig,
            type: 'string',
            utcCreate: 'string',
            utcModified: 'string',
        };
    }
}
exports.QueryJobResponseBodyData = QueryJobResponseBodyData;
class QueryJobStatisticsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cancelled: 'Cancelled',
            failed: 'Failed',
            inProgress: 'InProgress',
            queued: 'Queued',
            rejected: 'Rejected',
            sent: 'Sent',
            succeeded: 'Succeeded',
            timeOut: 'TimeOut',
            total: 'Total',
        };
    }
    static types() {
        return {
            cancelled: 'number',
            failed: 'number',
            inProgress: 'number',
            queued: 'number',
            rejected: 'number',
            sent: 'number',
            succeeded: 'number',
            timeOut: 'number',
            total: 'number',
        };
    }
}
exports.QueryJobStatisticsResponseBodyData = QueryJobStatisticsResponseBodyData;
class QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classMode: 'ClassMode',
            enabled: 'Enabled',
            joinPermissionId: 'JoinPermissionId',
            joinPermissionName: 'JoinPermissionName',
            joinPermissionType: 'JoinPermissionType',
            ownerAliyunPk: 'OwnerAliyunPk',
        };
    }
    static types() {
        return {
            classMode: 'string',
            enabled: 'boolean',
            joinPermissionId: 'string',
            joinPermissionName: 'string',
            joinPermissionType: 'string',
            ownerAliyunPk: 'string',
        };
    }
}
exports.QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission = QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission;
class QueryLoRaJoinPermissionsResponseBodyJoinPermissions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            joinPermission: 'JoinPermission',
        };
    }
    static types() {
        return {
            joinPermission: { 'type': 'array', 'itemType': QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission },
        };
    }
}
exports.QueryLoRaJoinPermissionsResponseBodyJoinPermissions = QueryLoRaJoinPermissionsResponseBodyJoinPermissions;
class QueryMessageInfoResponseBodyMessageUserProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.QueryMessageInfoResponseBodyMessageUserProperties = QueryMessageInfoResponseBodyMessageUserProperties;
class QueryMessageInfoResponseBodyMessage extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            generateTime: 'GenerateTime',
            messageContent: 'MessageContent',
            topicFullName: 'TopicFullName',
            uniMsgId: 'UniMsgId',
            userProperties: 'UserProperties',
        };
    }
    static types() {
        return {
            generateTime: 'number',
            messageContent: 'string',
            topicFullName: 'string',
            uniMsgId: 'string',
            userProperties: { 'type': 'array', 'itemType': QueryMessageInfoResponseBodyMessageUserProperties },
        };
    }
}
exports.QueryMessageInfoResponseBodyMessage = QueryMessageInfoResponseBodyMessage;
class QueryOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            firmwareDesc: 'FirmwareDesc',
            firmwareId: 'FirmwareId',
            firmwareName: 'FirmwareName',
            firmwareSign: 'FirmwareSign',
            firmwareSize: 'FirmwareSize',
            firmwareUrl: 'FirmwareUrl',
            moduleName: 'ModuleName',
            productKey: 'ProductKey',
            productName: 'ProductName',
            signMethod: 'SignMethod',
            srcVersion: 'SrcVersion',
            status: 'Status',
            type: 'Type',
            udi: 'Udi',
            utcCreate: 'UtcCreate',
            utcModified: 'UtcModified',
            verifyProgress: 'VerifyProgress',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            firmwareDesc: 'string',
            firmwareId: 'string',
            firmwareName: 'string',
            firmwareSign: 'string',
            firmwareSize: 'number',
            firmwareUrl: 'string',
            moduleName: 'string',
            productKey: 'string',
            productName: 'string',
            signMethod: 'string',
            srcVersion: 'string',
            status: 'number',
            type: 'number',
            udi: 'string',
            utcCreate: 'string',
            utcModified: 'string',
            verifyProgress: 'number',
        };
    }
}
exports.QueryOTAFirmwareResponseBodyFirmwareInfo = QueryOTAFirmwareResponseBodyFirmwareInfo;
class QueryOTAJobResponseBodyDataSrcVersions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            srcVersion: 'SrcVersion',
        };
    }
    static types() {
        return {
            srcVersion: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryOTAJobResponseBodyDataSrcVersions = QueryOTAJobResponseBodyDataSrcVersions;
class QueryOTAJobResponseBodyDataTagsOtaTagDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            key: 'Key',
            value: 'Value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
}
exports.QueryOTAJobResponseBodyDataTagsOtaTagDTO = QueryOTAJobResponseBodyDataTagsOtaTagDTO;
class QueryOTAJobResponseBodyDataTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            otaTagDTO: 'OtaTagDTO',
        };
    }
    static types() {
        return {
            otaTagDTO: { 'type': 'array', 'itemType': QueryOTAJobResponseBodyDataTagsOtaTagDTO },
        };
    }
}
exports.QueryOTAJobResponseBodyDataTags = QueryOTAJobResponseBodyDataTags;
class QueryOTAJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            destVersion: 'DestVersion',
            dynamicMode: 'DynamicMode',
            firmwareId: 'FirmwareId',
            grayPercent: 'GrayPercent',
            jobDesc: 'JobDesc',
            jobId: 'JobId',
            jobStatus: 'JobStatus',
            jobType: 'JobType',
            maximumPerMinute: 'MaximumPerMinute',
            name: 'Name',
            needConfirm: 'NeedConfirm',
            needPush: 'NeedPush',
            overwriteMode: 'OverwriteMode',
            productKey: 'ProductKey',
            retryCount: 'RetryCount',
            retryInterval: 'RetryInterval',
            selectionType: 'SelectionType',
            srcVersions: 'SrcVersions',
            tags: 'Tags',
            targetSelection: 'TargetSelection',
            timeoutInMinutes: 'TimeoutInMinutes',
            utcCreate: 'UtcCreate',
            utcEndTime: 'UtcEndTime',
            utcModified: 'UtcModified',
            utcScheduleFinishTime: 'UtcScheduleFinishTime',
            utcScheduleTime: 'UtcScheduleTime',
            utcStartTime: 'UtcStartTime',
        };
    }
    static types() {
        return {
            destVersion: 'string',
            dynamicMode: 'number',
            firmwareId: 'string',
            grayPercent: 'string',
            jobDesc: 'string',
            jobId: 'string',
            jobStatus: 'string',
            jobType: 'string',
            maximumPerMinute: 'number',
            name: 'string',
            needConfirm: 'boolean',
            needPush: 'boolean',
            overwriteMode: 'number',
            productKey: 'string',
            retryCount: 'number',
            retryInterval: 'number',
            selectionType: 'string',
            srcVersions: QueryOTAJobResponseBodyDataSrcVersions,
            tags: QueryOTAJobResponseBodyDataTags,
            targetSelection: 'string',
            timeoutInMinutes: 'number',
            utcCreate: 'string',
            utcEndTime: 'string',
            utcModified: 'string',
            utcScheduleFinishTime: 'string',
            utcScheduleTime: 'string',
            utcStartTime: 'string',
        };
    }
}
exports.QueryOTAJobResponseBodyData = QueryOTAJobResponseBodyData;
class QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceId: 'DeviceId',
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            iotId: 'IotId',
        };
    }
    static types() {
        return {
            deviceId: 'string',
            deviceName: 'string',
            deviceSecret: 'string',
            iotId: 'string',
        };
    }
}
exports.QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo = QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo;
class QueryPageByApplyIdResponseBodyApplyDeviceList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyDeviceInfo: 'ApplyDeviceInfo',
        };
    }
    static types() {
        return {
            applyDeviceInfo: { 'type': 'array', 'itemType': QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo },
        };
    }
}
exports.QueryPageByApplyIdResponseBodyApplyDeviceList = QueryPageByApplyIdResponseBodyApplyDeviceList;
class QueryProductResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliyunCommodityCode: 'AliyunCommodityCode',
            authType: 'AuthType',
            categoryKey: 'CategoryKey',
            categoryName: 'CategoryName',
            dataFormat: 'DataFormat',
            description: 'Description',
            deviceCount: 'DeviceCount',
            gmtCreate: 'GmtCreate',
            id2: 'Id2',
            netType: 'NetType',
            nodeType: 'NodeType',
            owner: 'Owner',
            productKey: 'ProductKey',
            productName: 'ProductName',
            productSecret: 'ProductSecret',
            productStatus: 'ProductStatus',
            protocolType: 'ProtocolType',
            validateType: 'ValidateType',
        };
    }
    static types() {
        return {
            aliyunCommodityCode: 'string',
            authType: 'string',
            categoryKey: 'string',
            categoryName: 'string',
            dataFormat: 'number',
            description: 'string',
            deviceCount: 'number',
            gmtCreate: 'number',
            id2: 'boolean',
            netType: 'number',
            nodeType: 'number',
            owner: 'boolean',
            productKey: 'string',
            productName: 'string',
            productSecret: 'string',
            productStatus: 'string',
            protocolType: 'string',
            validateType: 'number',
        };
    }
}
exports.QueryProductResponseBodyData = QueryProductResponseBodyData;
class QueryProductCertInfoResponseBodyProductCertInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            issueModel: 'IssueModel',
        };
    }
    static types() {
        return {
            issueModel: 'number',
        };
    }
}
exports.QueryProductCertInfoResponseBodyProductCertInfo = QueryProductCertInfoResponseBodyProductCertInfo;
class QueryProductListResponseBodyDataListProductInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authType: 'AuthType',
            dataFormat: 'DataFormat',
            description: 'Description',
            deviceCount: 'DeviceCount',
            gmtCreate: 'GmtCreate',
            nodeType: 'NodeType',
            productKey: 'ProductKey',
            productName: 'ProductName',
        };
    }
    static types() {
        return {
            authType: 'string',
            dataFormat: 'number',
            description: 'string',
            deviceCount: 'number',
            gmtCreate: 'number',
            nodeType: 'number',
            productKey: 'string',
            productName: 'string',
        };
    }
}
exports.QueryProductListResponseBodyDataListProductInfo = QueryProductListResponseBodyDataListProductInfo;
class QueryProductListResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productInfo: 'ProductInfo',
        };
    }
    static types() {
        return {
            productInfo: { 'type': 'array', 'itemType': QueryProductListResponseBodyDataListProductInfo },
        };
    }
}
exports.QueryProductListResponseBodyDataList = QueryProductListResponseBodyDataList;
class QueryProductListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            list: 'List',
            pageCount: 'PageCount',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            list: QueryProductListResponseBodyDataList,
            pageCount: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QueryProductListResponseBodyData = QueryProductListResponseBodyData;
class QueryProductTopicResponseBodyDataProductTopicInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'Desc',
            id: 'Id',
            operation: 'Operation',
            productKey: 'ProductKey',
            topicShortName: 'TopicShortName',
        };
    }
    static types() {
        return {
            desc: 'string',
            id: 'string',
            operation: 'string',
            productKey: 'string',
            topicShortName: 'string',
        };
    }
}
exports.QueryProductTopicResponseBodyDataProductTopicInfo = QueryProductTopicResponseBodyDataProductTopicInfo;
class QueryProductTopicResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productTopicInfo: 'ProductTopicInfo',
        };
    }
    static types() {
        return {
            productTopicInfo: { 'type': 'array', 'itemType': QueryProductTopicResponseBodyDataProductTopicInfo },
        };
    }
}
exports.QueryProductTopicResponseBodyData = QueryProductTopicResponseBodyData;
class QuerySceneRuleResponseBodyDataRuleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            ruleDescription: 'RuleDescription',
            ruleId: 'RuleId',
            ruleName: 'RuleName',
            ruleStatus: 'RuleStatus',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            gmtModified: 'number',
            ruleDescription: 'string',
            ruleId: 'string',
            ruleName: 'string',
            ruleStatus: 'number',
        };
    }
}
exports.QuerySceneRuleResponseBodyDataRuleList = QuerySceneRuleResponseBodyDataRuleList;
class QuerySceneRuleResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            pageSize: 'PageSize',
            ruleList: 'RuleList',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            pageSize: 'number',
            ruleList: { 'type': 'array', 'itemType': QuerySceneRuleResponseBodyDataRuleList },
            total: 'number',
        };
    }
}
exports.QuerySceneRuleResponseBodyData = QuerySceneRuleResponseBodyData;
class QuerySolutionDeviceGroupPageResponseBodyDataListItemName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCount: 'DeviceCount',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            deviceCount: 'number',
            gmtCreate: 'number',
            gmtModified: 'number',
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.QuerySolutionDeviceGroupPageResponseBodyDataListItemName = QuerySolutionDeviceGroupPageResponseBodyDataListItemName;
class QuerySolutionDeviceGroupPageResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemName: 'itemName',
        };
    }
    static types() {
        return {
            itemName: { 'type': 'array', 'itemType': QuerySolutionDeviceGroupPageResponseBodyDataListItemName },
        };
    }
}
exports.QuerySolutionDeviceGroupPageResponseBodyDataList = QuerySolutionDeviceGroupPageResponseBodyDataList;
class QuerySolutionDeviceGroupPageResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageId: 'PageId',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            list: QuerySolutionDeviceGroupPageResponseBodyDataList,
            pageId: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySolutionDeviceGroupPageResponseBodyData = QuerySolutionDeviceGroupPageResponseBodyData;
class QuerySpeechResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            audioFormat: 'AudioFormat',
            bizCode: 'BizCode',
            speechCode: 'SpeechCode',
            speechRate: 'SpeechRate',
            speechType: 'SpeechType',
            text: 'Text',
            voice: 'Voice',
            volume: 'Volume',
        };
    }
    static types() {
        return {
            audioFormat: 'string',
            bizCode: 'string',
            speechCode: 'string',
            speechRate: 'number',
            speechType: 'string',
            text: 'string',
            voice: 'string',
            volume: 'number',
        };
    }
}
exports.QuerySpeechResponseBodyData = QuerySpeechResponseBodyData;
class QuerySpeechListResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            speechCode: 'SpeechCode',
            text: 'Text',
            voice: 'Voice',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            speechCode: 'string',
            text: 'string',
            voice: 'string',
        };
    }
}
exports.QuerySpeechListResponseBodyDataListItemsSpeechListItems = QuerySpeechListResponseBodyDataListItemsSpeechListItems;
class QuerySpeechListResponseBodyDataListItemsSpeechList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechListResponseBodyDataListItemsSpeechListItems },
        };
    }
}
exports.QuerySpeechListResponseBodyDataListItemsSpeechList = QuerySpeechListResponseBodyDataListItemsSpeechList;
class QuerySpeechListResponseBodyDataListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            speechCode: 'SpeechCode',
            speechList: 'SpeechList',
            speechType: 'SpeechType',
            text: 'Text',
            voice: 'Voice',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            speechCode: 'string',
            speechList: QuerySpeechListResponseBodyDataListItemsSpeechList,
            speechType: 'string',
            text: 'string',
            voice: 'string',
        };
    }
}
exports.QuerySpeechListResponseBodyDataListItems = QuerySpeechListResponseBodyDataListItems;
class QuerySpeechListResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechListResponseBodyDataListItems },
        };
    }
}
exports.QuerySpeechListResponseBodyDataList = QuerySpeechListResponseBodyDataList;
class QuerySpeechListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageId: 'PageId',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            list: QuerySpeechListResponseBodyDataList,
            pageId: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySpeechListResponseBodyData = QuerySpeechListResponseBodyData;
class QuerySpeechPushJobResponseBodyDataListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'Code',
            createdTime: 'CreatedTime',
            deviceName: 'DeviceName',
            expiredTime: 'ExpiredTime',
            failDeviceNum: 'FailDeviceNum',
            groupId: 'GroupId',
            groupName: 'GroupName',
            iotId: 'IotId',
            productKey: 'ProductKey',
            pushMode: 'PushMode',
            runningDeviceNum: 'RunningDeviceNum',
            speechNum: 'SpeechNum',
            speechStatus: 'SpeechStatus',
            status: 'Status',
            successDeviceNum: 'SuccessDeviceNum',
            totalDeviceNum: 'TotalDeviceNum',
        };
    }
    static types() {
        return {
            code: 'string',
            createdTime: 'number',
            deviceName: 'string',
            expiredTime: 'number',
            failDeviceNum: 'number',
            groupId: 'string',
            groupName: 'string',
            iotId: 'string',
            productKey: 'string',
            pushMode: 'string',
            runningDeviceNum: 'number',
            speechNum: 'number',
            speechStatus: 'boolean',
            status: 'string',
            successDeviceNum: 'number',
            totalDeviceNum: 'number',
        };
    }
}
exports.QuerySpeechPushJobResponseBodyDataListItems = QuerySpeechPushJobResponseBodyDataListItems;
class QuerySpeechPushJobResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechPushJobResponseBodyDataListItems },
        };
    }
}
exports.QuerySpeechPushJobResponseBodyDataList = QuerySpeechPushJobResponseBodyDataList;
class QuerySpeechPushJobResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageId: 'PageId',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            list: QuerySpeechPushJobResponseBodyDataList,
            pageId: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySpeechPushJobResponseBodyData = QuerySpeechPushJobResponseBodyData;
class QuerySpeechPushJobDeviceResponseBodyDataListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            errorCode: 'ErrorCode',
            errorMessage: 'ErrorMessage',
            gmtModified: 'GmtModified',
            status: 'Status',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            errorCode: 'string',
            errorMessage: 'string',
            gmtModified: 'number',
            status: 'string',
        };
    }
}
exports.QuerySpeechPushJobDeviceResponseBodyDataListItems = QuerySpeechPushJobDeviceResponseBodyDataListItems;
class QuerySpeechPushJobDeviceResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechPushJobDeviceResponseBodyDataListItems },
        };
    }
}
exports.QuerySpeechPushJobDeviceResponseBodyDataList = QuerySpeechPushJobDeviceResponseBodyDataList;
class QuerySpeechPushJobDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageId: 'PageId',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            list: QuerySpeechPushJobDeviceResponseBodyDataList,
            pageId: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySpeechPushJobDeviceResponseBodyData = QuerySpeechPushJobDeviceResponseBodyData;
class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            text: 'Text',
            voice: 'Voice',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            text: 'string',
            voice: 'string',
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems = QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems;
class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems },
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList = QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList;
class QuerySpeechPushJobSpeechResponseBodyDataListItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizCode: 'BizCode',
            speechList: 'SpeechList',
            speechType: 'SpeechType',
            text: 'Text',
            voice: 'Voice',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            speechList: QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList,
            speechType: 'string',
            text: 'string',
            voice: 'string',
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBodyDataListItems = QuerySpeechPushJobSpeechResponseBodyDataListItems;
class QuerySpeechPushJobSpeechResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'Items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': QuerySpeechPushJobSpeechResponseBodyDataListItems },
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBodyDataList = QuerySpeechPushJobSpeechResponseBodyDataList;
class QuerySpeechPushJobSpeechResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageId: 'PageId',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            list: QuerySpeechPushJobSpeechResponseBodyDataList,
            pageId: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySpeechPushJobSpeechResponseBodyData = QuerySpeechPushJobSpeechResponseBodyData;
class QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            host: 'Host',
            id: 'Id',
            isBeian: 'IsBeian',
            projectId: 'ProjectId',
            protocol: 'Protocol',
            tenantId: 'TenantId',
        };
    }
    static types() {
        return {
            appId: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            host: 'string',
            id: 'number',
            isBeian: 'string',
            projectId: 'string',
            protocol: 'string',
            tenantId: 'string',
        };
    }
}
exports.QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo = QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo;
class QueryStudioAppDomainListOpenResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domainInfo: 'DomainInfo',
        };
    }
    static types() {
        return {
            domainInfo: { 'type': 'array', 'itemType': QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo },
        };
    }
}
exports.QueryStudioAppDomainListOpenResponseBodyDataList = QueryStudioAppDomainListOpenResponseBodyDataList;
class QueryStudioAppDomainListOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            total: 'Total',
            totalPage: 'TotalPage',
        };
    }
    static types() {
        return {
            list: QueryStudioAppDomainListOpenResponseBodyDataList,
            pageNo: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
}
exports.QueryStudioAppDomainListOpenResponseBodyData = QueryStudioAppDomainListOpenResponseBodyData;
class QueryStudioAppListResponseBodyDataListAppInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'AppId',
            appKey: 'AppKey',
            appSecret: 'AppSecret',
            description: 'Description',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            gmtRelease: 'GmtRelease',
            name: 'Name',
            projectId: 'ProjectId',
            type: 'Type',
        };
    }
    static types() {
        return {
            appId: 'string',
            appKey: 'string',
            appSecret: 'string',
            description: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            gmtRelease: 'string',
            name: 'string',
            projectId: 'string',
            type: 'string',
        };
    }
}
exports.QueryStudioAppListResponseBodyDataListAppInfo = QueryStudioAppListResponseBodyDataListAppInfo;
class QueryStudioAppListResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appInfo: 'AppInfo',
        };
    }
    static types() {
        return {
            appInfo: { 'type': 'array', 'itemType': QueryStudioAppListResponseBodyDataListAppInfo },
        };
    }
}
exports.QueryStudioAppListResponseBodyDataList = QueryStudioAppListResponseBodyDataList;
class QueryStudioAppListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            total: 'Total',
            totalPage: 'TotalPage',
        };
    }
    static types() {
        return {
            list: QueryStudioAppListResponseBodyDataList,
            pageNo: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
}
exports.QueryStudioAppListResponseBodyData = QueryStudioAppListResponseBodyData;
class QueryStudioAppPageListOpenResponseBodyDataListPageInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            id: 'Id',
            isHidden: 'IsHidden',
            isHome: 'IsHome',
            isLoginPage: 'IsLoginPage',
            name: 'Name',
            pageId: 'PageId',
            path: 'Path',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            isHidden: 'number',
            isHome: 'number',
            isLoginPage: 'number',
            name: 'string',
            pageId: 'string',
            path: 'string',
        };
    }
}
exports.QueryStudioAppPageListOpenResponseBodyDataListPageInfo = QueryStudioAppPageListOpenResponseBodyDataListPageInfo;
class QueryStudioAppPageListOpenResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageInfo: 'PageInfo',
        };
    }
    static types() {
        return {
            pageInfo: { 'type': 'array', 'itemType': QueryStudioAppPageListOpenResponseBodyDataListPageInfo },
        };
    }
}
exports.QueryStudioAppPageListOpenResponseBodyDataList = QueryStudioAppPageListOpenResponseBodyDataList;
class QueryStudioAppPageListOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            total: 'Total',
            totalPage: 'TotalPage',
        };
    }
    static types() {
        return {
            list: QueryStudioAppPageListOpenResponseBodyDataList,
            pageNo: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
}
exports.QueryStudioAppPageListOpenResponseBodyData = QueryStudioAppPageListOpenResponseBodyData;
class QueryStudioProjectListResponseBodyDataListProjectInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'Description',
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            name: 'Name',
            projectId: 'ProjectId',
        };
    }
    static types() {
        return {
            description: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            name: 'string',
            projectId: 'string',
        };
    }
}
exports.QueryStudioProjectListResponseBodyDataListProjectInfo = QueryStudioProjectListResponseBodyDataListProjectInfo;
class QueryStudioProjectListResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            projectInfo: 'ProjectInfo',
        };
    }
    static types() {
        return {
            projectInfo: { 'type': 'array', 'itemType': QueryStudioProjectListResponseBodyDataListProjectInfo },
        };
    }
}
exports.QueryStudioProjectListResponseBodyDataList = QueryStudioProjectListResponseBodyDataList;
class QueryStudioProjectListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'List',
            pageNo: 'PageNo',
            pageSize: 'PageSize',
            total: 'Total',
            totalPage: 'TotalPage',
        };
    }
    static types() {
        return {
            list: QueryStudioProjectListResponseBodyDataList,
            pageNo: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
}
exports.QueryStudioProjectListResponseBodyData = QueryStudioProjectListResponseBodyData;
class QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            logTime: 'LogTime',
            result: 'Result',
            traceId: 'TraceId',
        };
    }
    static types() {
        return {
            logTime: 'number',
            result: 'string',
            traceId: 'string',
        };
    }
}
exports.QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo = QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo;
class QuerySummarySceneRuleLogResponseBodyDataLogList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            logInfo: 'LogInfo',
        };
    }
    static types() {
        return {
            logInfo: { 'type': 'array', 'itemType': QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo },
        };
    }
}
exports.QuerySummarySceneRuleLogResponseBodyDataLogList = QuerySummarySceneRuleLogResponseBodyDataLogList;
class QuerySummarySceneRuleLogResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'CurrentPage',
            logList: 'LogList',
            pageSize: 'PageSize',
            total: 'Total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            logList: QuerySummarySceneRuleLogResponseBodyDataLogList,
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.QuerySummarySceneRuleLogResponseBodyData = QuerySummarySceneRuleLogResponseBodyData;
class QuerySuperDeviceGroupResponseBodyDataGroupInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupDesc: 'GroupDesc',
            groupId: 'GroupId',
            groupName: 'GroupName',
        };
    }
    static types() {
        return {
            groupDesc: 'string',
            groupId: 'string',
            groupName: 'string',
        };
    }
}
exports.QuerySuperDeviceGroupResponseBodyDataGroupInfo = QuerySuperDeviceGroupResponseBodyDataGroupInfo;
class QuerySuperDeviceGroupResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfo: 'GroupInfo',
        };
    }
    static types() {
        return {
            groupInfo: { 'type': 'array', 'itemType': QuerySuperDeviceGroupResponseBodyDataGroupInfo },
        };
    }
}
exports.QuerySuperDeviceGroupResponseBodyData = QuerySuperDeviceGroupResponseBodyData;
class QueryTaskResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceName: 'DeviceName',
            iotId: 'IotId',
            jobId: 'JobId',
            jobName: 'JobName',
            message: 'Message',
            productKey: 'ProductKey',
            progress: 'Progress',
            status: 'Status',
            statusDetail: 'StatusDetail',
            taskId: 'TaskId',
            utcModified: 'UtcModified',
            utcQueueTime: 'UtcQueueTime',
        };
    }
    static types() {
        return {
            deviceName: 'string',
            iotId: 'string',
            jobId: 'string',
            jobName: 'string',
            message: 'string',
            productKey: 'string',
            progress: 'string',
            status: 'string',
            statusDetail: 'string',
            taskId: 'string',
            utcModified: 'string',
            utcQueueTime: 'string',
        };
    }
}
exports.QueryTaskResponseBodyData = QueryTaskResponseBodyData;
class QueryThingModelResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            thingModelJson: 'ThingModelJson',
        };
    }
    static types() {
        return {
            thingModelJson: 'string',
        };
    }
}
exports.QueryThingModelResponseBodyData = QueryThingModelResponseBodyData;
class QueryThingModelExtendConfigResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configuration: 'Configuration',
        };
    }
    static types() {
        return {
            configuration: 'string',
        };
    }
}
exports.QueryThingModelExtendConfigResponseBodyData = QueryThingModelExtendConfigResponseBodyData;
class QueryThingModelExtendConfigPublishedResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            configuration: 'Configuration',
        };
    }
    static types() {
        return {
            configuration: 'string',
        };
    }
}
exports.QueryThingModelExtendConfigPublishedResponseBodyData = QueryThingModelExtendConfigPublishedResponseBodyData;
class QueryThingModelPublishedResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            thingModelJson: 'ThingModelJson',
        };
    }
    static types() {
        return {
            thingModelJson: 'string',
        };
    }
}
exports.QueryThingModelPublishedResponseBodyData = QueryThingModelPublishedResponseBodyData;
class QueryTopicReverseRouteTableResponseBodySrcTopics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            topic: 'Topic',
        };
    }
    static types() {
        return {
            topic: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.QueryTopicReverseRouteTableResponseBodySrcTopics = QueryTopicReverseRouteTableResponseBodySrcTopics;
class QueryTopicRouteTableResponseBodyDstTopics extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            topic: 'Topic',
        };
    }
    static types() {
        return {
            topic: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.QueryTopicRouteTableResponseBodyDstTopics = QueryTopicRouteTableResponseBodyDstTopics;
class RefreshStudioAppTokenOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            bizType: 'BizType',
            isEnable: 'IsEnable',
            token: 'Token',
            type: 'Type',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'string',
            isEnable: 'string',
            token: 'string',
            type: 'string',
        };
    }
}
exports.RefreshStudioAppTokenOpenResponseBodyData = RefreshStudioAppTokenOpenResponseBodyData;
class RegisterDeviceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            devEui: 'DevEui',
            deviceName: 'DeviceName',
            deviceSecret: 'DeviceSecret',
            iotId: 'IotId',
            joinEui: 'JoinEui',
            nickname: 'Nickname',
            productKey: 'ProductKey',
        };
    }
    static types() {
        return {
            devEui: 'string',
            deviceName: 'string',
            deviceSecret: 'string',
            iotId: 'string',
            joinEui: 'string',
            nickname: 'string',
            productKey: 'string',
        };
    }
}
exports.RegisterDeviceResponseBodyData = RegisterDeviceResponseBodyData;
class SetDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageId: 'MessageId',
            versions: 'Versions',
        };
    }
    static types() {
        return {
            messageId: 'string',
            versions: 'string',
        };
    }
}
exports.SetDeviceDesiredPropertyResponseBodyData = SetDeviceDesiredPropertyResponseBodyData;
class SetDevicePropertyResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageId: 'MessageId',
        };
    }
    static types() {
        return {
            messageId: 'string',
        };
    }
}
exports.SetDevicePropertyResponseBodyData = SetDevicePropertyResponseBodyData;
class SetEdgeInstanceDriverConfigsRequestConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.SetEdgeInstanceDriverConfigsRequestConfigs = SetEdgeInstanceDriverConfigsRequestConfigs;
class SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizId: 'BizId',
            bizType: 'BizType',
            isEnable: 'IsEnable',
            token: 'Token',
            type: 'Type',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'string',
            isEnable: 'string',
            token: 'string',
            type: 'string',
        };
    }
}
exports.SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo = SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo;
class SetupStudioAppAuthModeOpenResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authMode: 'AuthMode',
            tokenInfo: 'TokenInfo',
        };
    }
    static types() {
        return {
            authMode: 'number',
            tokenInfo: SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo,
        };
    }
}
exports.SetupStudioAppAuthModeOpenResponseBodyData = SetupStudioAppAuthModeOpenResponseBodyData;
class StartCpuResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            gmtCreate: 'GmtCreate',
            gmtModified: 'GmtModified',
            iotInstanceId: 'IotInstanceId',
            timeZone: 'TimeZone',
        };
    }
    static types() {
        return {
            gmtCreate: 'number',
            gmtModified: 'number',
            iotInstanceId: 'string',
            timeZone: 'string',
        };
    }
}
exports.StartCpuResponseBodyData = StartCpuResponseBodyData;
class SyncSpeechByCombinationResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceErrorCode: 'DeviceErrorCode',
            deviceErrorMessage: 'DeviceErrorMessage',
            id: 'Id',
            maxRetryCount: 'MaxRetryCount',
            retryCount: 'RetryCount',
            success: 'Success',
        };
    }
    static types() {
        return {
            deviceErrorCode: 'string',
            deviceErrorMessage: 'string',
            id: 'string',
            maxRetryCount: 'number',
            retryCount: 'number',
            success: 'boolean',
        };
    }
}
exports.SyncSpeechByCombinationResponseBodyData = SyncSpeechByCombinationResponseBodyData;
class TestSpeechResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.TestSpeechResponseBodyData = TestSpeechResponseBodyData;
class UpdateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'Content',
            format: 'Format',
            key: 'Key',
        };
    }
    static types() {
        return {
            content: 'string',
            format: 'string',
            key: 'string',
        };
    }
}
exports.UpdateEdgeInstanceChannelRequestConfigs = UpdateEdgeInstanceChannelRequestConfigs;
class UpdateProductTagsRequestProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.UpdateProductTagsRequestProductTag = UpdateProductTagsRequestProductTag;
class UpdateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            tagKey: 'TagKey',
            tagValue: 'TagValue',
        };
    }
    static types() {
        return {
            tagKey: 'string',
            tagValue: 'string',
        };
    }
}
exports.UpdateProductTagsResponseBodyInvalidProductTagsProductTag = UpdateProductTagsResponseBodyInvalidProductTagsProductTag;
class UpdateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            productTag: 'ProductTag',
        };
    }
    static types() {
        return {
            productTag: { 'type': 'array', 'itemType': UpdateProductTagsResponseBodyInvalidProductTagsProductTag },
        };
    }
}
exports.UpdateProductTagsResponseBodyInvalidProductTags = UpdateProductTagsResponseBodyInvalidProductTags;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "regional";
        this._endpointMap = {
            'ap-northeast-2-pop': "iot.aliyuncs.com",
            'ap-south-1': "iot.aliyuncs.com",
            'ap-southeast-2': "iot.aliyuncs.com",
            'ap-southeast-3': "iot.aliyuncs.com",
            'ap-southeast-5': "iot.aliyuncs.com",
            'cn-beijing-finance-1': "iot.aliyuncs.com",
            'cn-beijing-finance-pop': "iot.aliyuncs.com",
            'cn-beijing-gov-1': "iot.aliyuncs.com",
            'cn-beijing-nu16-b01': "iot.aliyuncs.com",
            'cn-chengdu': "iot.aliyuncs.com",
            'cn-edge-1': "iot.aliyuncs.com",
            'cn-fujian': "iot.aliyuncs.com",
            'cn-haidian-cm12-c01': "iot.aliyuncs.com",
            'cn-hangzhou-bj-b01': "iot.aliyuncs.com",
            'cn-hangzhou-finance': "iot.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "iot.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "iot.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "iot.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "iot.aliyuncs.com",
            'cn-hangzhou-test-306': "iot.aliyuncs.com",
            'cn-hongkong': "iot.aliyuncs.com",
            'cn-hongkong-finance-pop': "iot.aliyuncs.com",
            'cn-huhehaote': "iot.aliyuncs.com",
            'cn-huhehaote-nebula-1': "iot.aliyuncs.com",
            'cn-qingdao': "iot.aliyuncs.com",
            'cn-qingdao-nebula': "iot.aliyuncs.com",
            'cn-shanghai-et15-b01': "iot.aliyuncs.com",
            'cn-shanghai-et2-b01': "iot.aliyuncs.com",
            'cn-shanghai-finance-1': "iot.aliyuncs.com",
            'cn-shanghai-inner': "iot.aliyuncs.com",
            'cn-shanghai-internal-test-1': "iot.aliyuncs.com",
            'cn-shenzhen-finance-1': "iot.aliyuncs.com",
            'cn-shenzhen-inner': "iot.aliyuncs.com",
            'cn-shenzhen-st4-d01': "iot.aliyuncs.com",
            'cn-shenzhen-su18-b01': "iot.aliyuncs.com",
            'cn-wuhan': "iot.aliyuncs.com",
            'cn-wulanchabu': "iot.aliyuncs.com",
            'cn-yushanfang': "iot.aliyuncs.com",
            'cn-zhangbei': "iot.aliyuncs.com",
            'cn-zhangbei-na61-b01': "iot.aliyuncs.com",
            'cn-zhangjiakou': "iot.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "iot.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "iot.aliyuncs.com",
            'eu-west-1': "iot.aliyuncs.com",
            'eu-west-1-oxs': "iot.aliyuncs.com",
            'me-east-1': "iot.aliyuncs.com",
            'rus-west-1-pop': "iot.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("iot", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async addDataForApiSourceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.apiId)) {
            query["ApiId"] = request.apiId;
        }
        if (!tea_util_1.default.isUnset(request.content)) {
            query["Content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddDataForApiSource",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AddDataForApiSourceResponse({}));
    }
    async addDataForApiSource(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.addDataForApiSourceWithOptions(request, runtime);
    }
    async batchAddDeviceGroupRelationsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.device)) {
            query["Device"] = request.device;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchAddDeviceGroupRelations",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchAddDeviceGroupRelationsResponse({}));
    }
    async batchAddDeviceGroupRelations(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchAddDeviceGroupRelationsWithOptions(request, runtime);
    }
    async batchAddThingTopoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.gwDeviceName)) {
            query["GwDeviceName"] = request.gwDeviceName;
        }
        if (!tea_util_1.default.isUnset(request.gwProductKey)) {
            query["GwProductKey"] = request.gwProductKey;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.topoAddItem)) {
            query["TopoAddItem"] = request.topoAddItem;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchAddThingTopo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchAddThingTopoResponse({}));
    }
    async batchAddThingTopo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchAddThingTopoWithOptions(request, runtime);
    }
    async batchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchBindDeviceToEdgeInstanceWithDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchBindDeviceToEdgeInstanceWithDriverResponse({}));
    }
    async batchBindDeviceToEdgeInstanceWithDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime);
    }
    async batchBindDevicesIntoProjectWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.devices,
        });
        let params = new $OpenApi.Params({
            action: "BatchBindDevicesIntoProject",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchBindDevicesIntoProjectResponse({}));
    }
    async batchBindDevicesIntoProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchBindDevicesIntoProjectWithOptions(request, runtime);
    }
    async batchBindProductsIntoProjectWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "BatchBindProductsIntoProject",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchBindProductsIntoProjectResponse({}));
    }
    async batchBindProductsIntoProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchBindProductsIntoProjectWithOptions(request, runtime);
    }
    async batchCheckDeviceNamesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.deviceNameList)) {
            query["DeviceNameList"] = request.deviceNameList;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchCheckDeviceNames",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchCheckDeviceNamesResponse({}));
    }
    async batchCheckDeviceNames(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchCheckDeviceNamesWithOptions(request, runtime);
    }
    async batchClearEdgeInstanceDeviceConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchClearEdgeInstanceDeviceConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchClearEdgeInstanceDeviceConfigResponse({}));
    }
    async batchClearEdgeInstanceDeviceConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchClearEdgeInstanceDeviceConfigWithOptions(request, runtime);
    }
    async batchDeleteDeviceGroupRelationsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.device)) {
            query["Device"] = request.device;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteDeviceGroupRelations",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchDeleteDeviceGroupRelationsResponse({}));
    }
    async batchDeleteDeviceGroupRelations(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchDeleteDeviceGroupRelationsWithOptions(request, runtime);
    }
    async batchDeleteEdgeInstanceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelIds)) {
            query["ChannelIds"] = request.channelIds;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteEdgeInstanceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchDeleteEdgeInstanceChannelResponse({}));
    }
    async batchDeleteEdgeInstanceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchDeleteEdgeInstanceChannelWithOptions(request, runtime);
    }
    async batchGetDeviceBindStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetDeviceBindStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetDeviceBindStatusResponse({}));
    }
    async batchGetDeviceBindStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetDeviceBindStatusWithOptions(request, runtime);
    }
    async batchGetDeviceStateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetDeviceState",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetDeviceStateResponse({}));
    }
    async batchGetDeviceState(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetDeviceStateWithOptions(request, runtime);
    }
    async batchGetEdgeDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverIds)) {
            query["DriverIds"] = request.driverIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeDriverResponse({}));
    }
    async batchGetEdgeDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeDriverWithOptions(request, runtime);
    }
    async batchGetEdgeInstanceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelIds)) {
            query["ChannelIds"] = request.channelIds;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeInstanceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeInstanceChannelResponse({}));
    }
    async batchGetEdgeInstanceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeInstanceChannelWithOptions(request, runtime);
    }
    async batchGetEdgeInstanceDeviceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeInstanceDeviceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeInstanceDeviceChannelResponse({}));
    }
    async batchGetEdgeInstanceDeviceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeInstanceDeviceChannelWithOptions(request, runtime);
    }
    async batchGetEdgeInstanceDeviceConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeInstanceDeviceConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeInstanceDeviceConfigResponse({}));
    }
    async batchGetEdgeInstanceDeviceConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeInstanceDeviceConfigWithOptions(request, runtime);
    }
    async batchGetEdgeInstanceDeviceDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeInstanceDeviceDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeInstanceDeviceDriverResponse({}));
    }
    async batchGetEdgeInstanceDeviceDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeInstanceDeviceDriverWithOptions(request, runtime);
    }
    async batchGetEdgeInstanceDriverConfigsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverIds)) {
            query["DriverIds"] = request.driverIds;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetEdgeInstanceDriverConfigs",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchGetEdgeInstanceDriverConfigsResponse({}));
    }
    async batchGetEdgeInstanceDriverConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchGetEdgeInstanceDriverConfigsWithOptions(request, runtime);
    }
    async batchPubWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.messageContent)) {
            query["MessageContent"] = request.messageContent;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.qos)) {
            query["Qos"] = request.qos;
        }
        if (!tea_util_1.default.isUnset(request.topicShortName)) {
            query["TopicShortName"] = request.topicShortName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchPub",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchPubResponse({}));
    }
    async batchPub(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchPubWithOptions(request, runtime);
    }
    async batchQueryDeviceDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryDeviceDetail",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchQueryDeviceDetailResponse({}));
    }
    async batchQueryDeviceDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchQueryDeviceDetailWithOptions(request, runtime);
    }
    async batchRegisterDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.count)) {
            query["Count"] = request.count;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchRegisterDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchRegisterDeviceResponse({}));
    }
    async batchRegisterDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchRegisterDeviceWithOptions(request, runtime);
    }
    async batchRegisterDeviceWithApplyIdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applyId)) {
            query["ApplyId"] = request.applyId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchRegisterDeviceWithApplyId",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchRegisterDeviceWithApplyIdResponse({}));
    }
    async batchRegisterDeviceWithApplyId(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchRegisterDeviceWithApplyIdWithOptions(request, runtime);
    }
    async batchSetEdgeInstanceDeviceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelId)) {
            query["ChannelId"] = request.channelId;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchSetEdgeInstanceDeviceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchSetEdgeInstanceDeviceChannelResponse({}));
    }
    async batchSetEdgeInstanceDeviceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchSetEdgeInstanceDeviceChannelWithOptions(request, runtime);
    }
    async batchSetEdgeInstanceDeviceConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceConfigs)) {
            query["DeviceConfigs"] = request.deviceConfigs;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchSetEdgeInstanceDeviceConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchSetEdgeInstanceDeviceConfigResponse({}));
    }
    async batchSetEdgeInstanceDeviceConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchSetEdgeInstanceDeviceConfigWithOptions(request, runtime);
    }
    async batchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotIds)) {
            query["IotIds"] = request.iotIds;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchUnbindDeviceFromEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchUnbindDeviceFromEdgeInstanceResponse({}));
    }
    async batchUnbindDeviceFromEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime);
    }
    async batchUnbindProjectDevicesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.devices,
        });
        let params = new $OpenApi.Params({
            action: "BatchUnbindProjectDevices",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchUnbindProjectDevicesResponse({}));
    }
    async batchUnbindProjectDevices(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchUnbindProjectDevicesWithOptions(request, runtime);
    }
    async batchUnbindProjectProductsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "BatchUnbindProjectProducts",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchUnbindProjectProductsResponse({}));
    }
    async batchUnbindProjectProducts(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchUnbindProjectProductsWithOptions(request, runtime);
    }
    async batchUpdateDeviceNicknameWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceNicknameInfo)) {
            query["DeviceNicknameInfo"] = request.deviceNicknameInfo;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BatchUpdateDeviceNickname",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BatchUpdateDeviceNicknameResponse({}));
    }
    async batchUpdateDeviceNickname(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.batchUpdateDeviceNicknameWithOptions(request, runtime);
    }
    async bindApplicationToEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applicationId)) {
            query["ApplicationId"] = request.applicationId;
        }
        if (!tea_util_1.default.isUnset(request.applicationVersion)) {
            query["ApplicationVersion"] = request.applicationVersion;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindApplicationToEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BindApplicationToEdgeInstanceResponse({}));
    }
    async bindApplicationToEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindApplicationToEdgeInstanceWithOptions(request, runtime);
    }
    async bindDriverToEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            query["OrderId"] = request.orderId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindDriverToEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BindDriverToEdgeInstanceResponse({}));
    }
    async bindDriverToEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindDriverToEdgeInstanceWithOptions(request, runtime);
    }
    async bindGatewayToEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindGatewayToEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BindGatewayToEdgeInstanceResponse({}));
    }
    async bindGatewayToEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindGatewayToEdgeInstanceWithOptions(request, runtime);
    }
    async bindRoleToEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.roleArn)) {
            query["RoleArn"] = request.roleArn;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            query["RoleName"] = request.roleName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindRoleToEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BindRoleToEdgeInstanceResponse({}));
    }
    async bindRoleToEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindRoleToEdgeInstanceWithOptions(request, runtime);
    }
    async bindSceneRuleToEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindSceneRuleToEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new BindSceneRuleToEdgeInstanceResponse({}));
    }
    async bindSceneRuleToEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.bindSceneRuleToEdgeInstanceWithOptions(request, runtime);
    }
    async cancelJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CancelJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CancelJobResponse({}));
    }
    async cancelJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.cancelJobWithOptions(request, runtime);
    }
    async cancelOTAStrategyByJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CancelOTAStrategyByJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CancelOTAStrategyByJobResponse({}));
    }
    async cancelOTAStrategyByJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.cancelOTAStrategyByJobWithOptions(request, runtime);
    }
    async cancelOTATaskByDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CancelOTATaskByDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CancelOTATaskByDeviceResponse({}));
    }
    async cancelOTATaskByDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.cancelOTATaskByDeviceWithOptions(request, runtime);
    }
    async cancelOTATaskByJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cancelInProgressTask)) {
            query["CancelInProgressTask"] = request.cancelInProgressTask;
        }
        if (!tea_util_1.default.isUnset(request.cancelNotifiedTask)) {
            query["CancelNotifiedTask"] = request.cancelNotifiedTask;
        }
        if (!tea_util_1.default.isUnset(request.cancelQueuedTask)) {
            query["CancelQueuedTask"] = request.cancelQueuedTask;
        }
        if (!tea_util_1.default.isUnset(request.cancelScheduledTask)) {
            query["CancelScheduledTask"] = request.cancelScheduledTask;
        }
        if (!tea_util_1.default.isUnset(request.cancelUnconfirmedTask)) {
            query["CancelUnconfirmedTask"] = request.cancelUnconfirmedTask;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CancelOTATaskByJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CancelOTATaskByJobResponse({}));
    }
    async cancelOTATaskByJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.cancelOTATaskByJobWithOptions(request, runtime);
    }
    async cancelReleaseProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CancelReleaseProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CancelReleaseProductResponse({}));
    }
    async cancelReleaseProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.cancelReleaseProductWithOptions(request, runtime);
    }
    async clearEdgeInstanceDriverConfigsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ClearEdgeInstanceDriverConfigs",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ClearEdgeInstanceDriverConfigsResponse({}));
    }
    async clearEdgeInstanceDriverConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.clearEdgeInstanceDriverConfigsWithOptions(request, runtime);
    }
    async closeEdgeInstanceDeploymentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CloseEdgeInstanceDeployment",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CloseEdgeInstanceDeploymentResponse({}));
    }
    async closeEdgeInstanceDeployment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.closeEdgeInstanceDeploymentWithOptions(request, runtime);
    }
    async confirmOTATaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ConfirmOTATask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ConfirmOTATaskResponse({}));
    }
    async confirmOTATask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.confirmOTATaskWithOptions(request, runtime);
    }
    async copyThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.sourceModelVersion)) {
            query["SourceModelVersion"] = request.sourceModelVersion;
        }
        if (!tea_util_1.default.isUnset(request.sourceProductKey)) {
            query["SourceProductKey"] = request.sourceProductKey;
        }
        if (!tea_util_1.default.isUnset(request.targetProductKey)) {
            query["TargetProductKey"] = request.targetProductKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CopyThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CopyThingModelResponse({}));
    }
    async copyThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.copyThingModelWithOptions(request, runtime);
    }
    async createConsumerGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateConsumerGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateConsumerGroupResponse({}));
    }
    async createConsumerGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createConsumerGroupWithOptions(request, runtime);
    }
    async createConsumerGroupSubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.consumerGroupId)) {
            query["ConsumerGroupId"] = request.consumerGroupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateConsumerGroupSubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateConsumerGroupSubscribeRelationResponse({}));
    }
    async createConsumerGroupSubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createConsumerGroupSubscribeRelationWithOptions(request, runtime);
    }
    async createDataAPIServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.apiPath,
        });
        let params = new $OpenApi.Params({
            action: "CreateDataAPIService",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateDataAPIServiceResponse({}));
    }
    async createDataAPIService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createDataAPIServiceWithOptions(request, runtime);
    }
    async createDeviceDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.deviceName,
        });
        let params = new $OpenApi.Params({
            action: "CreateDeviceDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateDeviceDistributeJobResponse({}));
    }
    async createDeviceDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createDeviceDistributeJobWithOptions(request, runtime);
    }
    async createDeviceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupDesc)) {
            query["GroupDesc"] = request.groupDesc;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.superGroupId)) {
            query["SuperGroupId"] = request.superGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateDeviceGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateDeviceGroupResponse({}));
    }
    async createDeviceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createDeviceGroupWithOptions(request, runtime);
    }
    async createEdgeDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cpuArch)) {
            query["CpuArch"] = request.cpuArch;
        }
        if (!tea_util_1.default.isUnset(request.driverName)) {
            query["DriverName"] = request.driverName;
        }
        if (!tea_util_1.default.isUnset(request.driverProtocol)) {
            query["DriverProtocol"] = request.driverProtocol;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.isBuiltIn)) {
            query["IsBuiltIn"] = request.isBuiltIn;
        }
        if (!tea_util_1.default.isUnset(request.runtime)) {
            query["Runtime"] = request.runtime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeDriverResponse({}));
    }
    async createEdgeDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeDriverWithOptions(request, runtime);
    }
    async createEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.argument)) {
            query["Argument"] = request.argument;
        }
        if (!tea_util_1.default.isUnset(request.configCheckRule)) {
            query["ConfigCheckRule"] = request.configCheckRule;
        }
        if (!tea_util_1.default.isUnset(request.containerConfig)) {
            query["ContainerConfig"] = request.containerConfig;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.driverConfig)) {
            query["DriverConfig"] = request.driverConfig;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.edgeVersion)) {
            query["EdgeVersion"] = request.edgeVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.sourceConfig)) {
            query["SourceConfig"] = request.sourceConfig;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeDriverVersionResponse({}));
    }
    async createEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeDriverVersionWithOptions(request, runtime);
    }
    async createEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.spec)) {
            query["Spec"] = request.spec;
        }
        if (!tea_util_1.default.isUnset(request.tags)) {
            query["Tags"] = request.tags;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeInstanceResponse({}));
    }
    async createEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeInstanceWithOptions(request, runtime);
    }
    async createEdgeInstanceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelName)) {
            query["ChannelName"] = request.channelName;
        }
        if (!tea_util_1.default.isUnset(request.configs)) {
            query["Configs"] = request.configs;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeInstanceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeInstanceChannelResponse({}));
    }
    async createEdgeInstanceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeInstanceChannelWithOptions(request, runtime);
    }
    async createEdgeInstanceDeploymentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeInstanceDeployment",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeInstanceDeploymentResponse({}));
    }
    async createEdgeInstanceDeployment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeInstanceDeploymentWithOptions(request, runtime);
    }
    async createEdgeInstanceMessageRoutingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.sourceData)) {
            query["SourceData"] = request.sourceData;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["SourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.targetData)) {
            query["TargetData"] = request.targetData;
        }
        if (!tea_util_1.default.isUnset(request.targetIotHubQos)) {
            query["TargetIotHubQos"] = request.targetIotHubQos;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            query["TargetType"] = request.targetType;
        }
        if (!tea_util_1.default.isUnset(request.topicFilter)) {
            query["TopicFilter"] = request.topicFilter;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeInstanceMessageRouting",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeInstanceMessageRoutingResponse({}));
    }
    async createEdgeInstanceMessageRouting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeInstanceMessageRoutingWithOptions(request, runtime);
    }
    async createEdgeOssPreSignedAddressWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["FileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceId)) {
            query["ResourceId"] = request.resourceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceVersion)) {
            query["ResourceVersion"] = request.resourceVersion;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateEdgeOssPreSignedAddress",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateEdgeOssPreSignedAddressResponse({}));
    }
    async createEdgeOssPreSignedAddress(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createEdgeOssPreSignedAddressWithOptions(request, runtime);
    }
    async createJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobDocument)) {
            query["JobDocument"] = request.jobDocument;
        }
        if (!tea_util_1.default.isUnset(request.jobFile)) {
            query["JobFile"] = request.jobFile;
        }
        if (!tea_util_1.default.isUnset(request.jobName)) {
            query["JobName"] = request.jobName;
        }
        if (!tea_util_1.default.isUnset(request.rolloutConfig)) {
            query["RolloutConfig"] = request.rolloutConfig;
        }
        if (!tea_util_1.default.isUnset(request.scheduledTime)) {
            query["ScheduledTime"] = request.scheduledTime;
        }
        if (!tea_util_1.default.isUnset(request.targetConfig)) {
            query["TargetConfig"] = request.targetConfig;
        }
        if (!tea_util_1.default.isUnset(request.timeoutConfig)) {
            query["TimeoutConfig"] = request.timeoutConfig;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateJobResponse({}));
    }
    async createJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createJobWithOptions(request, runtime);
    }
    async createLoRaNodesTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceInfo)) {
            query["DeviceInfo"] = request.deviceInfo;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateLoRaNodesTask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateLoRaNodesTaskResponse({}));
    }
    async createLoRaNodesTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createLoRaNodesTaskWithOptions(request, runtime);
    }
    async createOTADynamicUpgradeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dynamicMode)) {
            query["DynamicMode"] = request.dynamicMode;
        }
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.maximumPerMinute)) {
            query["MaximumPerMinute"] = request.maximumPerMinute;
        }
        if (!tea_util_1.default.isUnset(request.needConfirm)) {
            query["NeedConfirm"] = request.needConfirm;
        }
        if (!tea_util_1.default.isUnset(request.needPush)) {
            query["NeedPush"] = request.needPush;
        }
        if (!tea_util_1.default.isUnset(request.overwriteMode)) {
            query["OverwriteMode"] = request.overwriteMode;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.retryCount)) {
            query["RetryCount"] = request.retryCount;
        }
        if (!tea_util_1.default.isUnset(request.retryInterval)) {
            query["RetryInterval"] = request.retryInterval;
        }
        if (!tea_util_1.default.isUnset(request.srcVersion)) {
            query["SrcVersion"] = request.srcVersion;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        if (!tea_util_1.default.isUnset(request.timeoutInMinutes)) {
            query["TimeoutInMinutes"] = request.timeoutInMinutes;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateOTADynamicUpgradeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOTADynamicUpgradeJobResponse({}));
    }
    async createOTADynamicUpgradeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOTADynamicUpgradeJobWithOptions(request, runtime);
    }
    async createOTAFirmwareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.destVersion)) {
            query["DestVersion"] = request.destVersion;
        }
        if (!tea_util_1.default.isUnset(request.firmwareDesc)) {
            query["FirmwareDesc"] = request.firmwareDesc;
        }
        if (!tea_util_1.default.isUnset(request.firmwareName)) {
            query["FirmwareName"] = request.firmwareName;
        }
        if (!tea_util_1.default.isUnset(request.firmwareSign)) {
            query["FirmwareSign"] = request.firmwareSign;
        }
        if (!tea_util_1.default.isUnset(request.firmwareSize)) {
            query["FirmwareSize"] = request.firmwareSize;
        }
        if (!tea_util_1.default.isUnset(request.firmwareUrl)) {
            query["FirmwareUrl"] = request.firmwareUrl;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.moduleName)) {
            query["ModuleName"] = request.moduleName;
        }
        if (!tea_util_1.default.isUnset(request.needToVerify)) {
            query["NeedToVerify"] = request.needToVerify;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.signMethod)) {
            query["SignMethod"] = request.signMethod;
        }
        if (!tea_util_1.default.isUnset(request.srcVersion)) {
            query["SrcVersion"] = request.srcVersion;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.udi)) {
            query["Udi"] = request.udi;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateOTAFirmware",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOTAFirmwareResponse({}));
    }
    async createOTAFirmware(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOTAFirmwareWithOptions(request, runtime);
    }
    async createOTAModuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.aliasName)) {
            query["AliasName"] = request.aliasName;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            query["Desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.moduleName)) {
            query["ModuleName"] = request.moduleName;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateOTAModule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOTAModuleResponse({}));
    }
    async createOTAModule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOTAModuleWithOptions(request, runtime);
    }
    async createOTAStaticUpgradeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dnListFileUrl)) {
            query["DnListFileUrl"] = request.dnListFileUrl;
        }
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.grayPercent)) {
            query["GrayPercent"] = request.grayPercent;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.maximumPerMinute)) {
            query["MaximumPerMinute"] = request.maximumPerMinute;
        }
        if (!tea_util_1.default.isUnset(request.needConfirm)) {
            query["NeedConfirm"] = request.needConfirm;
        }
        if (!tea_util_1.default.isUnset(request.needPush)) {
            query["NeedPush"] = request.needPush;
        }
        if (!tea_util_1.default.isUnset(request.overwriteMode)) {
            query["OverwriteMode"] = request.overwriteMode;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.retryCount)) {
            query["RetryCount"] = request.retryCount;
        }
        if (!tea_util_1.default.isUnset(request.retryInterval)) {
            query["RetryInterval"] = request.retryInterval;
        }
        if (!tea_util_1.default.isUnset(request.scheduleFinishTime)) {
            query["ScheduleFinishTime"] = request.scheduleFinishTime;
        }
        if (!tea_util_1.default.isUnset(request.scheduleTime)) {
            query["ScheduleTime"] = request.scheduleTime;
        }
        if (!tea_util_1.default.isUnset(request.srcVersion)) {
            query["SrcVersion"] = request.srcVersion;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        if (!tea_util_1.default.isUnset(request.targetDeviceName)) {
            query["TargetDeviceName"] = request.targetDeviceName;
        }
        if (!tea_util_1.default.isUnset(request.targetSelection)) {
            query["TargetSelection"] = request.targetSelection;
        }
        if (!tea_util_1.default.isUnset(request.timeoutInMinutes)) {
            query["TimeoutInMinutes"] = request.timeoutInMinutes;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateOTAStaticUpgradeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOTAStaticUpgradeJobResponse({}));
    }
    async createOTAStaticUpgradeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOTAStaticUpgradeJobWithOptions(request, runtime);
    }
    async createOTAVerifyJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.needConfirm)) {
            query["NeedConfirm"] = request.needConfirm;
        }
        if (!tea_util_1.default.isUnset(request.needPush)) {
            query["NeedPush"] = request.needPush;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.targetDeviceName)) {
            query["TargetDeviceName"] = request.targetDeviceName;
        }
        if (!tea_util_1.default.isUnset(request.timeoutInMinutes)) {
            query["TimeoutInMinutes"] = request.timeoutInMinutes;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateOTAVerifyJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateOTAVerifyJobResponse({}));
    }
    async createOTAVerifyJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createOTAVerifyJobWithOptions(request, runtime);
    }
    async createProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.aliyunCommodityCode)) {
            query["AliyunCommodityCode"] = request.aliyunCommodityCode;
        }
        if (!tea_util_1.default.isUnset(request.authType)) {
            query["AuthType"] = request.authType;
        }
        if (!tea_util_1.default.isUnset(request.categoryKey)) {
            query["CategoryKey"] = request.categoryKey;
        }
        if (!tea_util_1.default.isUnset(request.dataFormat)) {
            query["DataFormat"] = request.dataFormat;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.id2)) {
            query["Id2"] = request.id2;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.joinPermissionId)) {
            query["JoinPermissionId"] = request.joinPermissionId;
        }
        if (!tea_util_1.default.isUnset(request.netType)) {
            query["NetType"] = request.netType;
        }
        if (!tea_util_1.default.isUnset(request.nodeType)) {
            query["NodeType"] = request.nodeType;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            query["ProductName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.protocolType)) {
            query["ProtocolType"] = request.protocolType;
        }
        if (!tea_util_1.default.isUnset(request.publishAuto)) {
            query["PublishAuto"] = request.publishAuto;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.validateType)) {
            query["ValidateType"] = request.validateType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateProductResponse({}));
    }
    async createProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createProductWithOptions(request, runtime);
    }
    async createProductDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.sourceInstanceId)) {
            query["SourceInstanceId"] = request.sourceInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetAliyunId)) {
            query["TargetAliyunId"] = request.targetAliyunId;
        }
        if (!tea_util_1.default.isUnset(request.targetInstanceId)) {
            query["TargetInstanceId"] = request.targetInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetUid)) {
            query["TargetUid"] = request.targetUid;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateProductDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateProductDistributeJobResponse({}));
    }
    async createProductDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createProductDistributeJobWithOptions(request, runtime);
    }
    async createProductTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.productTag)) {
            query["ProductTag"] = request.productTag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateProductTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateProductTagsResponse({}));
    }
    async createProductTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createProductTagsWithOptions(request, runtime);
    }
    async createProductTopicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.desc)) {
            query["Desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.operation)) {
            query["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.topicShortName)) {
            query["TopicShortName"] = request.topicShortName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateProductTopic",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateProductTopicResponse({}));
    }
    async createProductTopic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createProductTopicWithOptions(request, runtime);
    }
    async createRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dataType)) {
            query["DataType"] = request.dataType;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.ruleDesc)) {
            query["RuleDesc"] = request.ruleDesc;
        }
        if (!tea_util_1.default.isUnset(request.select)) {
            query["Select"] = request.select;
        }
        if (!tea_util_1.default.isUnset(request.shortTopic)) {
            query["ShortTopic"] = request.shortTopic;
        }
        if (!tea_util_1.default.isUnset(request.topic)) {
            query["Topic"] = request.topic;
        }
        if (!tea_util_1.default.isUnset(request.topicType)) {
            query["TopicType"] = request.topicType;
        }
        if (!tea_util_1.default.isUnset(request.where)) {
            query["Where"] = request.where;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateRuleResponse({}));
    }
    async createRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createRuleWithOptions(request, runtime);
    }
    async createRuleActionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.configuration)) {
            query["Configuration"] = request.configuration;
        }
        if (!tea_util_1.default.isUnset(request.errorActionFlag)) {
            query["ErrorActionFlag"] = request.errorActionFlag;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateRuleAction",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateRuleActionResponse({}));
    }
    async createRuleAction(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createRuleActionWithOptions(request, runtime);
    }
    async createRulengDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.sourceInstanceId)) {
            query["SourceInstanceId"] = request.sourceInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetInstanceId)) {
            query["TargetInstanceId"] = request.targetInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateRulengDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateRulengDistributeJobResponse({}));
    }
    async createRulengDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createRulengDistributeJobWithOptions(request, runtime);
    }
    async createSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleContent)) {
            query["RuleContent"] = request.ruleContent;
        }
        if (!tea_util_1.default.isUnset(request.ruleDescription)) {
            query["RuleDescription"] = request.ruleDescription;
        }
        if (!tea_util_1.default.isUnset(request.ruleName)) {
            query["RuleName"] = request.ruleName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateSceneRuleResponse({}));
    }
    async createSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createSceneRuleWithOptions(request, runtime);
    }
    async createSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.bizCode,
        });
        let params = new $OpenApi.Params({
            action: "CreateSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateSpeechResponse({}));
    }
    async createSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createSpeechWithOptions(request, runtime);
    }
    async createStudioAppDomainOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "CreateStudioAppDomainOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateStudioAppDomainOpenResponse({}));
    }
    async createStudioAppDomainOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createStudioAppDomainOpenWithOptions(request, runtime);
    }
    async createSubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.consumerGroupIds)) {
            query["ConsumerGroupIds"] = request.consumerGroupIds;
        }
        if (!tea_util_1.default.isUnset(request.deviceDataFlag)) {
            query["DeviceDataFlag"] = request.deviceDataFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceLifeCycleFlag)) {
            query["DeviceLifeCycleFlag"] = request.deviceLifeCycleFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceStatusChangeFlag)) {
            query["DeviceStatusChangeFlag"] = request.deviceStatusChangeFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceTagFlag)) {
            query["DeviceTagFlag"] = request.deviceTagFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceTopoLifeCycleFlag)) {
            query["DeviceTopoLifeCycleFlag"] = request.deviceTopoLifeCycleFlag;
        }
        if (!tea_util_1.default.isUnset(request.foundDeviceListFlag)) {
            query["FoundDeviceListFlag"] = request.foundDeviceListFlag;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.mnsConfiguration)) {
            query["MnsConfiguration"] = request.mnsConfiguration;
        }
        if (!tea_util_1.default.isUnset(request.otaEventFlag)) {
            query["OtaEventFlag"] = request.otaEventFlag;
        }
        if (!tea_util_1.default.isUnset(request.otaJobFlag)) {
            query["OtaJobFlag"] = request.otaJobFlag;
        }
        if (!tea_util_1.default.isUnset(request.otaVersionFlag)) {
            query["OtaVersionFlag"] = request.otaVersionFlag;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.thingHistoryFlag)) {
            query["ThingHistoryFlag"] = request.thingHistoryFlag;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateSubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateSubscribeRelationResponse({}));
    }
    async createSubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createSubscribeRelationWithOptions(request, runtime);
    }
    async createThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockName)) {
            query["FunctionBlockName"] = request.functionBlockName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.thingModelJson)) {
            query["ThingModelJson"] = request.thingModelJson;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateThingModelResponse({}));
    }
    async createThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createThingModelWithOptions(request, runtime);
    }
    async createThingScriptWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.scriptContent)) {
            query["ScriptContent"] = request.scriptContent;
        }
        if (!tea_util_1.default.isUnset(request.scriptType)) {
            query["ScriptType"] = request.scriptType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateThingScript",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateThingScriptResponse({}));
    }
    async createThingScript(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createThingScriptWithOptions(request, runtime);
    }
    async createTopicRouteTableWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dstTopic)) {
            query["DstTopic"] = request.dstTopic;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.srcTopic)) {
            query["SrcTopic"] = request.srcTopic;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CreateTopicRouteTable",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateTopicRouteTableResponse({}));
    }
    async createTopicRouteTable(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createTopicRouteTableWithOptions(request, runtime);
    }
    async deleteConsumerGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteConsumerGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteConsumerGroupResponse({}));
    }
    async deleteConsumerGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteConsumerGroupWithOptions(request, runtime);
    }
    async deleteConsumerGroupSubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.consumerGroupId)) {
            query["ConsumerGroupId"] = request.consumerGroupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteConsumerGroupSubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteConsumerGroupSubscribeRelationResponse({}));
    }
    async deleteConsumerGroupSubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteConsumerGroupSubscribeRelationWithOptions(request, runtime);
    }
    async deleteDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDeviceResponse({}));
    }
    async deleteDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDeviceWithOptions(request, runtime);
    }
    async deleteDeviceDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDeviceDistributeJobResponse({}));
    }
    async deleteDeviceDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDeviceDistributeJobWithOptions(request, runtime);
    }
    async deleteDeviceFileWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.fileId)) {
            query["FileId"] = request.fileId;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceFile",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDeviceFileResponse({}));
    }
    async deleteDeviceFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDeviceFileWithOptions(request, runtime);
    }
    async deleteDeviceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDeviceGroupResponse({}));
    }
    async deleteDeviceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDeviceGroupWithOptions(request, runtime);
    }
    async deleteDevicePropWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.propKey)) {
            query["PropKey"] = request.propKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceProp",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteDevicePropResponse({}));
    }
    async deleteDeviceProp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteDevicePropWithOptions(request, runtime);
    }
    async deleteEdgeDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEdgeDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteEdgeDriverResponse({}));
    }
    async deleteEdgeDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteEdgeDriverWithOptions(request, runtime);
    }
    async deleteEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteEdgeDriverVersionResponse({}));
    }
    async deleteEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteEdgeDriverVersionWithOptions(request, runtime);
    }
    async deleteEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteEdgeInstanceResponse({}));
    }
    async deleteEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteEdgeInstanceWithOptions(request, runtime);
    }
    async deleteEdgeInstanceMessageRoutingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.routeId)) {
            query["RouteId"] = request.routeId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEdgeInstanceMessageRouting",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteEdgeInstanceMessageRoutingResponse({}));
    }
    async deleteEdgeInstanceMessageRouting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteEdgeInstanceMessageRoutingWithOptions(request, runtime);
    }
    async deleteJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteJobResponse({}));
    }
    async deleteJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteJobWithOptions(request, runtime);
    }
    async deleteOTAFirmwareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteOTAFirmware",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteOTAFirmwareResponse({}));
    }
    async deleteOTAFirmware(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteOTAFirmwareWithOptions(request, runtime);
    }
    async deleteOTAModuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.moduleName)) {
            query["ModuleName"] = request.moduleName;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteOTAModule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteOTAModuleResponse({}));
    }
    async deleteOTAModule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteOTAModuleWithOptions(request, runtime);
    }
    async deleteProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteProductResponse({}));
    }
    async deleteProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteProductWithOptions(request, runtime);
    }
    async deleteProductTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.productTagKey)) {
            query["ProductTagKey"] = request.productTagKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteProductTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteProductTagsResponse({}));
    }
    async deleteProductTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteProductTagsWithOptions(request, runtime);
    }
    async deleteProductTopicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.topicId)) {
            query["TopicId"] = request.topicId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteProductTopic",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteProductTopicResponse({}));
    }
    async deleteProductTopic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteProductTopicWithOptions(request, runtime);
    }
    async deleteRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteRuleResponse({}));
    }
    async deleteRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteRuleWithOptions(request, runtime);
    }
    async deleteRuleActionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.actionId)) {
            query["ActionId"] = request.actionId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRuleAction",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteRuleActionResponse({}));
    }
    async deleteRuleAction(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteRuleActionWithOptions(request, runtime);
    }
    async deleteSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSceneRuleResponse({}));
    }
    async deleteSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSceneRuleWithOptions(request, runtime);
    }
    async deleteSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "DeleteSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSpeechResponse({}));
    }
    async deleteSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSpeechWithOptions(request, runtime);
    }
    async deleteStudioAppDomainOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "DeleteStudioAppDomainOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteStudioAppDomainOpenResponse({}));
    }
    async deleteStudioAppDomainOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteStudioAppDomainOpenWithOptions(request, runtime);
    }
    async deleteSubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteSubscribeRelationResponse({}));
    }
    async deleteSubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteSubscribeRelationWithOptions(request, runtime);
    }
    async deleteThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.eventIdentifier)) {
            query["EventIdentifier"] = request.eventIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.propertyIdentifier)) {
            query["PropertyIdentifier"] = request.propertyIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.serviceIdentifier)) {
            query["ServiceIdentifier"] = request.serviceIdentifier;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteThingModelResponse({}));
    }
    async deleteThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteThingModelWithOptions(request, runtime);
    }
    async deleteTopicRouteTableWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dstTopic)) {
            query["DstTopic"] = request.dstTopic;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.srcTopic)) {
            query["SrcTopic"] = request.srcTopic;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTopicRouteTable",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteTopicRouteTableResponse({}));
    }
    async deleteTopicRouteTable(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteTopicRouteTableWithOptions(request, runtime);
    }
    async disableDeviceTunnelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DisableDeviceTunnel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DisableDeviceTunnelResponse({}));
    }
    async disableDeviceTunnel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.disableDeviceTunnelWithOptions(request, runtime);
    }
    async disableDeviceTunnelShareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DisableDeviceTunnelShare",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DisableDeviceTunnelShareResponse({}));
    }
    async disableDeviceTunnelShare(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.disableDeviceTunnelShareWithOptions(request, runtime);
    }
    async disableSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DisableSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DisableSceneRuleResponse({}));
    }
    async disableSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.disableSceneRuleWithOptions(request, runtime);
    }
    async disableThingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DisableThing",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DisableThingResponse({}));
    }
    async disableThing(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.disableThingWithOptions(request, runtime);
    }
    async enableDeviceTunnelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EnableDeviceTunnel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new EnableDeviceTunnelResponse({}));
    }
    async enableDeviceTunnel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.enableDeviceTunnelWithOptions(request, runtime);
    }
    async enableDeviceTunnelShareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EnableDeviceTunnelShare",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new EnableDeviceTunnelShareResponse({}));
    }
    async enableDeviceTunnelShare(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.enableDeviceTunnelShareWithOptions(request, runtime);
    }
    async enableSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EnableSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new EnableSceneRuleResponse({}));
    }
    async enableSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.enableSceneRuleWithOptions(request, runtime);
    }
    async enableThingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EnableThing",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new EnableThingResponse({}));
    }
    async enableThing(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.enableThingWithOptions(request, runtime);
    }
    async generateDeviceNameListURLWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GenerateDeviceNameListURL",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GenerateDeviceNameListURLResponse({}));
    }
    async generateDeviceNameListURL(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.generateDeviceNameListURLWithOptions(request, runtime);
    }
    async generateFileUploadURLWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            query["BizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["FileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSuffix)) {
            query["FileSuffix"] = request.fileSuffix;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GenerateFileUploadURL",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GenerateFileUploadURLResponse({}));
    }
    async generateFileUploadURL(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.generateFileUploadURLWithOptions(request, runtime);
    }
    async generateOTAUploadURLWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileSuffix)) {
            query["FileSuffix"] = request.fileSuffix;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GenerateOTAUploadURL",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GenerateOTAUploadURLResponse({}));
    }
    async generateOTAUploadURL(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.generateOTAUploadURLWithOptions(request, runtime);
    }
    async getDataAPIServiceDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.apiSrn,
        });
        let params = new $OpenApi.Params({
            action: "GetDataAPIServiceDetail",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDataAPIServiceDetailResponse({}));
    }
    async getDataAPIServiceDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDataAPIServiceDetailWithOptions(request, runtime);
    }
    async getDeviceShadowWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDeviceShadow",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDeviceShadowResponse({}));
    }
    async getDeviceShadow(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDeviceShadowWithOptions(request, runtime);
    }
    async getDeviceStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDeviceStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDeviceStatusResponse({}));
    }
    async getDeviceStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDeviceStatusWithOptions(request, runtime);
    }
    async getDeviceTunnelShareStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDeviceTunnelShareStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDeviceTunnelShareStatusResponse({}));
    }
    async getDeviceTunnelShareStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDeviceTunnelShareStatusWithOptions(request, runtime);
    }
    async getDeviceTunnelStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDeviceTunnelStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDeviceTunnelStatusResponse({}));
    }
    async getDeviceTunnelStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDeviceTunnelStatusWithOptions(request, runtime);
    }
    async getEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEdgeDriverVersionResponse({}));
    }
    async getEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEdgeDriverVersionWithOptions(request, runtime);
    }
    async getEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEdgeInstanceResponse({}));
    }
    async getEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEdgeInstanceWithOptions(request, runtime);
    }
    async getEdgeInstanceDeploymentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deploymentId)) {
            query["DeploymentId"] = request.deploymentId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEdgeInstanceDeployment",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEdgeInstanceDeploymentResponse({}));
    }
    async getEdgeInstanceDeployment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEdgeInstanceDeploymentWithOptions(request, runtime);
    }
    async getEdgeInstanceMessageRoutingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.routeId)) {
            query["RouteId"] = request.routeId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEdgeInstanceMessageRouting",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetEdgeInstanceMessageRoutingResponse({}));
    }
    async getEdgeInstanceMessageRouting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getEdgeInstanceMessageRoutingWithOptions(request, runtime);
    }
    async getGatewayBySubDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGatewayBySubDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetGatewayBySubDeviceResponse({}));
    }
    async getGatewayBySubDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getGatewayBySubDeviceWithOptions(request, runtime);
    }
    async getLoraNodesTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetLoraNodesTask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetLoraNodesTaskResponse({}));
    }
    async getLoraNodesTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getLoraNodesTaskWithOptions(request, runtime);
    }
    async getNodesAddingTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetNodesAddingTask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetNodesAddingTaskResponse({}));
    }
    async getNodesAddingTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getNodesAddingTaskWithOptions(request, runtime);
    }
    async getRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetRuleResponse({}));
    }
    async getRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getRuleWithOptions(request, runtime);
    }
    async getRuleActionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.actionId)) {
            query["ActionId"] = request.actionId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRuleAction",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetRuleActionResponse({}));
    }
    async getRuleAction(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getRuleActionWithOptions(request, runtime);
    }
    async getSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSceneRuleResponse({}));
    }
    async getSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSceneRuleWithOptions(request, runtime);
    }
    async getSpeechVoiceWithOptions(runtime) {
        let req = new $OpenApi.OpenApiRequest({});
        let params = new $OpenApi.Params({
            action: "GetSpeechVoice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetSpeechVoiceResponse({}));
    }
    async getSpeechVoice() {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getSpeechVoiceWithOptions(runtime);
    }
    async getStudioAppTokenOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "GetStudioAppTokenOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetStudioAppTokenOpenResponse({}));
    }
    async getStudioAppTokenOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getStudioAppTokenOpenWithOptions(request, runtime);
    }
    async getThingModelTslWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.simple)) {
            query["Simple"] = request.simple;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetThingModelTsl",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetThingModelTslResponse({}));
    }
    async getThingModelTsl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getThingModelTslWithOptions(request, runtime);
    }
    async getThingModelTslPublishedWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.simple)) {
            query["Simple"] = request.simple;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetThingModelTslPublished",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetThingModelTslPublishedResponse({}));
    }
    async getThingModelTslPublished(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getThingModelTslPublishedWithOptions(request, runtime);
    }
    async getThingScriptWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetThingScript",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetThingScriptResponse({}));
    }
    async getThingScript(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getThingScriptWithOptions(request, runtime);
    }
    async getThingTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.categoryKey)) {
            query["CategoryKey"] = request.categoryKey;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetThingTemplate",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetThingTemplateResponse({}));
    }
    async getThingTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getThingTemplateWithOptions(request, runtime);
    }
    async getThingTopoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageNo)) {
            query["PageNo"] = request.pageNo;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetThingTopo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetThingTopoResponse({}));
    }
    async getThingTopo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getThingTopoWithOptions(request, runtime);
    }
    async importThingModelTslWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockName)) {
            query["FunctionBlockName"] = request.functionBlockName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.tslStr)) {
            query["TslStr"] = request.tslStr;
        }
        if (!tea_util_1.default.isUnset(request.tslUrl)) {
            query["TslUrl"] = request.tslUrl;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ImportThingModelTsl",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ImportThingModelTslResponse({}));
    }
    async importThingModelTsl(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.importThingModelTslWithOptions(request, runtime);
    }
    async invokeDataAPIServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: tea_util_1.default.toArray(request.apiSrn),
        });
        let params = new $OpenApi.Params({
            action: "InvokeDataAPIService",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new InvokeDataAPIServiceResponse({}));
    }
    async invokeDataAPIService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.invokeDataAPIServiceWithOptions(request, runtime);
    }
    async invokeThingServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.args)) {
            query["Args"] = request.args;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "InvokeThingService",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new InvokeThingServiceResponse({}));
    }
    async invokeThingService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.invokeThingServiceWithOptions(request, runtime);
    }
    async invokeThingsServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.args)) {
            query["Args"] = request.args;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "InvokeThingsService",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new InvokeThingsServiceResponse({}));
    }
    async invokeThingsService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.invokeThingsServiceWithOptions(request, runtime);
    }
    async listAnalyticsDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.apiPath)) {
            query["ApiPath"] = request.apiPath;
        }
        if (!tea_util_1.default.isUnset(request.condition)) {
            query["Condition"] = request.condition;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.isoId)) {
            query["IsoId"] = request.isoId;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            query["PageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAnalyticsData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListAnalyticsDataResponse({}));
    }
    async listAnalyticsData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listAnalyticsDataWithOptions(request, runtime);
    }
    async listDeviceDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["NextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.targetUid)) {
            query["TargetUid"] = request.targetUid;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.jobId,
        });
        let params = new $OpenApi.Params({
            action: "ListDeviceDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDeviceDistributeJobResponse({}));
    }
    async listDeviceDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDeviceDistributeJobWithOptions(request, runtime);
    }
    async listDistributedDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.sourceInstanceId)) {
            query["SourceInstanceId"] = request.sourceInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetUid)) {
            query["TargetUid"] = request.targetUid;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDistributedDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDistributedDeviceResponse({}));
    }
    async listDistributedDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDistributedDeviceWithOptions(request, runtime);
    }
    async listDistributedProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.sourceInstanceId)) {
            query["SourceInstanceId"] = request.sourceInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetInstanceId)) {
            query["TargetInstanceId"] = request.targetInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetUid)) {
            query["TargetUid"] = request.targetUid;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDistributedProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListDistributedProductResponse({}));
    }
    async listDistributedProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listDistributedProductWithOptions(request, runtime);
    }
    async listJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListJobResponse({}));
    }
    async listJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listJobWithOptions(request, runtime);
    }
    async listOTAFirmwareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.destVersion)) {
            query["DestVersion"] = request.destVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAFirmware",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAFirmwareResponse({}));
    }
    async listOTAFirmware(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAFirmwareWithOptions(request, runtime);
    }
    async listOTAJobByDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAJobByDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAJobByDeviceResponse({}));
    }
    async listOTAJobByDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAJobByDeviceWithOptions(request, runtime);
    }
    async listOTAJobByFirmwareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAJobByFirmware",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAJobByFirmwareResponse({}));
    }
    async listOTAJobByFirmware(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAJobByFirmwareWithOptions(request, runtime);
    }
    async listOTAModuleByProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAModuleByProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAModuleByProductResponse({}));
    }
    async listOTAModuleByProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAModuleByProductWithOptions(request, runtime);
    }
    async listOTAModuleVersionsByDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAModuleVersionsByDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAModuleVersionsByDeviceResponse({}));
    }
    async listOTAModuleVersionsByDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAModuleVersionsByDeviceWithOptions(request, runtime);
    }
    async listOTATaskByJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.deviceNames)) {
            query["DeviceNames"] = request.deviceNames;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            query["TaskStatus"] = request.taskStatus;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTATaskByJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTATaskByJobResponse({}));
    }
    async listOTATaskByJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTATaskByJobWithOptions(request, runtime);
    }
    async listOTAUnfinishedTaskByDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.moduleName)) {
            query["ModuleName"] = request.moduleName;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            query["TaskStatus"] = request.taskStatus;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOTAUnfinishedTaskByDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListOTAUnfinishedTaskByDeviceResponse({}));
    }
    async listOTAUnfinishedTaskByDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listOTAUnfinishedTaskByDeviceWithOptions(request, runtime);
    }
    async listProductByTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productTag)) {
            query["ProductTag"] = request.productTag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListProductByTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListProductByTagsResponse({}));
    }
    async listProductByTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listProductByTagsWithOptions(request, runtime);
    }
    async listProductTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListProductTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListProductTagsResponse({}));
    }
    async listProductTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listProductTagsWithOptions(request, runtime);
    }
    async listRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListRuleResponse({}));
    }
    async listRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listRuleWithOptions(request, runtime);
    }
    async listRuleActionsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRuleActions",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListRuleActionsResponse({}));
    }
    async listRuleActions(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listRuleActionsWithOptions(request, runtime);
    }
    async listTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.device)) {
            query["Device"] = request.device;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.limit)) {
            query["Limit"] = request.limit;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["NextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListTaskResponse({}));
    }
    async listTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listTaskWithOptions(request, runtime);
    }
    async listTaskByPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.device)) {
            query["Device"] = request.device;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.jobName)) {
            query["JobName"] = request.jobName;
        }
        if (!tea_util_1.default.isUnset(request.pageNo)) {
            query["PageNo"] = request.pageNo;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTaskByPage",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListTaskByPageResponse({}));
    }
    async listTaskByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listTaskByPageWithOptions(request, runtime);
    }
    async listThingModelVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListThingModelVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListThingModelVersionResponse({}));
    }
    async listThingModelVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listThingModelVersionWithOptions(request, runtime);
    }
    async listThingTemplatesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListThingTemplates",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ListThingTemplatesResponse({}));
    }
    async listThingTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.listThingTemplatesWithOptions(request, runtime);
    }
    async notifyAddThingTopoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceListStr)) {
            query["DeviceListStr"] = request.deviceListStr;
        }
        if (!tea_util_1.default.isUnset(request.gwDeviceName)) {
            query["GwDeviceName"] = request.gwDeviceName;
        }
        if (!tea_util_1.default.isUnset(request.gwIotId)) {
            query["GwIotId"] = request.gwIotId;
        }
        if (!tea_util_1.default.isUnset(request.gwProductKey)) {
            query["GwProductKey"] = request.gwProductKey;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "NotifyAddThingTopo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new NotifyAddThingTopoResponse({}));
    }
    async notifyAddThingTopo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.notifyAddThingTopoWithOptions(request, runtime);
    }
    async openIotServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenIotService",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenIotServiceResponse({}));
    }
    async openIotService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openIotServiceWithOptions(request, runtime);
    }
    async printByTemplateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.deviceName,
        });
        let params = new $OpenApi.Params({
            action: "PrintByTemplate",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PrintByTemplateResponse({}));
    }
    async printByTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.printByTemplateWithOptions(request, runtime);
    }
    async pubWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.correlationData)) {
            query["CorrelationData"] = request.correlationData;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.messageContent)) {
            query["MessageContent"] = request.messageContent;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.qos)) {
            query["Qos"] = request.qos;
        }
        if (!tea_util_1.default.isUnset(request.responseTopic)) {
            query["ResponseTopic"] = request.responseTopic;
        }
        if (!tea_util_1.default.isUnset(request.topicFullName)) {
            query["TopicFullName"] = request.topicFullName;
        }
        if (!tea_util_1.default.isUnset(request.userProp)) {
            query["UserProp"] = request.userProp;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "Pub",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PubResponse({}));
    }
    async pub(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pubWithOptions(request, runtime);
    }
    async pubBroadcastWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.messageContent)) {
            query["MessageContent"] = request.messageContent;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.topicFullName)) {
            query["TopicFullName"] = request.topicFullName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PubBroadcast",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PubBroadcastResponse({}));
    }
    async pubBroadcast(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pubBroadcastWithOptions(request, runtime);
    }
    async publishStudioAppWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "PublishStudioApp",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PublishStudioAppResponse({}));
    }
    async publishStudioApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.publishStudioAppWithOptions(request, runtime);
    }
    async publishThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PublishThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PublishThingModelResponse({}));
    }
    async publishThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.publishThingModelWithOptions(request, runtime);
    }
    async pushSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.deviceName,
        });
        let params = new $OpenApi.Params({
            action: "PushSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new PushSpeechResponse({}));
    }
    async pushSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.pushSpeechWithOptions(request, runtime);
    }
    async queryAppDeviceListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.categoryKeyList)) {
            query["CategoryKeyList"] = request.categoryKeyList;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKeyList)) {
            query["ProductKeyList"] = request.productKeyList;
        }
        if (!tea_util_1.default.isUnset(request.tagList)) {
            query["TagList"] = request.tagList;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAppDeviceList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryAppDeviceListResponse({}));
    }
    async queryAppDeviceList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryAppDeviceListWithOptions(request, runtime);
    }
    async queryBatchRegisterDeviceStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applyId)) {
            query["ApplyId"] = request.applyId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBatchRegisterDeviceStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryBatchRegisterDeviceStatusResponse({}));
    }
    async queryBatchRegisterDeviceStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryBatchRegisterDeviceStatusWithOptions(request, runtime);
    }
    async queryCertUrlByApplyIdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applyId)) {
            query["ApplyId"] = request.applyId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCertUrlByApplyId",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryCertUrlByApplyIdResponse({}));
    }
    async queryCertUrlByApplyId(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryCertUrlByApplyIdWithOptions(request, runtime);
    }
    async queryConsumerGroupByGroupIdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConsumerGroupByGroupId",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryConsumerGroupByGroupIdResponse({}));
    }
    async queryConsumerGroupByGroupId(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryConsumerGroupByGroupIdWithOptions(request, runtime);
    }
    async queryConsumerGroupListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.fuzzy)) {
            query["Fuzzy"] = request.fuzzy;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConsumerGroupList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryConsumerGroupListResponse({}));
    }
    async queryConsumerGroupList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryConsumerGroupListWithOptions(request, runtime);
    }
    async queryConsumerGroupStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConsumerGroupStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryConsumerGroupStatusResponse({}));
    }
    async queryConsumerGroupStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryConsumerGroupStatusWithOptions(request, runtime);
    }
    async queryDetailSceneRuleLogWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.traceId)) {
            query["TraceId"] = request.traceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDetailSceneRuleLog",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDetailSceneRuleLogResponse({}));
    }
    async queryDetailSceneRuleLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDetailSceneRuleLogWithOptions(request, runtime);
    }
    async queryDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["NextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceResponse({}));
    }
    async queryDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceWithOptions(request, runtime);
    }
    async queryDeviceBySQLWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.SQL)) {
            query["SQL"] = request.SQL;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceBySQL",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceBySQLResponse({}));
    }
    async queryDeviceBySQL(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceBySQLWithOptions(request, runtime);
    }
    async queryDeviceByStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceByStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceByStatusResponse({}));
    }
    async queryDeviceByStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceByStatusWithOptions(request, runtime);
    }
    async queryDeviceByTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceByTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceByTagsResponse({}));
    }
    async queryDeviceByTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceByTagsWithOptions(request, runtime);
    }
    async queryDeviceCertWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceCert",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceCertResponse({}));
    }
    async queryDeviceCert(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceCertWithOptions(request, runtime);
    }
    async queryDeviceDesiredPropertyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceDesiredProperty",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceDesiredPropertyResponse({}));
    }
    async queryDeviceDesiredProperty(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceDesiredPropertyWithOptions(request, runtime);
    }
    async queryDeviceDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceDetail",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceDetailResponse({}));
    }
    async queryDeviceDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceDetailWithOptions(request, runtime);
    }
    async queryDeviceDistributeDetailWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceDistributeDetail",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceDistributeDetailResponse({}));
    }
    async queryDeviceDistributeDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceDistributeDetailWithOptions(request, runtime);
    }
    async queryDeviceDistributeJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceDistributeJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceDistributeJobResponse({}));
    }
    async queryDeviceDistributeJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceDistributeJobWithOptions(request, runtime);
    }
    async queryDeviceEventDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.eventType)) {
            query["EventType"] = request.eventType;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceEventData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceEventDataResponse({}));
    }
    async queryDeviceEventData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceEventDataWithOptions(request, runtime);
    }
    async queryDeviceFileWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.fileId)) {
            query["FileId"] = request.fileId;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceFile",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceFileResponse({}));
    }
    async queryDeviceFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceFileWithOptions(request, runtime);
    }
    async queryDeviceFileListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceFileList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceFileListResponse({}));
    }
    async queryDeviceFileList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceFileListWithOptions(request, runtime);
    }
    async queryDeviceGroupByDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceGroupByDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceGroupByDeviceResponse({}));
    }
    async queryDeviceGroupByDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceGroupByDeviceWithOptions(request, runtime);
    }
    async queryDeviceGroupByTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            query["Tag"] = request.tag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceGroupByTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceGroupByTagsResponse({}));
    }
    async queryDeviceGroupByTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceGroupByTagsWithOptions(request, runtime);
    }
    async queryDeviceGroupInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceGroupInfo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceGroupInfoResponse({}));
    }
    async queryDeviceGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceGroupInfoWithOptions(request, runtime);
    }
    async queryDeviceGroupListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["GroupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.superGroupId)) {
            query["SuperGroupId"] = request.superGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceGroupList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceGroupListResponse({}));
    }
    async queryDeviceGroupList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceGroupListWithOptions(request, runtime);
    }
    async queryDeviceGroupTagListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceGroupTagList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceGroupTagListResponse({}));
    }
    async queryDeviceGroupTagList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceGroupTagListWithOptions(request, runtime);
    }
    async queryDeviceInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceInfo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceInfoResponse({}));
    }
    async queryDeviceInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceInfoWithOptions(request, runtime);
    }
    async queryDeviceListByDeviceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceListByDeviceGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceListByDeviceGroupResponse({}));
    }
    async queryDeviceListByDeviceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceListByDeviceGroupWithOptions(request, runtime);
    }
    async queryDeviceOriginalEventDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.nextPageToken)) {
            query["NextPageToken"] = request.nextPageToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceOriginalEventData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceOriginalEventDataResponse({}));
    }
    async queryDeviceOriginalEventData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceOriginalEventDataWithOptions(request, runtime);
    }
    async queryDeviceOriginalPropertyDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.nextPageToken)) {
            query["NextPageToken"] = request.nextPageToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceOriginalPropertyData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceOriginalPropertyDataResponse({}));
    }
    async queryDeviceOriginalPropertyData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceOriginalPropertyDataWithOptions(request, runtime);
    }
    async queryDeviceOriginalPropertyStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.nextPageToken)) {
            query["NextPageToken"] = request.nextPageToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceOriginalPropertyStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceOriginalPropertyStatusResponse({}));
    }
    async queryDeviceOriginalPropertyStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceOriginalPropertyStatusWithOptions(request, runtime);
    }
    async queryDeviceOriginalServiceDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.nextPageToken)) {
            query["NextPageToken"] = request.nextPageToken;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceOriginalServiceData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceOriginalServiceDataResponse({}));
    }
    async queryDeviceOriginalServiceData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceOriginalServiceDataWithOptions(request, runtime);
    }
    async queryDevicePropWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceProp",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDevicePropResponse({}));
    }
    async queryDeviceProp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDevicePropWithOptions(request, runtime);
    }
    async queryDevicePropertiesDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDevicePropertiesData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDevicePropertiesDataResponse({}));
    }
    async queryDevicePropertiesData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDevicePropertiesDataWithOptions(request, runtime);
    }
    async queryDevicePropertyDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDevicePropertyData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDevicePropertyDataResponse({}));
    }
    async queryDevicePropertyData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDevicePropertyDataWithOptions(request, runtime);
    }
    async queryDevicePropertyStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDevicePropertyStatus",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDevicePropertyStatusResponse({}));
    }
    async queryDevicePropertyStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDevicePropertyStatusWithOptions(request, runtime);
    }
    async queryDeviceServiceDataWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.asc)) {
            query["Asc"] = request.asc;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceServiceData",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceServiceDataResponse({}));
    }
    async queryDeviceServiceData(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceServiceDataWithOptions(request, runtime);
    }
    async queryDeviceStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceStatistics",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryDeviceStatisticsResponse({}));
    }
    async queryDeviceStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryDeviceStatisticsWithOptions(request, runtime);
    }
    async queryEdgeDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.driverName)) {
            query["DriverName"] = request.driverName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeDriverResponse({}));
    }
    async queryEdgeDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeDriverWithOptions(request, runtime);
    }
    async queryEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.versionState)) {
            query["VersionState"] = request.versionState;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeDriverVersionResponse({}));
    }
    async queryEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeDriverVersionWithOptions(request, runtime);
    }
    async queryEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceResponse({}));
    }
    async queryEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceWithOptions(request, runtime);
    }
    async queryEdgeInstanceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelName)) {
            query["ChannelName"] = request.channelName;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceChannelResponse({}));
    }
    async queryEdgeInstanceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceChannelWithOptions(request, runtime);
    }
    async queryEdgeInstanceDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceDeviceResponse({}));
    }
    async queryEdgeInstanceDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceDeviceWithOptions(request, runtime);
    }
    async queryEdgeInstanceDeviceByDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelId)) {
            query["ChannelId"] = request.channelId;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceDeviceByDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceDeviceByDriverResponse({}));
    }
    async queryEdgeInstanceDeviceByDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceDeviceByDriverWithOptions(request, runtime);
    }
    async queryEdgeInstanceDriverWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceDriver",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceDriverResponse({}));
    }
    async queryEdgeInstanceDriver(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceDriverWithOptions(request, runtime);
    }
    async queryEdgeInstanceGatewayWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceGateway",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceGatewayResponse({}));
    }
    async queryEdgeInstanceGateway(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceGatewayWithOptions(request, runtime);
    }
    async queryEdgeInstanceHistoricDeploymentWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceHistoricDeployment",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceHistoricDeploymentResponse({}));
    }
    async queryEdgeInstanceHistoricDeployment(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceHistoricDeploymentWithOptions(request, runtime);
    }
    async queryEdgeInstanceMessageRoutingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceMessageRouting",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceMessageRoutingResponse({}));
    }
    async queryEdgeInstanceMessageRouting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceMessageRoutingWithOptions(request, runtime);
    }
    async queryEdgeInstanceSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEdgeInstanceSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryEdgeInstanceSceneRuleResponse({}));
    }
    async queryEdgeInstanceSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryEdgeInstanceSceneRuleWithOptions(request, runtime);
    }
    async queryJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryJobResponse({}));
    }
    async queryJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryJobWithOptions(request, runtime);
    }
    async queryJobStatisticsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryJobStatistics",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryJobStatisticsResponse({}));
    }
    async queryJobStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryJobStatisticsWithOptions(request, runtime);
    }
    async queryLoRaJoinPermissionsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryLoRaJoinPermissions",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryLoRaJoinPermissionsResponse({}));
    }
    async queryLoRaJoinPermissions(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryLoRaJoinPermissionsWithOptions(request, runtime);
    }
    async queryMessageInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.uniMsgId)) {
            query["UniMsgId"] = request.uniMsgId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMessageInfo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryMessageInfoResponse({}));
    }
    async queryMessageInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryMessageInfoWithOptions(request, runtime);
    }
    async queryOTAFirmwareWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.firmwareId)) {
            query["FirmwareId"] = request.firmwareId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOTAFirmware",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryOTAFirmwareResponse({}));
    }
    async queryOTAFirmware(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryOTAFirmwareWithOptions(request, runtime);
    }
    async queryOTAJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOTAJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryOTAJobResponse({}));
    }
    async queryOTAJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryOTAJobWithOptions(request, runtime);
    }
    async queryPageByApplyIdWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applyId)) {
            query["ApplyId"] = request.applyId;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPageByApplyId",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryPageByApplyIdResponse({}));
    }
    async queryPageByApplyId(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryPageByApplyIdWithOptions(request, runtime);
    }
    async queryProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryProductResponse({}));
    }
    async queryProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryProductWithOptions(request, runtime);
    }
    async queryProductCertInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProductCertInfo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryProductCertInfoResponse({}));
    }
    async queryProductCertInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryProductCertInfoWithOptions(request, runtime);
    }
    async queryProductListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.aliyunCommodityCode)) {
            query["AliyunCommodityCode"] = request.aliyunCommodityCode;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProductList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryProductListResponse({}));
    }
    async queryProductList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryProductListWithOptions(request, runtime);
    }
    async queryProductTopicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProductTopic",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryProductTopicResponse({}));
    }
    async queryProductTopic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryProductTopicWithOptions(request, runtime);
    }
    async querySceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.ruleName)) {
            query["RuleName"] = request.ruleName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySceneRuleResponse({}));
    }
    async querySceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySceneRuleWithOptions(request, runtime);
    }
    async querySolutionDeviceGroupPageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fuzzyGroupName)) {
            query["FuzzyGroupName"] = request.fuzzyGroupName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageId)) {
            query["PageId"] = request.pageId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            query["ProjectCode"] = request.projectCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySolutionDeviceGroupPage",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySolutionDeviceGroupPageResponse({}));
    }
    async querySolutionDeviceGroupPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySolutionDeviceGroupPageWithOptions(request, runtime);
    }
    async querySpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "QuerySpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySpeechResponse({}));
    }
    async querySpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySpeechWithOptions(request, runtime);
    }
    async querySpeechListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "QuerySpeechList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySpeechListResponse({}));
    }
    async querySpeechList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySpeechListWithOptions(request, runtime);
    }
    async querySpeechPushJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobCode)) {
            query["JobCode"] = request.jobCode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "QuerySpeechPushJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySpeechPushJobResponse({}));
    }
    async querySpeechPushJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySpeechPushJobWithOptions(request, runtime);
    }
    async querySpeechPushJobDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.deviceName,
        });
        let params = new $OpenApi.Params({
            action: "QuerySpeechPushJobDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySpeechPushJobDeviceResponse({}));
    }
    async querySpeechPushJobDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySpeechPushJobDeviceWithOptions(request, runtime);
    }
    async querySpeechPushJobSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "QuerySpeechPushJobSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySpeechPushJobSpeechResponse({}));
    }
    async querySpeechPushJobSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySpeechPushJobSpeechWithOptions(request, runtime);
    }
    async queryStudioAppDomainListOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "QueryStudioAppDomainListOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryStudioAppDomainListOpenResponse({}));
    }
    async queryStudioAppDomainListOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryStudioAppDomainListOpenWithOptions(request, runtime);
    }
    async queryStudioAppListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.fuzzyName,
        });
        let params = new $OpenApi.Params({
            action: "QueryStudioAppList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryStudioAppListResponse({}));
    }
    async queryStudioAppList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryStudioAppListWithOptions(request, runtime);
    }
    async queryStudioAppPageListOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "QueryStudioAppPageListOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryStudioAppPageListOpenResponse({}));
    }
    async queryStudioAppPageListOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryStudioAppPageListOpenWithOptions(request, runtime);
    }
    async queryStudioProjectListWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "QueryStudioProjectList",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryStudioProjectListResponse({}));
    }
    async queryStudioProjectList(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryStudioProjectListWithOptions(request, runtime);
    }
    async querySubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySubscribeRelationResponse({}));
    }
    async querySubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySubscribeRelationWithOptions(request, runtime);
    }
    async querySummarySceneRuleLogWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            query["CurrentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["PageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["StartTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["Status"] = request.status;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySummarySceneRuleLog",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySummarySceneRuleLogResponse({}));
    }
    async querySummarySceneRuleLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySummarySceneRuleLogWithOptions(request, runtime);
    }
    async querySuperDeviceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySuperDeviceGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QuerySuperDeviceGroupResponse({}));
    }
    async querySuperDeviceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.querySuperDeviceGroupWithOptions(request, runtime);
    }
    async queryTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTask",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryTaskResponse({}));
    }
    async queryTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryTaskWithOptions(request, runtime);
    }
    async queryThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryThingModelResponse({}));
    }
    async queryThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryThingModelWithOptions(request, runtime);
    }
    async queryThingModelExtendConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryThingModelExtendConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryThingModelExtendConfigResponse({}));
    }
    async queryThingModelExtendConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryThingModelExtendConfigWithOptions(request, runtime);
    }
    async queryThingModelExtendConfigPublishedWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryThingModelExtendConfigPublished",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryThingModelExtendConfigPublishedResponse({}));
    }
    async queryThingModelExtendConfigPublished(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryThingModelExtendConfigPublishedWithOptions(request, runtime);
    }
    async queryThingModelPublishedWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.modelVersion)) {
            query["ModelVersion"] = request.modelVersion;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.resourceGroupId)) {
            query["ResourceGroupId"] = request.resourceGroupId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryThingModelPublished",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryThingModelPublishedResponse({}));
    }
    async queryThingModelPublished(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryThingModelPublishedWithOptions(request, runtime);
    }
    async queryTopicReverseRouteTableWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            query["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.topic)) {
            query["Topic"] = request.topic;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTopicReverseRouteTable",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryTopicReverseRouteTableResponse({}));
    }
    async queryTopicReverseRouteTable(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryTopicReverseRouteTableWithOptions(request, runtime);
    }
    async queryTopicRouteTableWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.topic)) {
            query["Topic"] = request.topic;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTopicRouteTable",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new QueryTopicRouteTableResponse({}));
    }
    async queryTopicRouteTable(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.queryTopicRouteTableWithOptions(request, runtime);
    }
    async rRpcWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.requestBase64Byte)) {
            query["RequestBase64Byte"] = request.requestBase64Byte;
        }
        if (!tea_util_1.default.isUnset(request.timeout)) {
            query["Timeout"] = request.timeout;
        }
        if (!tea_util_1.default.isUnset(request.topic)) {
            query["Topic"] = request.topic;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RRpc",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RRpcResponse({}));
    }
    async rRpc(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.rRpcWithOptions(request, runtime);
    }
    async refreshDeviceTunnelSharePasswordWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RefreshDeviceTunnelSharePassword",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RefreshDeviceTunnelSharePasswordResponse({}));
    }
    async refreshDeviceTunnelSharePassword(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.refreshDeviceTunnelSharePasswordWithOptions(request, runtime);
    }
    async refreshStudioAppTokenOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "RefreshStudioAppTokenOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RefreshStudioAppTokenOpenResponse({}));
    }
    async refreshStudioAppTokenOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.refreshStudioAppTokenOpenWithOptions(request, runtime);
    }
    async registerDeviceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appKey)) {
            query["AppKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.devEui)) {
            query["DevEui"] = request.devEui;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.joinEui)) {
            query["JoinEui"] = request.joinEui;
        }
        if (!tea_util_1.default.isUnset(request.loraNodeType)) {
            query["LoraNodeType"] = request.loraNodeType;
        }
        if (!tea_util_1.default.isUnset(request.nickname)) {
            query["Nickname"] = request.nickname;
        }
        if (!tea_util_1.default.isUnset(request.pinCode)) {
            query["PinCode"] = request.pinCode;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RegisterDevice",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RegisterDeviceResponse({}));
    }
    async registerDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.registerDeviceWithOptions(request, runtime);
    }
    async releaseEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ReleaseEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ReleaseEdgeDriverVersionResponse({}));
    }
    async releaseEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.releaseEdgeDriverVersionWithOptions(request, runtime);
    }
    async releaseProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ReleaseProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ReleaseProductResponse({}));
    }
    async releaseProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.releaseProductWithOptions(request, runtime);
    }
    async removeThingTopoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveThingTopo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RemoveThingTopoResponse({}));
    }
    async removeThingTopo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.removeThingTopoWithOptions(request, runtime);
    }
    async replaceEdgeInstanceGatewayWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.currentGatewayId)) {
            query["CurrentGatewayId"] = request.currentGatewayId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.newGatewayId)) {
            query["NewGatewayId"] = request.newGatewayId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ReplaceEdgeInstanceGateway",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ReplaceEdgeInstanceGatewayResponse({}));
    }
    async replaceEdgeInstanceGateway(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.replaceEdgeInstanceGatewayWithOptions(request, runtime);
    }
    async rerunJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RerunJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new RerunJobResponse({}));
    }
    async rerunJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.rerunJobWithOptions(request, runtime);
    }
    async resetConsumerGroupPositionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ResetConsumerGroupPosition",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ResetConsumerGroupPositionResponse({}));
    }
    async resetConsumerGroupPosition(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.resetConsumerGroupPositionWithOptions(request, runtime);
    }
    async resetThingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ResetThing",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new ResetThingResponse({}));
    }
    async resetThing(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.resetThingWithOptions(request, runtime);
    }
    async saveDevicePropWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.props)) {
            query["Props"] = request.props;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SaveDeviceProp",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SaveDevicePropResponse({}));
    }
    async saveDeviceProp(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.saveDevicePropWithOptions(request, runtime);
    }
    async setDeviceDesiredPropertyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.items)) {
            query["Items"] = request.items;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.versions)) {
            query["Versions"] = request.versions;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetDeviceDesiredProperty",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetDeviceDesiredPropertyResponse({}));
    }
    async setDeviceDesiredProperty(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDeviceDesiredPropertyWithOptions(request, runtime);
    }
    async setDeviceGroupTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.tagString)) {
            query["TagString"] = request.tagString;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetDeviceGroupTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetDeviceGroupTagsResponse({}));
    }
    async setDeviceGroupTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDeviceGroupTagsWithOptions(request, runtime);
    }
    async setDevicePropertyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.items)) {
            query["Items"] = request.items;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetDeviceProperty",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetDevicePropertyResponse({}));
    }
    async setDeviceProperty(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDevicePropertyWithOptions(request, runtime);
    }
    async setDevicesPropertyWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.items)) {
            query["Items"] = request.items;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetDevicesProperty",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetDevicesPropertyResponse({}));
    }
    async setDevicesProperty(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setDevicesPropertyWithOptions(request, runtime);
    }
    async setEdgeInstanceDriverConfigsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.configs)) {
            query["Configs"] = request.configs;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetEdgeInstanceDriverConfigs",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetEdgeInstanceDriverConfigsResponse({}));
    }
    async setEdgeInstanceDriverConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setEdgeInstanceDriverConfigsWithOptions(request, runtime);
    }
    async setProductCertInfoWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.issueModel)) {
            query["IssueModel"] = request.issueModel;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SetProductCertInfo",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetProductCertInfoResponse({}));
    }
    async setProductCertInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setProductCertInfoWithOptions(request, runtime);
    }
    async setStudioProjectCooperationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "SetStudioProjectCooperation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetStudioProjectCooperationResponse({}));
    }
    async setStudioProjectCooperation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setStudioProjectCooperationWithOptions(request, runtime);
    }
    async setupStudioAppAuthModeOpenWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.appId,
        });
        let params = new $OpenApi.Params({
            action: "SetupStudioAppAuthModeOpen",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SetupStudioAppAuthModeOpenResponse({}));
    }
    async setupStudioAppAuthModeOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.setupStudioAppAuthModeOpenWithOptions(request, runtime);
    }
    async speechByCombinationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.combinationList,
        });
        let params = new $OpenApi.Params({
            action: "SpeechByCombination",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SpeechByCombinationResponse({}));
    }
    async speechByCombination(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.speechByCombinationWithOptions(request, runtime);
    }
    async startCpuWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotId)) {
            query["IotId"] = request.iotId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.targetValue)) {
            query["TargetValue"] = request.targetValue;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "StartCpu",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new StartCpuResponse({}));
    }
    async startCpu(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.startCpuWithOptions(request, runtime);
    }
    async startRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "StartRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new StartRuleResponse({}));
    }
    async startRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.startRuleWithOptions(request, runtime);
    }
    async stopRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "StopRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new StopRuleResponse({}));
    }
    async stopRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.stopRuleWithOptions(request, runtime);
    }
    async syncSpeechByCombinationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.combinationList,
        });
        let params = new $OpenApi.Params({
            action: "SyncSpeechByCombination",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new SyncSpeechByCombinationResponse({}));
    }
    async syncSpeechByCombination(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.syncSpeechByCombinationWithOptions(request, runtime);
    }
    async testSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "TestSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TestSpeechResponse({}));
    }
    async testSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.testSpeechWithOptions(request, runtime);
    }
    async triggerSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "TriggerSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TriggerSceneRuleResponse({}));
    }
    async triggerSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.triggerSceneRuleWithOptions(request, runtime);
    }
    async unbindApplicationFromEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.applicationId)) {
            query["ApplicationId"] = request.applicationId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnbindApplicationFromEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UnbindApplicationFromEdgeInstanceResponse({}));
    }
    async unbindApplicationFromEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.unbindApplicationFromEdgeInstanceWithOptions(request, runtime);
    }
    async unbindDriverFromEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnbindDriverFromEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UnbindDriverFromEdgeInstanceResponse({}));
    }
    async unbindDriverFromEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.unbindDriverFromEdgeInstanceWithOptions(request, runtime);
    }
    async unbindRoleFromEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnbindRoleFromEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UnbindRoleFromEdgeInstanceResponse({}));
    }
    async unbindRoleFromEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.unbindRoleFromEdgeInstanceWithOptions(request, runtime);
    }
    async unbindSceneRuleFromEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnbindSceneRuleFromEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UnbindSceneRuleFromEdgeInstanceResponse({}));
    }
    async unbindSceneRuleFromEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.unbindSceneRuleFromEdgeInstanceWithOptions(request, runtime);
    }
    async updateConsumerGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.newGroupName)) {
            query["NewGroupName"] = request.newGroupName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateConsumerGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateConsumerGroupResponse({}));
    }
    async updateConsumerGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateConsumerGroupWithOptions(request, runtime);
    }
    async updateDeviceGroupWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupDesc)) {
            query["GroupDesc"] = request.groupDesc;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["GroupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDeviceGroup",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateDeviceGroupResponse({}));
    }
    async updateDeviceGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDeviceGroupWithOptions(request, runtime);
    }
    async updateDeviceShadowWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deltaUpdate)) {
            query["DeltaUpdate"] = request.deltaUpdate;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["DeviceName"] = request.deviceName;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.shadowMessage)) {
            query["ShadowMessage"] = request.shadowMessage;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDeviceShadow",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateDeviceShadowResponse({}));
    }
    async updateDeviceShadow(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateDeviceShadowWithOptions(request, runtime);
    }
    async updateEdgeDriverVersionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.argument)) {
            query["Argument"] = request.argument;
        }
        if (!tea_util_1.default.isUnset(request.configCheckRule)) {
            query["ConfigCheckRule"] = request.configCheckRule;
        }
        if (!tea_util_1.default.isUnset(request.containerConfig)) {
            query["ContainerConfig"] = request.containerConfig;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.driverConfig)) {
            query["DriverConfig"] = request.driverConfig;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.driverVersion)) {
            query["DriverVersion"] = request.driverVersion;
        }
        if (!tea_util_1.default.isUnset(request.edgeVersion)) {
            query["EdgeVersion"] = request.edgeVersion;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.sourceConfig)) {
            query["SourceConfig"] = request.sourceConfig;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEdgeDriverVersion",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateEdgeDriverVersionResponse({}));
    }
    async updateEdgeDriverVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateEdgeDriverVersionWithOptions(request, runtime);
    }
    async updateEdgeInstanceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizEnable)) {
            query["BizEnable"] = request.bizEnable;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.spec)) {
            query["Spec"] = request.spec;
        }
        if (!tea_util_1.default.isUnset(request.tags)) {
            query["Tags"] = request.tags;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEdgeInstance",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateEdgeInstanceResponse({}));
    }
    async updateEdgeInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateEdgeInstanceWithOptions(request, runtime);
    }
    async updateEdgeInstanceChannelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.channelId)) {
            query["ChannelId"] = request.channelId;
        }
        if (!tea_util_1.default.isUnset(request.channelName)) {
            query["ChannelName"] = request.channelName;
        }
        if (!tea_util_1.default.isUnset(request.configs)) {
            query["Configs"] = request.configs;
        }
        if (!tea_util_1.default.isUnset(request.driverId)) {
            query["DriverId"] = request.driverId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEdgeInstanceChannel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateEdgeInstanceChannelResponse({}));
    }
    async updateEdgeInstanceChannel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateEdgeInstanceChannelWithOptions(request, runtime);
    }
    async updateEdgeInstanceMessageRoutingWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["InstanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.routeId)) {
            query["RouteId"] = request.routeId;
        }
        if (!tea_util_1.default.isUnset(request.sourceData)) {
            query["SourceData"] = request.sourceData;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["SourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.targetData)) {
            query["TargetData"] = request.targetData;
        }
        if (!tea_util_1.default.isUnset(request.targetIotHubQos)) {
            query["TargetIotHubQos"] = request.targetIotHubQos;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            query["TargetType"] = request.targetType;
        }
        if (!tea_util_1.default.isUnset(request.topicFilter)) {
            query["TopicFilter"] = request.topicFilter;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEdgeInstanceMessageRouting",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateEdgeInstanceMessageRoutingResponse({}));
    }
    async updateEdgeInstanceMessageRouting(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateEdgeInstanceMessageRoutingWithOptions(request, runtime);
    }
    async updateJobWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["JobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.rolloutConfig)) {
            query["RolloutConfig"] = request.rolloutConfig;
        }
        if (!tea_util_1.default.isUnset(request.timeoutConfig)) {
            query["TimeoutConfig"] = request.timeoutConfig;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateJob",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateJobResponse({}));
    }
    async updateJob(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateJobWithOptions(request, runtime);
    }
    async updateOTAModuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.aliasName)) {
            query["AliasName"] = request.aliasName;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            query["Desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.moduleName)) {
            query["ModuleName"] = request.moduleName;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateOTAModule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateOTAModuleResponse({}));
    }
    async updateOTAModule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateOTAModuleWithOptions(request, runtime);
    }
    async updateProductWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            query["Description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            query["ProductName"] = request.productName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateProduct",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateProductResponse({}));
    }
    async updateProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateProductWithOptions(request, runtime);
    }
    async updateProductFilterConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.propertyTimestampFilter)) {
            query["PropertyTimestampFilter"] = request.propertyTimestampFilter;
        }
        if (!tea_util_1.default.isUnset(request.propertyValueFilter)) {
            query["PropertyValueFilter"] = request.propertyValueFilter;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateProductFilterConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateProductFilterConfigResponse({}));
    }
    async updateProductFilterConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateProductFilterConfigWithOptions(request, runtime);
    }
    async updateProductTagsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.productTag)) {
            query["ProductTag"] = request.productTag;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateProductTags",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateProductTagsResponse({}));
    }
    async updateProductTags(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateProductTagsWithOptions(request, runtime);
    }
    async updateProductTopicWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.desc)) {
            query["Desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.operation)) {
            query["Operation"] = request.operation;
        }
        if (!tea_util_1.default.isUnset(request.topicId)) {
            query["TopicId"] = request.topicId;
        }
        if (!tea_util_1.default.isUnset(request.topicShortName)) {
            query["TopicShortName"] = request.topicShortName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateProductTopic",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateProductTopicResponse({}));
    }
    async updateProductTopic(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateProductTopicWithOptions(request, runtime);
    }
    async updateRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.ruleDesc)) {
            query["RuleDesc"] = request.ruleDesc;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        if (!tea_util_1.default.isUnset(request.select)) {
            query["Select"] = request.select;
        }
        if (!tea_util_1.default.isUnset(request.shortTopic)) {
            query["ShortTopic"] = request.shortTopic;
        }
        if (!tea_util_1.default.isUnset(request.topic)) {
            query["Topic"] = request.topic;
        }
        if (!tea_util_1.default.isUnset(request.topicType)) {
            query["TopicType"] = request.topicType;
        }
        if (!tea_util_1.default.isUnset(request.where)) {
            query["Where"] = request.where;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateRuleResponse({}));
    }
    async updateRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateRuleWithOptions(request, runtime);
    }
    async updateRuleActionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.actionId)) {
            query["ActionId"] = request.actionId;
        }
        if (!tea_util_1.default.isUnset(request.configuration)) {
            query["Configuration"] = request.configuration;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRuleAction",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateRuleActionResponse({}));
    }
    async updateRuleAction(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateRuleActionWithOptions(request, runtime);
    }
    async updateSceneRuleWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.ruleContent)) {
            query["RuleContent"] = request.ruleContent;
        }
        if (!tea_util_1.default.isUnset(request.ruleDescription)) {
            query["RuleDescription"] = request.ruleDescription;
        }
        if (!tea_util_1.default.isUnset(request.ruleId)) {
            query["RuleId"] = request.ruleId;
        }
        if (!tea_util_1.default.isUnset(request.ruleName)) {
            query["RuleName"] = request.ruleName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateSceneRule",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateSceneRuleResponse({}));
    }
    async updateSceneRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateSceneRuleWithOptions(request, runtime);
    }
    async updateSpeechWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let req = new $OpenApi.OpenApiRequest({
            body: request.iotInstanceId,
        });
        let params = new $OpenApi.Params({
            action: "UpdateSpeech",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateSpeechResponse({}));
    }
    async updateSpeech(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateSpeechWithOptions(request, runtime);
    }
    async updateSubscribeRelationWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.consumerGroupIds)) {
            query["ConsumerGroupIds"] = request.consumerGroupIds;
        }
        if (!tea_util_1.default.isUnset(request.deviceDataFlag)) {
            query["DeviceDataFlag"] = request.deviceDataFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceLifeCycleFlag)) {
            query["DeviceLifeCycleFlag"] = request.deviceLifeCycleFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceStatusChangeFlag)) {
            query["DeviceStatusChangeFlag"] = request.deviceStatusChangeFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceTagFlag)) {
            query["DeviceTagFlag"] = request.deviceTagFlag;
        }
        if (!tea_util_1.default.isUnset(request.deviceTopoLifeCycleFlag)) {
            query["DeviceTopoLifeCycleFlag"] = request.deviceTopoLifeCycleFlag;
        }
        if (!tea_util_1.default.isUnset(request.foundDeviceListFlag)) {
            query["FoundDeviceListFlag"] = request.foundDeviceListFlag;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.mnsConfiguration)) {
            query["MnsConfiguration"] = request.mnsConfiguration;
        }
        if (!tea_util_1.default.isUnset(request.otaEventFlag)) {
            query["OtaEventFlag"] = request.otaEventFlag;
        }
        if (!tea_util_1.default.isUnset(request.otaJobFlag)) {
            query["OtaJobFlag"] = request.otaJobFlag;
        }
        if (!tea_util_1.default.isUnset(request.otaVersionFlag)) {
            query["OtaVersionFlag"] = request.otaVersionFlag;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.thingHistoryFlag)) {
            query["ThingHistoryFlag"] = request.thingHistoryFlag;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateSubscribeRelation",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateSubscribeRelationResponse({}));
    }
    async updateSubscribeRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateSubscribeRelationWithOptions(request, runtime);
    }
    async updateThingModelWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.functionBlockId)) {
            query["FunctionBlockId"] = request.functionBlockId;
        }
        if (!tea_util_1.default.isUnset(request.functionBlockName)) {
            query["FunctionBlockName"] = request.functionBlockName;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            query["Identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.thingModelJson)) {
            query["ThingModelJson"] = request.thingModelJson;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateThingModel",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateThingModelResponse({}));
    }
    async updateThingModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateThingModelWithOptions(request, runtime);
    }
    async updateThingModelValidationConfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.validateType)) {
            query["ValidateType"] = request.validateType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateThingModelValidationConfig",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateThingModelValidationConfigResponse({}));
    }
    async updateThingModelValidationConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateThingModelValidationConfigWithOptions(request, runtime);
    }
    async updateThingScriptWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.iotInstanceId)) {
            query["IotInstanceId"] = request.iotInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.productKey)) {
            query["ProductKey"] = request.productKey;
        }
        if (!tea_util_1.default.isUnset(request.scriptContent)) {
            query["ScriptContent"] = request.scriptContent;
        }
        if (!tea_util_1.default.isUnset(request.scriptType)) {
            query["ScriptType"] = request.scriptType;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateThingScript",
            version: "2018-01-20",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateThingScriptResponse({}));
    }
    async updateThingScript(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateThingScriptWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map