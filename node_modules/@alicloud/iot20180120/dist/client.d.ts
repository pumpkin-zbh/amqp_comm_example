/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDataForApiSourceRequest extends $tea.Model {
    apiId?: string;
    content?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDataForApiSourceResponseBody extends $tea.Model {
    code?: string;
    data?: number;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDataForApiSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: AddDataForApiSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsRequest extends $tea.Model {
    device?: BatchAddDeviceGroupRelationsRequestDevice[];
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsResponseBody extends $tea.Model {
    alreadyRelatedGroupDeviceCount?: number;
    code?: string;
    errorMessage?: string;
    exceedTenGroupDeviceCount?: number;
    requestId?: string;
    success?: boolean;
    successAddedDeviceCount?: number;
    validDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchAddDeviceGroupRelationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoRequest extends $tea.Model {
    gwDeviceName?: string;
    gwProductKey?: string;
    iotInstanceId?: string;
    topoAddItem?: BatchAddThingTopoRequestTopoAddItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchAddThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectRequest extends $tea.Model {
    devices?: BatchBindDevicesIntoProjectRequestDevices[];
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchBindDevicesIntoProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectRequest extends $tea.Model {
    iotInstanceId?: string;
    productKeys?: string[];
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchBindProductsIntoProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesRequest extends $tea.Model {
    deviceName?: string[];
    deviceNameList?: BatchCheckDeviceNamesRequestDeviceNameList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBody extends $tea.Model {
    code?: string;
    data?: BatchCheckDeviceNamesResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchCheckDeviceNamesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchClearEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsRequest extends $tea.Model {
    device?: BatchDeleteDeviceGroupRelationsRequestDevice[];
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsResponseBody extends $tea.Model {
    alreadyRelatedGroupDeviceCount?: number;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    successDeviceCount?: number;
    validDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchDeleteDeviceGroupRelationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelRequest extends $tea.Model {
    channelIds?: string[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchDeleteEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusRequest extends $tea.Model {
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponseBody extends $tea.Model {
    code?: string;
    data?: BatchGetDeviceBindStatusResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetDeviceBindStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateRequest extends $tea.Model {
    deviceName?: string[];
    iotId?: string[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBody extends $tea.Model {
    code?: string;
    deviceStatusList?: BatchGetDeviceStateResponseBodyDeviceStatusList;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetDeviceStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverRequest extends $tea.Model {
    driverIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    driverList?: BatchGetEdgeDriverResponseBodyDriverList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelRequest extends $tea.Model {
    channelIds?: string[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: BatchGetEdgeInstanceChannelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    code?: string;
    deviceChannelList?: BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeInstanceDeviceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    deviceConfigList?: BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponseBody extends $tea.Model {
    code?: string;
    deviceDriverList?: BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeInstanceDeviceDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    driverIds?: string[];
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    driverConfigList?: BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchGetEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    qos?: number;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchPubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: BatchQueryDeviceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchQueryDeviceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequest extends $tea.Model {
    count?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchRegisterDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchRegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponseBody extends $tea.Model {
    code?: string;
    data?: BatchRegisterDeviceWithApplyIdResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchRegisterDeviceWithApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    channelId?: string;
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchSetEdgeInstanceDeviceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    deviceConfigs?: BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs[];
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchSetEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchUnbindDeviceFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesRequest extends $tea.Model {
    devices?: BatchUnbindProjectDevicesRequestDevices[];
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchUnbindProjectDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKeys?: string[];
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchUnbindProjectProductsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameRequest extends $tea.Model {
    deviceNicknameInfo?: BatchUpdateDeviceNicknameRequestDeviceNicknameInfo[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BatchUpdateDeviceNicknameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceRequest extends $tea.Model {
    applicationId?: string;
    applicationVersion?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindApplicationToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    instanceId?: string;
    iotInstanceId?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindDriverToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceRequest extends $tea.Model {
    deviceName?: string;
    instanceId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindGatewayToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    roleArn?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindRoleToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: BindSceneRuleToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelOTAStrategyByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceRequest extends $tea.Model {
    deviceName?: string[];
    firmwareId?: string;
    iotInstanceId?: string;
    jobId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelOTATaskByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobRequest extends $tea.Model {
    cancelInProgressTask?: boolean;
    cancelNotifiedTask?: boolean;
    cancelQueuedTask?: boolean;
    cancelScheduledTask?: boolean;
    cancelUnconfirmedTask?: boolean;
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelOTATaskByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CancelReleaseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ClearEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CloseEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ConfirmOTATaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelRequest extends $tea.Model {
    iotInstanceId?: string;
    resourceGroupId?: string;
    sourceModelVersion?: string;
    sourceProductKey?: string;
    targetProductKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CopyThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupRequest extends $tea.Model {
    groupName?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    groupId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationRequest extends $tea.Model {
    consumerGroupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateConsumerGroupSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequest extends $tea.Model {
    apiPath?: string;
    desc?: string;
    displayName?: string;
    iotInstanceId?: string;
    originSql?: string;
    requestParam?: CreateDataAPIServiceRequestRequestParam[];
    responseParam?: CreateDataAPIServiceRequestResponseParam[];
    templateSql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDataAPIServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateDataAPIServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobRequest extends $tea.Model {
    deviceName?: string[];
    productKey?: string;
    sourceInstanceId?: string;
    strategy?: number;
    targetAliyunId?: string;
    targetInstanceConfig?: CreateDeviceDistributeJobRequestTargetInstanceConfig[];
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupRequest extends $tea.Model {
    groupDesc?: string;
    groupName?: string;
    iotInstanceId?: string;
    superGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDeviceGroupResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverRequest extends $tea.Model {
    cpuArch?: string;
    driverName?: string;
    driverProtocol?: string;
    iotInstanceId?: string;
    isBuiltIn?: boolean;
    runtime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    driverId?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionRequest extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    iotInstanceId?: string;
    sourceConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    spec?: number;
    tags?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    instanceId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelRequest extends $tea.Model {
    channelName?: string;
    configs?: CreateEdgeInstanceChannelRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    deploymentId?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetIotHubQos?: number;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    routeId?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressRequest extends $tea.Model {
    fileName?: string;
    instanceId?: string;
    iotInstanceId?: string;
    resourceId?: string;
    resourceVersion?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponseBody extends $tea.Model {
    code?: string;
    data?: CreateEdgeOssPreSignedAddressResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateEdgeOssPreSignedAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobDocument?: string;
    jobFile?: string;
    jobName?: string;
    rolloutConfig?: string;
    scheduledTime?: number;
    targetConfig?: string;
    timeoutConfig?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskRequest extends $tea.Model {
    deviceInfo?: CreateLoRaNodesTaskRequestDeviceInfo[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateLoRaNodesTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobRequest extends $tea.Model {
    dynamicMode?: number;
    firmwareId?: string;
    iotInstanceId?: string;
    maximumPerMinute?: number;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    srcVersion?: string[];
    tag?: CreateOTADynamicUpgradeJobRequestTag[];
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTADynamicUpgradeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOTADynamicUpgradeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareRequest extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    firmwareUrl?: string;
    iotInstanceId?: string;
    moduleName?: string;
    needToVerify?: boolean;
    productKey?: string;
    signMethod?: string;
    srcVersion?: string;
    type?: number;
    udi?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAFirmwareResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleRequest extends $tea.Model {
    aliasName?: string;
    desc?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobRequest extends $tea.Model {
    dnListFileUrl?: string;
    firmwareId?: string;
    grayPercent?: string;
    iotInstanceId?: string;
    maximumPerMinute?: number;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    scheduleFinishTime?: number;
    scheduleTime?: number;
    srcVersion?: string[];
    tag?: CreateOTAStaticUpgradeJobRequestTag[];
    targetDeviceName?: string[];
    targetSelection?: string;
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAStaticUpgradeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOTAStaticUpgradeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobRequest extends $tea.Model {
    firmwareId?: string;
    iotInstanceId?: string;
    needConfirm?: boolean;
    needPush?: boolean;
    productKey?: string;
    targetDeviceName?: string[];
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAVerifyJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateOTAVerifyJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductRequest extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    categoryKey?: string;
    dataFormat?: number;
    description?: string;
    id2?: boolean;
    iotInstanceId?: string;
    joinPermissionId?: string;
    netType?: string;
    nodeType?: number;
    productName?: string;
    protocolType?: string;
    publishAuto?: boolean;
    resourceGroupId?: string;
    validateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponseBody extends $tea.Model {
    code?: string;
    data?: CreateProductResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobRequest extends $tea.Model {
    productKey?: string;
    sourceInstanceId?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateProductDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTag?: CreateProductTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    invalidProductTags?: CreateProductTagsResponseBodyInvalidProductTags;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicRequest extends $tea.Model {
    desc?: string;
    iotInstanceId?: string;
    operation?: string;
    productKey?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    topicId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleRequest extends $tea.Model {
    dataType?: string;
    iotInstanceId?: string;
    name?: string;
    productKey?: string;
    resourceGroupId?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    topic?: string;
    topicType?: number;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleId?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionRequest extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    iotInstanceId?: string;
    ruleId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionResponseBody extends $tea.Model {
    actionId?: number;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRulengDistributeJobRequest extends $tea.Model {
    productKey?: string;
    sourceInstanceId?: string;
    targetInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRulengDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRulengDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateRulengDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleContent?: string;
    ruleDescription?: string;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechRequest extends $tea.Model {
    bizCode?: string;
    iotInstanceId?: string;
    projectCode?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenRequest extends $tea.Model {
    appId?: string;
    host?: string;
    iotInstanceId?: string;
    projectId?: string;
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponseBody extends $tea.Model {
    code?: string;
    data?: CreateStudioAppDomainOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateStudioAppDomainOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationRequest extends $tea.Model {
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    foundDeviceListFlag?: boolean;
    iotInstanceId?: string;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    iotInstanceId?: string;
    productKey?: string;
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    scriptContent?: string;
    scriptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableRequest extends $tea.Model {
    dstTopic?: string[];
    iotInstanceId?: string;
    srcTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    failureTopics?: CreateTopicRouteTableResponseBodyFailureTopics;
    isAllSucceed?: boolean;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: CreateTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationRequest extends $tea.Model {
    consumerGroupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteConsumerGroupSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileRequest extends $tea.Model {
    deviceName?: string;
    fileId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeviceFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    propKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverRequest extends $tea.Model {
    driverId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    routeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareRequest extends $tea.Model {
    firmwareId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleRequest extends $tea.Model {
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicRequest extends $tea.Model {
    iotInstanceId?: string;
    topicId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionRequest extends $tea.Model {
    actionId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    speechCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenRequest extends $tea.Model {
    appId?: string;
    domainId?: number;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteStudioAppDomainOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelRequest extends $tea.Model {
    eventIdentifier?: string[];
    functionBlockId?: string;
    iotInstanceId?: string;
    productKey?: string;
    propertyIdentifier?: string[];
    resourceGroupId?: string;
    serviceIdentifier?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableRequest extends $tea.Model {
    dstTopic?: string[];
    iotInstanceId?: string;
    srcTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    failureTopics?: DeleteTopicRouteTableResponseBodyFailureTopics;
    isAllSucceed?: boolean;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DeleteTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DisableDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DisableDeviceTunnelShareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DisableSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: DisableThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EnableDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EnableDeviceTunnelShareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EnableSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: EnableThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateDeviceNameListURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GenerateDeviceNameListURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLRequest extends $tea.Model {
    bizCode?: string;
    fileName?: string;
    fileSuffix?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateFileUploadURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GenerateFileUploadURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLRequest extends $tea.Model {
    fileSuffix?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateOTAUploadURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GenerateOTAUploadURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailRequest extends $tea.Model {
    apiSrn?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: GetDataAPIServiceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDataAPIServiceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    shadowMessage?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDeviceShadowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponseBody extends $tea.Model {
    code?: string;
    data?: GetDeviceStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDeviceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponseBody extends $tea.Model {
    code?: string;
    data?: GetDeviceTunnelShareStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDeviceTunnelShareStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetDeviceTunnelStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeDriverVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentRequest extends $tea.Model {
    deploymentId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceDeploymentResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    routeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceMessageRoutingResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: GetGatewayBySubDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetGatewayBySubDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    successCount?: number;
    successDevEuis?: GetLoraNodesTaskResponseBodySuccessDevEuis;
    taskId?: string;
    taskState?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetLoraNodesTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesAddingTaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesAddingTaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    successCount?: number;
    successDevEuis?: GetNodesAddingTaskResponseBodySuccessDevEuis;
    taskId?: string;
    taskState?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesAddingTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetNodesAddingTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleInfo?: GetRuleResponseBodyRuleInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionRequest extends $tea.Model {
    actionId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleActionInfo?: GetRuleActionResponseBodyRuleActionInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: GetSceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBody extends $tea.Model {
    code?: string;
    data?: GetSpeechVoiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetSpeechVoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponseBody extends $tea.Model {
    code?: string;
    data?: GetStudioAppTokenOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetStudioAppTokenOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    simple?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingModelTslResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetThingModelTslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    simple?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingModelTslPublishedResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetThingModelTslPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingScriptResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateRequest extends $tea.Model {
    categoryKey?: string;
    iotInstanceId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    thingModelJSON?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetThingTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageNo?: number;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingTopoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: GetThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    iotInstanceId?: string;
    productKey?: string;
    resourceGroupId?: string;
    tslStr?: string;
    tslUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ImportThingModelTslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceRequest extends $tea.Model {
    apiSrn?: string;
    iotInstanceId?: string;
    param?: InvokeDataAPIServiceRequestParam[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBody extends $tea.Model {
    code?: string;
    data?: InvokeDataAPIServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InvokeDataAPIServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceRequest extends $tea.Model {
    args?: string;
    deviceName?: string;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponseBody extends $tea.Model {
    code?: string;
    data?: InvokeThingServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InvokeThingServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceRequest extends $tea.Model {
    args?: string;
    deviceName?: string[];
    identifier?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: InvokeThingsServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataRequest extends $tea.Model {
    apiPath?: string;
    condition?: ListAnalyticsDataRequestCondition[];
    iotInstanceId?: string;
    isoId?: string;
    pageNum?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponseBody extends $tea.Model {
    code?: string;
    data?: ListAnalyticsDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListAnalyticsDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobRequest extends $tea.Model {
    currentPage?: number;
    jobId?: string;
    nextToken?: string;
    pageSize?: number;
    status?: number;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    data?: ListDeviceDistributeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    pageSize?: number;
    productKey?: string;
    sourceInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ListDistributedDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListDistributedDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductRequest extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    productKey?: string;
    sourceInstanceId?: string;
    targetInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBody extends $tea.Model {
    code?: string;
    data?: ListDistributedProductResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListDistributedProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBody extends $tea.Model {
    code?: string;
    data?: ListJobResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareRequest extends $tea.Model {
    currentPage?: number;
    destVersion?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    errorMessage?: string;
    firmwareInfo?: ListOTAFirmwareResponseBodyFirmwareInfo;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    firmwareId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAJobByDeviceResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAJobByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareRequest extends $tea.Model {
    currentPage?: number;
    firmwareId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAJobByFirmwareResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAJobByFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponseBody extends $tea.Model {
    code?: string;
    data?: ListOTAModuleByProductResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAModuleByProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAModuleVersionsByDeviceResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAModuleVersionsByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobRequest extends $tea.Model {
    currentPage?: number;
    deviceNames?: string[];
    iotInstanceId?: string;
    jobId?: string;
    pageSize?: number;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTATaskByJobResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTATaskByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ListOTAUnfinishedTaskByDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListOTAUnfinishedTaskByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    productTag?: ListProductByTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    productInfos?: ListProductByTagsResponseBodyProductInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListProductByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBody extends $tea.Model {
    code?: string;
    data?: ListProductTagsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBody extends $tea.Model {
    code?: string;
    data?: ListRuleResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleActionList?: ListRuleActionsResponseBodyRuleActionList;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListRuleActionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskRequest extends $tea.Model {
    device?: string;
    iotInstanceId?: string;
    jobId?: string;
    limit?: number;
    nextToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBody extends $tea.Model {
    code?: string;
    data?: ListTaskResponseBodyData;
    errorMessage?: string;
    nextToken?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskByPageRequest extends $tea.Model {
    device?: string;
    deviceName?: string;
    iotInstanceId?: string;
    jobId?: string;
    jobName?: string;
    pageNo?: string;
    pageSize?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskByPageResponseBody extends $tea.Model {
    code?: string;
    data?: ListTaskByPageResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskByPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListTaskByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBody extends $tea.Model {
    code?: string;
    data?: ListThingModelVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListThingModelVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponseBody extends $tea.Model {
    code?: string;
    data?: ListThingTemplatesResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ListThingTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoRequest extends $tea.Model {
    deviceListStr?: string;
    gwDeviceName?: string;
    gwIotId?: string;
    gwProductKey?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: NotifyAddThingTopoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: NotifyAddThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceRequest extends $tea.Model {
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: OpenIotServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    paramsJsonString?: string;
    productKey?: string;
    projectCode?: string;
    templateBizCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: PrintByTemplateResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PrintByTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubRequest extends $tea.Model {
    correlationData?: string;
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    qos?: number;
    responseTopic?: string;
    topicFullName?: string;
    userProp?: PubRequestUserProp[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastRequest extends $tea.Model {
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PubBroadcastResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppRequest extends $tea.Model {
    appId?: string;
    description?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PublishStudioAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PublishThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechRequest extends $tea.Model {
    deviceName?: string;
    groupId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    projectCode?: string;
    pushMode?: string;
    speechCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: PushSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListRequest extends $tea.Model {
    appKey?: string;
    categoryKeyList?: string[];
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    productKeyList?: string[];
    tagList?: QueryAppDeviceListRequestTagList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAppDeviceListResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryAppDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryBatchRegisterDeviceStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryBatchRegisterDeviceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdResponseBody extends $tea.Model {
    certUrl?: string;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryCertUrlByApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponseBody extends $tea.Model {
    code?: string;
    data?: QueryConsumerGroupByGroupIdResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryConsumerGroupByGroupIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListRequest extends $tea.Model {
    currentPage?: number;
    fuzzy?: boolean;
    groupName?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryConsumerGroupListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryConsumerGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBody extends $tea.Model {
    accumulatedConsumeCountPerMinute?: number;
    accumulationCount?: number;
    clientConnectionStatusList?: QueryConsumerGroupStatusResponseBodyClientConnectionStatusList;
    code?: string;
    consumerSpeed?: number;
    errorMessage?: string;
    lastConsumerTime?: string;
    realTimeConsumeCountPerMinute?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryConsumerGroupStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleId?: string;
    startTime?: number;
    traceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDetailSceneRuleLogResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDetailSceneRuleLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    nextToken?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceResponseBodyData;
    errorMessage?: string;
    nextToken?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLRequest extends $tea.Model {
    iotInstanceId?: string;
    SQL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceBySQLResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceBySQLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    resourceGroupId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceByStatusResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceByStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    tag?: QueryDeviceByTagsRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceByTagsResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponseBody extends $tea.Model {
    code?: string;
    deviceCertInfo?: QueryDeviceCertResponseBodyDeviceCertInfo;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceCertResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyRequest extends $tea.Model {
    deviceName?: string;
    functionBlockId?: string;
    identifier?: string[];
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDesiredPropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceDesiredPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    file?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceDistributeDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDistributeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    eventType?: string;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceEventDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceEventDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileRequest extends $tea.Model {
    deviceName?: string;
    fileId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceFileResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryDeviceFileListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceFileListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    groupInfos?: QueryDeviceGroupByDeviceResponseBodyGroupInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceGroupByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    tag?: QueryDeviceGroupByTagsRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupByTagsResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceGroupByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupInfoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListRequest extends $tea.Model {
    currentPage?: number;
    groupName?: string;
    iotInstanceId?: string;
    pageSize?: number;
    superGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryDeviceGroupListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupTagListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceGroupTagListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceInfoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupRequest extends $tea.Model {
    currentPage?: number;
    groupId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceListByDeviceGroupResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceListByDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalEventDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceOriginalEventDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalPropertyDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceOriginalPropertyDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalPropertyStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceOriginalPropertyStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalServiceDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceOriginalServiceDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    props?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string[];
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    nextTime?: number;
    nextValid?: boolean;
    propertyDataInfos?: QueryDevicePropertiesDataResponseBodyPropertyDataInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDevicePropertiesDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicePropertyDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDevicePropertyDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusRequest extends $tea.Model {
    deviceName?: string;
    functionBlockId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicePropertyStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDevicePropertyStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceServiceDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceServiceDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceStatisticsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryDeviceStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverRequest extends $tea.Model {
    currentPage?: number;
    driverName?: string;
    iotInstanceId?: string;
    pageSize?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionRequest extends $tea.Model {
    currentPage?: number;
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    pageSize?: number;
    versionState?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeDriverVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    name?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelRequest extends $tea.Model {
    channelName?: string;
    currentPage?: number;
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceChannelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverRequest extends $tea.Model {
    channelId?: string;
    currentPage?: number;
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDeviceByDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceDeviceByDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    gatewayList?: QueryEdgeInstanceGatewayResponseBodyGatewayList[];
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceGatewayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceHistoricDeploymentResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceHistoricDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceMessageRoutingResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceSceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryEdgeInstanceSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryJobStatisticsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryJobStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    joinPermissions?: QueryLoRaJoinPermissionsResponseBodyJoinPermissions;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryLoRaJoinPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    uniMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    message?: QueryMessageInfoResponseBodyMessage;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryMessageInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareRequest extends $tea.Model {
    firmwareId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    firmwareInfo?: QueryOTAFirmwareResponseBodyFirmwareInfo;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryOTAJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryOTAJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdRequest extends $tea.Model {
    applyId?: number;
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBody extends $tea.Model {
    applyDeviceList?: QueryPageByApplyIdResponseBodyApplyDeviceList;
    code?: string;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryPageByApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    productCertInfo?: QueryProductCertInfoResponseBodyProductCertInfo;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryProductCertInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListRequest extends $tea.Model {
    aliyunCommodityCode?: string;
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryProductListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductTopicResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageRequest extends $tea.Model {
    fuzzyGroupName?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySolutionDeviceGroupPageResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySolutionDeviceGroupPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    speechCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySpeechListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    pushMode?: string;
    statusList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySpeechPushJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySpeechPushJobDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobSpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySpeechPushJobSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppDomainListOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryStudioAppDomainListOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListRequest extends $tea.Model {
    fuzzyName?: string;
    iotInstanceId?: string;
    pageNo?: number;
    pageSize?: number;
    projectId?: string;
    types?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryStudioAppListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    isRelease?: boolean;
    pageNo?: number;
    pageSize?: number;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppPageListOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryStudioAppPageListOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    pageNo?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioProjectListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryStudioProjectListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    errorMessage?: string;
    foundDeviceListFlag?: boolean;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleId?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySummarySceneRuleLogResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySummarySceneRuleLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySuperDeviceGroupResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QuerySuperDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBody extends $tea.Model {
    code?: string;
    data?: QueryTaskResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelExtendConfigResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryThingModelExtendConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelExtendConfigPublishedResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryThingModelExtendConfigPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelPublishedResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryThingModelPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableRequest extends $tea.Model {
    iotInstanceId?: string;
    regionId?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    srcTopics?: QueryTopicReverseRouteTableResponseBodySrcTopics;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryTopicReverseRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableRequest extends $tea.Model {
    iotInstanceId?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    dstTopics?: QueryTopicRouteTableResponseBodyDstTopics;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: QueryTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    requestBase64Byte?: string;
    timeout?: number;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: number;
    payloadBase64Byte?: string;
    requestId?: string;
    rrpcCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RRpcResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    password?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RefreshDeviceTunnelSharePasswordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponseBody extends $tea.Model {
    code?: string;
    data?: RefreshStudioAppTokenOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RefreshStudioAppTokenOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceRequest extends $tea.Model {
    appKey?: string;
    devEui?: string;
    deviceName?: string;
    iotInstanceId?: string;
    joinEui?: string;
    loraNodeType?: string;
    nickname?: string;
    pinCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: RegisterDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReleaseEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReleaseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RemoveThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayRequest extends $tea.Model {
    currentGatewayId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    newGatewayId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ReplaceEdgeInstanceGatewayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: RerunJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ResetConsumerGroupPositionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: ResetThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    props?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SaveDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    versions?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponseBody extends $tea.Model {
    code?: string;
    data?: SetDeviceDesiredPropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDeviceDesiredPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    tagString?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDeviceGroupTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponseBody extends $tea.Model {
    code?: string;
    data?: SetDevicePropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDevicePropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetDevicesPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    configs?: SetEdgeInstanceDriverConfigsRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    issueModel?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetProductCertInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationRequest extends $tea.Model {
    iotInstanceId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetStudioProjectCooperationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenRequest extends $tea.Model {
    appId?: string;
    authMode?: number;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBody extends $tea.Model {
    code?: string;
    data?: SetupStudioAppAuthModeOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SetupStudioAppAuthModeOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationRequest extends $tea.Model {
    combinationList?: string[];
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SpeechByCombinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCpuRequest extends $tea.Model {
    iotId?: string;
    iotInstanceId?: string;
    targetValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCpuResponseBody extends $tea.Model {
    code?: string;
    data?: StartCpuResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCpuResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StartCpuResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StartRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: StopRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationRequest extends $tea.Model {
    combinationList?: string[];
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponseBody extends $tea.Model {
    code?: string;
    data?: SyncSpeechByCombinationResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: SyncSpeechByCombinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    projectCode?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: TestSpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: TestSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: TriggerSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceRequest extends $tea.Model {
    applicationId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnbindApplicationFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnbindDriverFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnbindRoleFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UnbindSceneRuleFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    newGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupRequest extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowRequest extends $tea.Model {
    deltaUpdate?: boolean;
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    shadowMessage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateDeviceShadowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionRequest extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    iotInstanceId?: string;
    sourceConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceRequest extends $tea.Model {
    bizEnable?: boolean;
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    spec?: number;
    tags?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelRequest extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configs?: UpdateEdgeInstanceChannelRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    routeId?: number;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetIotHubQos?: number;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobId?: string;
    rolloutConfig?: string;
    timeoutConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleRequest extends $tea.Model {
    aliasName?: string;
    desc?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    propertyTimestampFilter?: boolean;
    propertyValueFilter?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateProductFilterConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTag?: UpdateProductTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    invalidProductTags?: UpdateProductTagsResponseBodyInvalidProductTags;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicRequest extends $tea.Model {
    desc?: string;
    iotInstanceId?: string;
    operation?: string;
    topicId?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    ruleId?: number;
    select?: string;
    shortTopic?: string;
    topic?: string;
    topicType?: number;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionRequest extends $tea.Model {
    actionId?: number;
    configuration?: string;
    iotInstanceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleContent?: string;
    ruleDescription?: string;
    ruleId?: string;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    projectCode?: string;
    speechCode?: string;
    speechRate?: number;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationRequest extends $tea.Model {
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    foundDeviceListFlag?: boolean;
    iotInstanceId?: string;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    identifier?: string;
    iotInstanceId?: string;
    productKey?: string;
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelValidationConfigRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    validateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelValidationConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelValidationConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateThingModelValidationConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    scriptContent?: string;
    scriptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    body: UpdateThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsRequestDevice extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoRequestTopoAddItem extends $tea.Model {
    clientId?: string;
    deviceName?: string;
    productKey?: string;
    sign?: string;
    signMethod?: string;
    timestamp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectRequestDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesRequestDeviceNameList extends $tea.Model {
    deviceName?: string;
    deviceNickname?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList extends $tea.Model {
    invalidDeviceName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList extends $tea.Model {
    invalidDeviceNickname?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyData extends $tea.Model {
    applyId?: number;
    invalidDeviceNameList?: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList;
    invalidDeviceNicknameList?: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsRequestDevice extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponseBodyData extends $tea.Model {
    bindStatus?: number;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus extends $tea.Model {
    asAddress?: string;
    deviceId?: string;
    deviceName?: string;
    iotId?: string;
    lastOnlineTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBodyDeviceStatusList extends $tea.Model {
    deviceStatus?: BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponseBodyDriverList extends $tea.Model {
    cpuArch?: string;
    driverId?: string;
    driverName?: string;
    driverProtocol?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    isBuiltIn?: boolean;
    runtime?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList extends $tea.Model {
    config?: BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannel extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configList?: BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyData extends $tea.Model {
    channel?: BatchGetEdgeInstanceChannelResponseBodyDataChannel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList extends $tea.Model {
    channelId?: string;
    channelName?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig extends $tea.Model {
    content?: string;
    format?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList extends $tea.Model {
    config?: BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList extends $tea.Model {
    driverId?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList extends $tea.Model {
    configList?: BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList[];
    driverId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBodyDataData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    iotId?: string;
    nickname?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    region?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBodyData extends $tea.Model {
    data?: BatchQueryDeviceDetailResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBodyData extends $tea.Model {
    applyId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponseBodyData extends $tea.Model {
    applyId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs extends $tea.Model {
    content?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesRequestDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameRequestDeviceNicknameInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequestRequestParam extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequestResponseParam extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponseBodyData extends $tea.Model {
    apiSrn?: string;
    createTime?: number;
    lastUpdateTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobRequestTargetInstanceConfig extends $tea.Model {
    targetInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponseBodyData extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponseBodyData extends $tea.Model {
    ossAddress?: string;
    ossPreSignedAddress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskRequestDeviceInfo extends $tea.Model {
    devEui?: string;
    pinCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponseBodyData extends $tea.Model {
    firmwareId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponseBodyData extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    dataFormat?: number;
    description?: string;
    id2?: boolean;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    productSecret?: string;
    protocolType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    productTag?: CreateProductTagsResponseBodyInvalidProductTagsProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponseBodyData extends $tea.Model {
    appId?: string;
    host?: string;
    id?: number;
    isBeian?: string;
    projectId?: string;
    protocol?: string;
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    topic?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    topic?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponseBodyData extends $tea.Model {
    accessKeyId?: string;
    fileUrl?: string;
    host?: string;
    key?: string;
    objectStorage?: string;
    policy?: string;
    signature?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponseBodyData extends $tea.Model {
    host?: string;
    key?: string;
    objectStorage?: string;
    ossAccessKeyId?: string;
    policy?: string;
    signature?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponseBodyData extends $tea.Model {
    firmwareUrl?: string;
    host?: string;
    key?: string;
    OSSAccessKeyId?: string;
    objectStorage?: string;
    policy?: string;
    signature?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams extends $tea.Model {
    requestParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams extends $tea.Model {
    responseParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO extends $tea.Model {
    originSql?: string;
    requestParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams;
    responseParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams;
    templateSql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyData extends $tea.Model {
    apiPath?: string;
    apiSrn?: string;
    createTime?: number;
    dateFormat?: string;
    description?: string;
    displayName?: string;
    lastUpdateTime?: number;
    requestMethod?: string;
    requestProtocol?: string;
    sqlTemplateDTO?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponseBodyData extends $tea.Model {
    status?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponseBodyData extends $tea.Model {
    gmtOpened?: number;
    isOpen?: boolean;
    password?: string;
    shareId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponseBodyData extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    sourceConfig?: string;
    versionState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponseBodyData extends $tea.Model {
    bizEnable?: boolean;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    instanceId?: string;
    latestDeploymentStatus?: number;
    latestDeploymentType?: string;
    name?: string;
    roleArn?: string;
    roleAttachTime?: string;
    roleAttachTimestamp?: number;
    roleName?: string;
    spec?: number;
    tags?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList extends $tea.Model {
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    log?: string;
    operateType?: number;
    resourceId?: string;
    resourceName?: string;
    resourceType?: string;
    snapshotId?: string;
    stage?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyDataTaskList extends $tea.Model {
    gatewayId?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    resourceSnapshotList?: GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList[];
    stage?: number;
    status?: number;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyData extends $tea.Model {
    deploymentId?: string;
    description?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    status?: number;
    taskList?: GetEdgeInstanceDeploymentResponseBodyDataTaskList[];
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext extends $tea.Model {
    qos?: string;
    sourceApplicationName?: string;
    sourceFcFunctionName?: string;
    sourceFcServiceName?: string;
    targetApplicationName?: string;
    targetFcFunctionName?: string;
    targetFcServiceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    name?: string;
    routeContext?: GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    gmtOnline?: string;
    ipAddress?: string;
    nodeType?: string;
    productKey?: string;
    productName?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    utcOnline?: string;
    iotId?: string;
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponseBodySuccessDevEuis extends $tea.Model {
    successDevEui?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesAddingTaskResponseBodySuccessDevEuis extends $tea.Model {
    successDevEui?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponseBodyRuleInfo extends $tea.Model {
    createUserId?: number;
    created?: string;
    dataType?: string;
    id?: number;
    modified?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    status?: string;
    topic?: string;
    topicType?: number;
    utcCreated?: string;
    utcModified?: string;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponseBodyRuleActionInfo extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    id?: number;
    ruleId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponseBodyData extends $tea.Model {
    gmtCreate?: number;
    gmtModified?: number;
    ruleContent?: string;
    ruleDescription?: string;
    ruleName?: string;
    ruleStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItemsVoiceListItems extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItemsVoiceList extends $tea.Model {
    items?: GetSpeechVoiceResponseBodyDataItemsVoiceListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItems extends $tea.Model {
    label?: string;
    value?: string;
    voiceList?: GetSpeechVoiceResponseBodyDataItemsVoiceList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyData extends $tea.Model {
    items?: GetSpeechVoiceResponseBodyDataItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponseBodyData extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponseBodyData extends $tea.Model {
    tslStr?: string;
    tslUri?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponseBodyData extends $tea.Model {
    tslStr?: string;
    tslUri?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponseBodyData extends $tea.Model {
    scriptType?: string;
    scriptUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyDataListDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyDataList extends $tea.Model {
    deviceInfo?: GetThingTopoResponseBodyDataListDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyData extends $tea.Model {
    currentPage?: number;
    list?: GetThingTopoResponseBodyDataList;
    pageCount?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceRequestParam extends $tea.Model {
    listParamType?: string;
    listParamValue?: string[];
    paramName?: string;
    paramType?: string;
    paramValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyDataFieldNameList extends $tea.Model {
    fieldNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyDataResultList extends $tea.Model {
    resultList?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyData extends $tea.Model {
    apiSrn?: string;
    fieldNameList?: InvokeDataAPIServiceResponseBodyDataFieldNameList;
    pageNo?: number;
    pageSize?: number;
    resultList?: InvokeDataAPIServiceResponseBodyDataResultList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponseBodyData extends $tea.Model {
    messageId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataRequestCondition extends $tea.Model {
    betweenEnd?: string;
    betweenStart?: string;
    fieldName?: string;
    operate?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponseBodyData extends $tea.Model {
    count?: number;
    hasNext?: boolean;
    pageNum?: number;
    pageSize?: number;
    resultJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs extends $tea.Model {
    targetInstanceConfigs?: ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItems extends $tea.Model {
    gmtCreate?: number;
    jobId?: string;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    status?: number;
    strategy?: number;
    targetInstanceConfigs?: ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs;
    targetUid?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfo extends $tea.Model {
    items?: ListDeviceDistributeJobResponseBodyDataJobInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyData extends $tea.Model {
    jobInfo?: ListDeviceDistributeJobResponseBodyDataJobInfo;
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyDataInfoItems extends $tea.Model {
    deviceName?: string;
    gmtCreate?: number;
    gmtModified?: number;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyDataInfo extends $tea.Model {
    items?: ListDistributedDeviceResponseBodyDataInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyData extends $tea.Model {
    info?: ListDistributedDeviceResponseBodyDataInfo;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyDataInfoItems extends $tea.Model {
    gmtCreate?: number;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyDataInfo extends $tea.Model {
    items?: ListDistributedProductResponseBodyDataInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyData extends $tea.Model {
    info?: ListDistributedProductResponseBodyDataInfo;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBodyDataData extends $tea.Model {
    description?: string;
    jobId?: string;
    jobName?: string;
    scheduledTime?: number;
    status?: string;
    type?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBodyData extends $tea.Model {
    data?: ListJobResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareId?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    moduleName?: string;
    productKey?: string;
    productName?: string;
    signMethod?: string;
    srcVersion?: string;
    status?: number;
    type?: number;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    simpleFirmwareInfo?: ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    otaTagDTO?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    firmwareId?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    productKey?: string;
    selectionType?: string;
    tags?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags;
    targetSelection?: string;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyData extends $tea.Model {
    simpleOTAJobInfo?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    otaTagDTO?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    firmwareId?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    productKey?: string;
    selectionType?: string;
    tags?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags;
    targetSelection?: string;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyData extends $tea.Model {
    simpleOTAJobInfo?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponseBodyData extends $tea.Model {
    aliasName?: string;
    desc?: string;
    gmtCreate?: string;
    gmtModified?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    moduleName?: string;
    moduleVersion?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBodyData extends $tea.Model {
    simpleOTAModuleInfo?: ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    destVersion?: string;
    deviceName?: string;
    firmwareId?: string;
    iotId?: string;
    jobId?: string;
    productKey?: string;
    productName?: string;
    progress?: string;
    srcVersion?: string;
    taskDesc?: string;
    taskId?: string;
    taskStatus?: string;
    timeout?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBodyData extends $tea.Model {
    simpleOTATaskInfo?: ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    destVersion?: string;
    deviceName?: string;
    firmwareId?: string;
    iotId?: string;
    jobId?: string;
    moduleName?: string;
    productKey?: string;
    productName?: string;
    srcVersion?: string;
    taskId?: string;
    taskStatus?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBodyData extends $tea.Model {
    simpleOTATaskInfo?: ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBodyProductInfosProductInfo extends $tea.Model {
    createTime?: number;
    description?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBodyProductInfos extends $tea.Model {
    productInfo?: ListProductByTagsResponseBodyProductInfosProductInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBodyDataProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBodyData extends $tea.Model {
    productTag?: ListProductTagsResponseBodyDataProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBodyDataRuleInfo extends $tea.Model {
    createUserId?: number;
    created?: string;
    dataType?: string;
    id?: number;
    modified?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    status?: string;
    topic?: string;
    utcCreated?: string;
    utcModified?: string;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBodyData extends $tea.Model {
    ruleInfo?: ListRuleResponseBodyDataRuleInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBodyRuleActionListRuleActionInfo extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    id?: number;
    ruleId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBodyRuleActionList extends $tea.Model {
    ruleActionInfo?: ListRuleActionsResponseBodyRuleActionListRuleActionInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBodyDataData extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    jobId?: string;
    jobName?: string;
    productKey?: string;
    progress?: string;
    status?: string;
    taskId?: string;
    utcModified?: string;
    utcQueueTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBodyData extends $tea.Model {
    data?: ListTaskResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskByPageResponseBodyDataData extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    jobId?: string;
    jobName?: string;
    productKey?: string;
    productName?: string;
    progress?: number;
    status?: string;
    statusDetail?: string;
    taskId?: string;
    utcModified?: string;
    utcQueueTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskByPageResponseBodyData extends $tea.Model {
    data?: ListTaskByPageResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBodyDataModelVersions extends $tea.Model {
    description?: string;
    gmtCreate?: number;
    modelVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBodyData extends $tea.Model {
    modelVersions?: ListThingModelVersionResponseBodyDataModelVersions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponseBodyData extends $tea.Model {
    categoryKey?: string;
    categoryName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponseBodyData extends $tea.Model {
    messageId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponseBodyData extends $tea.Model {
    deviceErrorCode?: string;
    deviceErrorMessage?: string;
    id?: string;
    maxRetryCount?: number;
    retryCount?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubRequestUserProp extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListRequestTagList extends $tea.Model {
    tagName?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListResponseBodyDataData extends $tea.Model {
    activeTime?: string;
    childDeviceCount?: number;
    createTime?: string;
    deviceName?: string;
    lastOnlineTime?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    status?: string;
    utcActiveTime?: string;
    utcCreateTime?: string;
    utcLastOnlineTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppDeviceListResponseBodyData extends $tea.Model {
    data?: QueryAppDeviceListResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList extends $tea.Model {
    name?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataValidList extends $tea.Model {
    name?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyData extends $tea.Model {
    invalidList?: QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList;
    status?: string;
    validList?: QueryBatchRegisterDeviceStatusResponseBodyDataValidList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponseBodyData extends $tea.Model {
    createTime?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBodyDataConsumerGroupDTO extends $tea.Model {
    createTime?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBodyData extends $tea.Model {
    consumerGroupDTO?: QueryConsumerGroupListResponseBodyDataConsumerGroupDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo extends $tea.Model {
    accumulatedConsumeCountPerMinute?: number;
    clientId?: string;
    clientIpPort?: string;
    onlineTime?: number;
    realTimeConsumeCountPerMinute?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBodyClientConnectionStatusList extends $tea.Model {
    consumerGroupClientConnectionInfo?: QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBodyDataLogList extends $tea.Model {
    code?: string;
    message?: string;
    pkDn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBodyData extends $tea.Model {
    currentPage?: number;
    logList?: QueryDetailSceneRuleLogResponseBodyDataLogList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyDataDeviceInfo extends $tea.Model {
    deviceId?: string;
    deviceName?: string;
    deviceSecret?: string;
    deviceStatus?: string;
    deviceType?: string;
    gmtCreate?: string;
    gmtModified?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyData extends $tea.Model {
    deviceInfo?: QueryDeviceResponseBodyDataDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataGroups extends $tea.Model {
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataOTAModules extends $tea.Model {
    firmwareVersion?: string;
    moduleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataTags extends $tea.Model {
    tagName?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyData extends $tea.Model {
    activeTime?: string;
    deviceName?: string;
    gmtCreate?: string;
    gmtModified?: string;
    groups?: QueryDeviceBySQLResponseBodyDataGroups[];
    iotId?: string;
    nickname?: string;
    OTAModules?: QueryDeviceBySQLResponseBodyDataOTAModules[];
    productKey?: string;
    status?: string;
    tags?: QueryDeviceBySQLResponseBodyDataTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    gmtCreate?: string;
    gmtModified?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    status?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsRequestTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponseBodyDeviceCertInfo extends $tea.Model {
    certSN?: string;
    certificate?: string;
    privateKey?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo extends $tea.Model {
    dataType?: string;
    identifier?: string;
    name?: string;
    time?: string;
    unit?: string;
    value?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyDataList extends $tea.Model {
    desiredPropertyInfo?: QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    list?: QueryDeviceDesiredPropertyResponseBodyDataList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    gmtOnline?: string;
    iotId?: string;
    ipAddress?: string;
    nickname?: string;
    nodeType?: number;
    owner?: boolean;
    productKey?: string;
    productName?: string;
    region?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    utcOnline?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    targetInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs extends $tea.Model {
    targetInstanceConfigs?: QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyData extends $tea.Model {
    gmtCreate?: number;
    jobId?: string;
    productKey?: string;
    sourceInstanceId?: string;
    sourceUid?: string;
    status?: number;
    strategy?: number;
    targetInstanceConfigs?: QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs;
    targetUid?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyDataListEventInfo extends $tea.Model {
    eventType?: string;
    identifier?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyDataList extends $tea.Model {
    eventInfo?: QueryDeviceEventDataResponseBodyDataListEventInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceEventDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponseBodyData extends $tea.Model {
    downloadUrl?: string;
    fileId?: string;
    name?: string;
    size?: string;
    utcCreatedOn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBodyDataFileSummary extends $tea.Model {
    fileId?: string;
    name?: string;
    size?: string;
    utcCreatedOn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBodyData extends $tea.Model {
    fileSummary?: QueryDeviceFileListResponseBodyDataFileSummary[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBodyGroupInfos extends $tea.Model {
    groupInfo?: QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsRequestTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBodyDataDeviceGroup extends $tea.Model {
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBodyData extends $tea.Model {
    deviceGroup?: QueryDeviceGroupByTagsResponseBodyDataDeviceGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponseBodyData extends $tea.Model {
    deviceActive?: number;
    deviceCount?: number;
    deviceOnline?: number;
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBodyDataGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBodyData extends $tea.Model {
    groupInfo?: QueryDeviceGroupListResponseBodyDataGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBodyDataGroupTagInfo extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBodyData extends $tea.Model {
    groupTagInfo?: QueryDeviceGroupTagListResponseBodyDataGroupTagInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyDataListEventInfo extends $tea.Model {
    eventType?: string;
    identifier?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyDataList extends $tea.Model {
    eventInfo?: QueryDeviceOriginalEventDataResponseBodyDataListEventInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalEventDataResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    time?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyDataList extends $tea.Model {
    propertyInfo?: QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalPropertyDataResponseBodyDataList;
    nextValid?: boolean;
    nextPageToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo extends $tea.Model {
    identifier?: string;
    time?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyDataList extends $tea.Model {
    propertyStatusDataInfo?: QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalPropertyStatusResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    identifier?: string;
    inputData?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyDataList extends $tea.Model {
    serviceInfo?: QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalServiceDataResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo extends $tea.Model {
    time?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList extends $tea.Model {
    propertyInfo?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo extends $tea.Model {
    identifier?: string;
    list?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfos extends $tea.Model {
    propertyDataInfo?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    time?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyDataList extends $tea.Model {
    propertyInfo?: QueryDevicePropertyDataResponseBodyDataListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyData extends $tea.Model {
    list?: QueryDevicePropertyDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo extends $tea.Model {
    dataType?: string;
    identifier?: string;
    name?: string;
    time?: string;
    unit?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyDataList extends $tea.Model {
    propertyStatusInfo?: QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyData extends $tea.Model {
    list?: QueryDevicePropertyStatusResponseBodyDataList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    identifier?: string;
    inputData?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyDataList extends $tea.Model {
    serviceInfo?: QueryDeviceServiceDataResponseBodyDataListServiceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceServiceDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponseBodyData extends $tea.Model {
    activeCount?: number;
    deviceCount?: number;
    onlineCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBodyDataDriverList extends $tea.Model {
    cpuArch?: string;
    driverId?: string;
    driverName?: string;
    driverProtocol?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    isBuiltIn?: boolean;
    runtime?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverList?: QueryEdgeDriverResponseBodyDataDriverList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBodyDataDriverVersionList extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    sourceConfig?: string;
    versionState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverVersionList?: QueryEdgeDriverVersionResponseBodyDataDriverVersionList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBodyDataInstanceList extends $tea.Model {
    bizEnable?: boolean;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    instanceId?: string;
    latestDeploymentStatus?: number;
    latestDeploymentType?: string;
    name?: string;
    roleArn?: string;
    roleAttachTime?: string;
    roleAttachTimestamp?: number;
    roleName?: string;
    spec?: number;
    tags?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBodyData extends $tea.Model {
    currentPage?: number;
    instanceList?: QueryEdgeInstanceResponseBodyDataInstanceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList extends $tea.Model {
    config?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannel extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configList?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelList extends $tea.Model {
    channel?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyData extends $tea.Model {
    channelList?: QueryEdgeInstanceChannelResponseBodyDataChannelList;
    currentPage?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBodyDataDeviceList extends $tea.Model {
    deviceName?: string;
    driverId?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBodyData extends $tea.Model {
    currentPage?: number;
    deviceList?: QueryEdgeInstanceDeviceResponseBodyDataDeviceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList extends $tea.Model {
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    deviceList?: QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBodyDataDriverList extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    gmtCreate?: string;
    gmtModified?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverList?: QueryEdgeInstanceDriverResponseBodyDataDriverList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponseBodyGatewayList extends $tea.Model {
    deviceName?: string;
    edgeVersion?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList extends $tea.Model {
    deploymentId?: string;
    description?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBodyData extends $tea.Model {
    currentPage?: number;
    deploymentList?: QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext extends $tea.Model {
    qos?: string;
    sourceApplicationName?: string;
    sourceFcFunctionName?: string;
    sourceFcServiceName?: string;
    targetApplicationName?: string;
    targetFcFunctionName?: string;
    targetFcServiceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute extends $tea.Model {
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    name?: string;
    routeContext?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext;
    routeId?: number;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList extends $tea.Model {
    messageRoute?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    currentPage?: number;
    messageRouteList?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBodyDataRuleList extends $tea.Model {
    gmtCreate?: number;
    isExisted?: number;
    ruleId?: string;
    ruleName?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBodyData extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    ruleList?: QueryEdgeInstanceSceneRuleResponseBodyDataRuleList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataJobFile extends $tea.Model {
    fileUrl?: string;
    sign?: string;
    signMethod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataRolloutConfig extends $tea.Model {
    maximumPerMinute?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfigTargetDevices extends $tea.Model {
    targetDevices?: QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfig extends $tea.Model {
    targetDevices?: QueryJobResponseBodyDataTargetConfigTargetDevices;
    targetGroup?: string;
    targetProduct?: string;
    targetType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTimeoutConfig extends $tea.Model {
    inProgressTimeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyData extends $tea.Model {
    description?: string;
    jobDocument?: string;
    jobFile?: QueryJobResponseBodyDataJobFile;
    jobId?: string;
    jobName?: string;
    rolloutConfig?: QueryJobResponseBodyDataRolloutConfig;
    scheduledTime?: number;
    status?: string;
    targetConfig?: QueryJobResponseBodyDataTargetConfig;
    timeoutConfig?: QueryJobResponseBodyDataTimeoutConfig;
    type?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponseBodyData extends $tea.Model {
    cancelled?: number;
    failed?: number;
    inProgress?: number;
    queued?: number;
    rejected?: number;
    sent?: number;
    succeeded?: number;
    timeOut?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission extends $tea.Model {
    classMode?: string;
    enabled?: boolean;
    joinPermissionId?: string;
    joinPermissionName?: string;
    joinPermissionType?: string;
    ownerAliyunPk?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBodyJoinPermissions extends $tea.Model {
    joinPermission?: QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBodyMessageUserProperties extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBodyMessage extends $tea.Model {
    generateTime?: number;
    messageContent?: string;
    topicFullName?: string;
    uniMsgId?: string;
    userProperties?: QueryMessageInfoResponseBodyMessageUserProperties[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareId?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    firmwareUrl?: string;
    moduleName?: string;
    productKey?: string;
    productName?: string;
    signMethod?: string;
    srcVersion?: string;
    status?: number;
    type?: number;
    udi?: string;
    utcCreate?: string;
    utcModified?: string;
    verifyProgress?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataSrcVersions extends $tea.Model {
    srcVersion?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataTags extends $tea.Model {
    otaTagDTO?: QueryOTAJobResponseBodyDataTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyData extends $tea.Model {
    destVersion?: string;
    dynamicMode?: number;
    firmwareId?: string;
    grayPercent?: string;
    jobDesc?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    maximumPerMinute?: number;
    name?: string;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    selectionType?: string;
    srcVersions?: QueryOTAJobResponseBodyDataSrcVersions;
    tags?: QueryOTAJobResponseBodyDataTags;
    targetSelection?: string;
    timeoutInMinutes?: number;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcScheduleFinishTime?: string;
    utcScheduleTime?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo extends $tea.Model {
    deviceId?: string;
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBodyApplyDeviceList extends $tea.Model {
    applyDeviceInfo?: QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponseBodyData extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    categoryKey?: string;
    categoryName?: string;
    dataFormat?: number;
    description?: string;
    deviceCount?: number;
    gmtCreate?: number;
    id2?: boolean;
    netType?: number;
    nodeType?: number;
    owner?: boolean;
    productKey?: string;
    productName?: string;
    productSecret?: string;
    productStatus?: string;
    protocolType?: string;
    validateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponseBodyProductCertInfo extends $tea.Model {
    issueModel?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataListProductInfo extends $tea.Model {
    authType?: string;
    dataFormat?: number;
    description?: string;
    deviceCount?: number;
    gmtCreate?: number;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataList extends $tea.Model {
    productInfo?: QueryProductListResponseBodyDataListProductInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyData extends $tea.Model {
    currentPage?: number;
    list?: QueryProductListResponseBodyDataList;
    pageCount?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBodyDataProductTopicInfo extends $tea.Model {
    desc?: string;
    id?: string;
    operation?: string;
    productKey?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBodyData extends $tea.Model {
    productTopicInfo?: QueryProductTopicResponseBodyDataProductTopicInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBodyDataRuleList extends $tea.Model {
    gmtCreate?: number;
    gmtModified?: number;
    ruleDescription?: string;
    ruleId?: string;
    ruleName?: string;
    ruleStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBodyData extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    ruleList?: QuerySceneRuleResponseBodyDataRuleList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyDataListItemName extends $tea.Model {
    deviceCount?: number;
    gmtCreate?: number;
    gmtModified?: number;
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyDataList extends $tea.Model {
    itemName?: QuerySolutionDeviceGroupPageResponseBodyDataListItemName[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyData extends $tea.Model {
    list?: QuerySolutionDeviceGroupPageResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponseBodyData extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    speechCode?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    bizCode?: string;
    speechCode?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItemsSpeechList extends $tea.Model {
    items?: QuerySpeechListResponseBodyDataListItemsSpeechListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItems extends $tea.Model {
    bizCode?: string;
    speechCode?: string;
    speechList?: QuerySpeechListResponseBodyDataListItemsSpeechList;
    speechType?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyData extends $tea.Model {
    list?: QuerySpeechListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyDataListItems extends $tea.Model {
    code?: string;
    createdTime?: number;
    deviceName?: string;
    expiredTime?: number;
    failDeviceNum?: number;
    groupId?: string;
    groupName?: string;
    iotId?: string;
    productKey?: string;
    pushMode?: string;
    runningDeviceNum?: number;
    speechNum?: number;
    speechStatus?: boolean;
    status?: string;
    successDeviceNum?: number;
    totalDeviceNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyDataListItems extends $tea.Model {
    deviceName?: string;
    errorCode?: string;
    errorMessage?: string;
    gmtModified?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobDeviceResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobDeviceResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    bizCode?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList extends $tea.Model {
    items?: QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItems extends $tea.Model {
    bizCode?: string;
    speechList?: QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList;
    speechType?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobSpeechResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobSpeechResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo extends $tea.Model {
    appId?: string;
    gmtCreate?: string;
    gmtModified?: string;
    host?: string;
    id?: number;
    isBeian?: string;
    projectId?: string;
    protocol?: string;
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyDataList extends $tea.Model {
    domainInfo?: QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyData extends $tea.Model {
    list?: QueryStudioAppDomainListOpenResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyDataListAppInfo extends $tea.Model {
    appId?: string;
    appKey?: string;
    appSecret?: string;
    description?: string;
    gmtCreate?: string;
    gmtModified?: string;
    gmtRelease?: string;
    name?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyDataList extends $tea.Model {
    appInfo?: QueryStudioAppListResponseBodyDataListAppInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyData extends $tea.Model {
    list?: QueryStudioAppListResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyDataListPageInfo extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    id?: number;
    isHidden?: number;
    isHome?: number;
    isLoginPage?: number;
    name?: string;
    pageId?: string;
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyDataList extends $tea.Model {
    pageInfo?: QueryStudioAppPageListOpenResponseBodyDataListPageInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyData extends $tea.Model {
    list?: QueryStudioAppPageListOpenResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyDataListProjectInfo extends $tea.Model {
    description?: string;
    gmtCreate?: number;
    gmtModified?: number;
    name?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyDataList extends $tea.Model {
    projectInfo?: QueryStudioProjectListResponseBodyDataListProjectInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyData extends $tea.Model {
    list?: QueryStudioProjectListResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo extends $tea.Model {
    logTime?: number;
    result?: string;
    traceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyDataLogList extends $tea.Model {
    logInfo?: QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyData extends $tea.Model {
    currentPage?: number;
    logList?: QuerySummarySceneRuleLogResponseBodyDataLogList;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBodyDataGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBodyData extends $tea.Model {
    groupInfo?: QuerySuperDeviceGroupResponseBodyDataGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyData extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    jobId?: string;
    jobName?: string;
    message?: string;
    productKey?: string;
    progress?: string;
    status?: string;
    statusDetail?: string;
    taskId?: string;
    utcModified?: string;
    utcQueueTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponseBodyData extends $tea.Model {
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponseBodyData extends $tea.Model {
    configuration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponseBodyData extends $tea.Model {
    configuration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponseBodyData extends $tea.Model {
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponseBodySrcTopics extends $tea.Model {
    topic?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponseBodyDstTopics extends $tea.Model {
    topic?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponseBodyData extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBodyData extends $tea.Model {
    devEui?: string;
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    joinEui?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    messageId?: string;
    versions?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponseBodyData extends $tea.Model {
    messageId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBodyData extends $tea.Model {
    authMode?: number;
    tokenInfo?: SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCpuResponseBodyData extends $tea.Model {
    gmtCreate?: number;
    gmtModified?: number;
    iotInstanceId?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponseBodyData extends $tea.Model {
    deviceErrorCode?: string;
    deviceErrorMessage?: string;
    id?: string;
    maxRetryCount?: number;
    retryCount?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponseBodyData extends $tea.Model {
    items?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    productTag?: UpdateProductTagsResponseBodyInvalidProductTagsProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    addDataForApiSourceWithOptions(request: AddDataForApiSourceRequest, runtime: $Util.RuntimeOptions): Promise<AddDataForApiSourceResponse>;
    addDataForApiSource(request: AddDataForApiSourceRequest): Promise<AddDataForApiSourceResponse>;
    batchAddDeviceGroupRelationsWithOptions(request: BatchAddDeviceGroupRelationsRequest, runtime: $Util.RuntimeOptions): Promise<BatchAddDeviceGroupRelationsResponse>;
    batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): Promise<BatchAddDeviceGroupRelationsResponse>;
    batchAddThingTopoWithOptions(request: BatchAddThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<BatchAddThingTopoResponse>;
    batchAddThingTopo(request: BatchAddThingTopoRequest): Promise<BatchAddThingTopoResponse>;
    batchBindDeviceToEdgeInstanceWithDriverWithOptions(request: BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindDeviceToEdgeInstanceWithDriverResponse>;
    batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): Promise<BatchBindDeviceToEdgeInstanceWithDriverResponse>;
    batchBindDevicesIntoProjectWithOptions(request: BatchBindDevicesIntoProjectRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindDevicesIntoProjectResponse>;
    batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): Promise<BatchBindDevicesIntoProjectResponse>;
    batchBindProductsIntoProjectWithOptions(request: BatchBindProductsIntoProjectRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindProductsIntoProjectResponse>;
    batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): Promise<BatchBindProductsIntoProjectResponse>;
    batchCheckDeviceNamesWithOptions(request: BatchCheckDeviceNamesRequest, runtime: $Util.RuntimeOptions): Promise<BatchCheckDeviceNamesResponse>;
    batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): Promise<BatchCheckDeviceNamesResponse>;
    batchClearEdgeInstanceDeviceConfigWithOptions(request: BatchClearEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchClearEdgeInstanceDeviceConfigResponse>;
    batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): Promise<BatchClearEdgeInstanceDeviceConfigResponse>;
    batchDeleteDeviceGroupRelationsWithOptions(request: BatchDeleteDeviceGroupRelationsRequest, runtime: $Util.RuntimeOptions): Promise<BatchDeleteDeviceGroupRelationsResponse>;
    batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): Promise<BatchDeleteDeviceGroupRelationsResponse>;
    batchDeleteEdgeInstanceChannelWithOptions(request: BatchDeleteEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchDeleteEdgeInstanceChannelResponse>;
    batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): Promise<BatchDeleteEdgeInstanceChannelResponse>;
    batchGetDeviceBindStatusWithOptions(request: BatchGetDeviceBindStatusRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetDeviceBindStatusResponse>;
    batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): Promise<BatchGetDeviceBindStatusResponse>;
    batchGetDeviceStateWithOptions(request: BatchGetDeviceStateRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetDeviceStateResponse>;
    batchGetDeviceState(request: BatchGetDeviceStateRequest): Promise<BatchGetDeviceStateResponse>;
    batchGetEdgeDriverWithOptions(request: BatchGetEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeDriverResponse>;
    batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): Promise<BatchGetEdgeDriverResponse>;
    batchGetEdgeInstanceChannelWithOptions(request: BatchGetEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceChannelResponse>;
    batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): Promise<BatchGetEdgeInstanceChannelResponse>;
    batchGetEdgeInstanceDeviceChannelWithOptions(request: BatchGetEdgeInstanceDeviceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceChannelResponse>;
    batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): Promise<BatchGetEdgeInstanceDeviceChannelResponse>;
    batchGetEdgeInstanceDeviceConfigWithOptions(request: BatchGetEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceConfigResponse>;
    batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): Promise<BatchGetEdgeInstanceDeviceConfigResponse>;
    batchGetEdgeInstanceDeviceDriverWithOptions(request: BatchGetEdgeInstanceDeviceDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceDriverResponse>;
    batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): Promise<BatchGetEdgeInstanceDeviceDriverResponse>;
    batchGetEdgeInstanceDriverConfigsWithOptions(request: BatchGetEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDriverConfigsResponse>;
    batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): Promise<BatchGetEdgeInstanceDriverConfigsResponse>;
    batchPubWithOptions(request: BatchPubRequest, runtime: $Util.RuntimeOptions): Promise<BatchPubResponse>;
    batchPub(request: BatchPubRequest): Promise<BatchPubResponse>;
    batchQueryDeviceDetailWithOptions(request: BatchQueryDeviceDetailRequest, runtime: $Util.RuntimeOptions): Promise<BatchQueryDeviceDetailResponse>;
    batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): Promise<BatchQueryDeviceDetailResponse>;
    batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceResponse>;
    batchRegisterDevice(request: BatchRegisterDeviceRequest): Promise<BatchRegisterDeviceResponse>;
    batchRegisterDeviceWithApplyIdWithOptions(request: BatchRegisterDeviceWithApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceWithApplyIdResponse>;
    batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): Promise<BatchRegisterDeviceWithApplyIdResponse>;
    batchSetEdgeInstanceDeviceChannelWithOptions(request: BatchSetEdgeInstanceDeviceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchSetEdgeInstanceDeviceChannelResponse>;
    batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): Promise<BatchSetEdgeInstanceDeviceChannelResponse>;
    batchSetEdgeInstanceDeviceConfigWithOptions(request: BatchSetEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchSetEdgeInstanceDeviceConfigResponse>;
    batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): Promise<BatchSetEdgeInstanceDeviceConfigResponse>;
    batchUnbindDeviceFromEdgeInstanceWithOptions(request: BatchUnbindDeviceFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindDeviceFromEdgeInstanceResponse>;
    batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): Promise<BatchUnbindDeviceFromEdgeInstanceResponse>;
    batchUnbindProjectDevicesWithOptions(request: BatchUnbindProjectDevicesRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindProjectDevicesResponse>;
    batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): Promise<BatchUnbindProjectDevicesResponse>;
    batchUnbindProjectProductsWithOptions(request: BatchUnbindProjectProductsRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindProjectProductsResponse>;
    batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): Promise<BatchUnbindProjectProductsResponse>;
    batchUpdateDeviceNicknameWithOptions(request: BatchUpdateDeviceNicknameRequest, runtime: $Util.RuntimeOptions): Promise<BatchUpdateDeviceNicknameResponse>;
    batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): Promise<BatchUpdateDeviceNicknameResponse>;
    bindApplicationToEdgeInstanceWithOptions(request: BindApplicationToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindApplicationToEdgeInstanceResponse>;
    bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): Promise<BindApplicationToEdgeInstanceResponse>;
    bindDriverToEdgeInstanceWithOptions(request: BindDriverToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindDriverToEdgeInstanceResponse>;
    bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): Promise<BindDriverToEdgeInstanceResponse>;
    bindGatewayToEdgeInstanceWithOptions(request: BindGatewayToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindGatewayToEdgeInstanceResponse>;
    bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): Promise<BindGatewayToEdgeInstanceResponse>;
    bindRoleToEdgeInstanceWithOptions(request: BindRoleToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindRoleToEdgeInstanceResponse>;
    bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): Promise<BindRoleToEdgeInstanceResponse>;
    bindSceneRuleToEdgeInstanceWithOptions(request: BindSceneRuleToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindSceneRuleToEdgeInstanceResponse>;
    bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): Promise<BindSceneRuleToEdgeInstanceResponse>;
    cancelJobWithOptions(request: CancelJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelJobResponse>;
    cancelJob(request: CancelJobRequest): Promise<CancelJobResponse>;
    cancelOTAStrategyByJobWithOptions(request: CancelOTAStrategyByJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTAStrategyByJobResponse>;
    cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): Promise<CancelOTAStrategyByJobResponse>;
    cancelOTATaskByDeviceWithOptions(request: CancelOTATaskByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTATaskByDeviceResponse>;
    cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): Promise<CancelOTATaskByDeviceResponse>;
    cancelOTATaskByJobWithOptions(request: CancelOTATaskByJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTATaskByJobResponse>;
    cancelOTATaskByJob(request: CancelOTATaskByJobRequest): Promise<CancelOTATaskByJobResponse>;
    cancelReleaseProductWithOptions(request: CancelReleaseProductRequest, runtime: $Util.RuntimeOptions): Promise<CancelReleaseProductResponse>;
    cancelReleaseProduct(request: CancelReleaseProductRequest): Promise<CancelReleaseProductResponse>;
    clearEdgeInstanceDriverConfigsWithOptions(request: ClearEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<ClearEdgeInstanceDriverConfigsResponse>;
    clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): Promise<ClearEdgeInstanceDriverConfigsResponse>;
    closeEdgeInstanceDeploymentWithOptions(request: CloseEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<CloseEdgeInstanceDeploymentResponse>;
    closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): Promise<CloseEdgeInstanceDeploymentResponse>;
    confirmOTATaskWithOptions(request: ConfirmOTATaskRequest, runtime: $Util.RuntimeOptions): Promise<ConfirmOTATaskResponse>;
    confirmOTATask(request: ConfirmOTATaskRequest): Promise<ConfirmOTATaskResponse>;
    copyThingModelWithOptions(request: CopyThingModelRequest, runtime: $Util.RuntimeOptions): Promise<CopyThingModelResponse>;
    copyThingModel(request: CopyThingModelRequest): Promise<CopyThingModelResponse>;
    createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateConsumerGroupResponse>;
    createConsumerGroup(request: CreateConsumerGroupRequest): Promise<CreateConsumerGroupResponse>;
    createConsumerGroupSubscribeRelationWithOptions(request: CreateConsumerGroupSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<CreateConsumerGroupSubscribeRelationResponse>;
    createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): Promise<CreateConsumerGroupSubscribeRelationResponse>;
    createDataAPIServiceWithOptions(request: CreateDataAPIServiceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDataAPIServiceResponse>;
    createDataAPIService(request: CreateDataAPIServiceRequest): Promise<CreateDataAPIServiceResponse>;
    createDeviceDistributeJobWithOptions(request: CreateDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceDistributeJobResponse>;
    createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): Promise<CreateDeviceDistributeJobResponse>;
    createDeviceGroupWithOptions(request: CreateDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceGroupResponse>;
    createDeviceGroup(request: CreateDeviceGroupRequest): Promise<CreateDeviceGroupResponse>;
    createEdgeDriverWithOptions(request: CreateEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeDriverResponse>;
    createEdgeDriver(request: CreateEdgeDriverRequest): Promise<CreateEdgeDriverResponse>;
    createEdgeDriverVersionWithOptions(request: CreateEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeDriverVersionResponse>;
    createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): Promise<CreateEdgeDriverVersionResponse>;
    createEdgeInstanceWithOptions(request: CreateEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceResponse>;
    createEdgeInstance(request: CreateEdgeInstanceRequest): Promise<CreateEdgeInstanceResponse>;
    createEdgeInstanceChannelWithOptions(request: CreateEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceChannelResponse>;
    createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): Promise<CreateEdgeInstanceChannelResponse>;
    createEdgeInstanceDeploymentWithOptions(request: CreateEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceDeploymentResponse>;
    createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): Promise<CreateEdgeInstanceDeploymentResponse>;
    createEdgeInstanceMessageRoutingWithOptions(request: CreateEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceMessageRoutingResponse>;
    createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): Promise<CreateEdgeInstanceMessageRoutingResponse>;
    createEdgeOssPreSignedAddressWithOptions(request: CreateEdgeOssPreSignedAddressRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeOssPreSignedAddressResponse>;
    createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): Promise<CreateEdgeOssPreSignedAddressResponse>;
    createJobWithOptions(request: CreateJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateJobResponse>;
    createJob(request: CreateJobRequest): Promise<CreateJobResponse>;
    createLoRaNodesTaskWithOptions(request: CreateLoRaNodesTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateLoRaNodesTaskResponse>;
    createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): Promise<CreateLoRaNodesTaskResponse>;
    createOTADynamicUpgradeJobWithOptions(request: CreateOTADynamicUpgradeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTADynamicUpgradeJobResponse>;
    createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): Promise<CreateOTADynamicUpgradeJobResponse>;
    createOTAFirmwareWithOptions(request: CreateOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAFirmwareResponse>;
    createOTAFirmware(request: CreateOTAFirmwareRequest): Promise<CreateOTAFirmwareResponse>;
    createOTAModuleWithOptions(request: CreateOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAModuleResponse>;
    createOTAModule(request: CreateOTAModuleRequest): Promise<CreateOTAModuleResponse>;
    createOTAStaticUpgradeJobWithOptions(request: CreateOTAStaticUpgradeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAStaticUpgradeJobResponse>;
    createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): Promise<CreateOTAStaticUpgradeJobResponse>;
    createOTAVerifyJobWithOptions(request: CreateOTAVerifyJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAVerifyJobResponse>;
    createOTAVerifyJob(request: CreateOTAVerifyJobRequest): Promise<CreateOTAVerifyJobResponse>;
    createProductWithOptions(request: CreateProductRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductResponse>;
    createProduct(request: CreateProductRequest): Promise<CreateProductResponse>;
    createProductDistributeJobWithOptions(request: CreateProductDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductDistributeJobResponse>;
    createProductDistributeJob(request: CreateProductDistributeJobRequest): Promise<CreateProductDistributeJobResponse>;
    createProductTagsWithOptions(request: CreateProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductTagsResponse>;
    createProductTags(request: CreateProductTagsRequest): Promise<CreateProductTagsResponse>;
    createProductTopicWithOptions(request: CreateProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductTopicResponse>;
    createProductTopic(request: CreateProductTopicRequest): Promise<CreateProductTopicResponse>;
    createRuleWithOptions(request: CreateRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateRuleResponse>;
    createRule(request: CreateRuleRequest): Promise<CreateRuleResponse>;
    createRuleActionWithOptions(request: CreateRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<CreateRuleActionResponse>;
    createRuleAction(request: CreateRuleActionRequest): Promise<CreateRuleActionResponse>;
    createRulengDistributeJobWithOptions(request: CreateRulengDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateRulengDistributeJobResponse>;
    createRulengDistributeJob(request: CreateRulengDistributeJobRequest): Promise<CreateRulengDistributeJobResponse>;
    createSceneRuleWithOptions(request: CreateSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateSceneRuleResponse>;
    createSceneRule(request: CreateSceneRuleRequest): Promise<CreateSceneRuleResponse>;
    createSpeechWithOptions(request: CreateSpeechRequest, runtime: $Util.RuntimeOptions): Promise<CreateSpeechResponse>;
    createSpeech(request: CreateSpeechRequest): Promise<CreateSpeechResponse>;
    createStudioAppDomainOpenWithOptions(request: CreateStudioAppDomainOpenRequest, runtime: $Util.RuntimeOptions): Promise<CreateStudioAppDomainOpenResponse>;
    createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): Promise<CreateStudioAppDomainOpenResponse>;
    createSubscribeRelationWithOptions(request: CreateSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<CreateSubscribeRelationResponse>;
    createSubscribeRelation(request: CreateSubscribeRelationRequest): Promise<CreateSubscribeRelationResponse>;
    createThingModelWithOptions(request: CreateThingModelRequest, runtime: $Util.RuntimeOptions): Promise<CreateThingModelResponse>;
    createThingModel(request: CreateThingModelRequest): Promise<CreateThingModelResponse>;
    createThingScriptWithOptions(request: CreateThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<CreateThingScriptResponse>;
    createThingScript(request: CreateThingScriptRequest): Promise<CreateThingScriptResponse>;
    createTopicRouteTableWithOptions(request: CreateTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<CreateTopicRouteTableResponse>;
    createTopicRouteTable(request: CreateTopicRouteTableRequest): Promise<CreateTopicRouteTableResponse>;
    deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteConsumerGroupResponse>;
    deleteConsumerGroup(request: DeleteConsumerGroupRequest): Promise<DeleteConsumerGroupResponse>;
    deleteConsumerGroupSubscribeRelationWithOptions(request: DeleteConsumerGroupSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteConsumerGroupSubscribeRelationResponse>;
    deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): Promise<DeleteConsumerGroupSubscribeRelationResponse>;
    deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceResponse>;
    deleteDevice(request: DeleteDeviceRequest): Promise<DeleteDeviceResponse>;
    deleteDeviceDistributeJobWithOptions(request: DeleteDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceDistributeJobResponse>;
    deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): Promise<DeleteDeviceDistributeJobResponse>;
    deleteDeviceFileWithOptions(request: DeleteDeviceFileRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceFileResponse>;
    deleteDeviceFile(request: DeleteDeviceFileRequest): Promise<DeleteDeviceFileResponse>;
    deleteDeviceGroupWithOptions(request: DeleteDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceGroupResponse>;
    deleteDeviceGroup(request: DeleteDeviceGroupRequest): Promise<DeleteDeviceGroupResponse>;
    deleteDevicePropWithOptions(request: DeleteDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDevicePropResponse>;
    deleteDeviceProp(request: DeleteDevicePropRequest): Promise<DeleteDevicePropResponse>;
    deleteEdgeDriverWithOptions(request: DeleteEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeDriverResponse>;
    deleteEdgeDriver(request: DeleteEdgeDriverRequest): Promise<DeleteEdgeDriverResponse>;
    deleteEdgeDriverVersionWithOptions(request: DeleteEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeDriverVersionResponse>;
    deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): Promise<DeleteEdgeDriverVersionResponse>;
    deleteEdgeInstanceWithOptions(request: DeleteEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeInstanceResponse>;
    deleteEdgeInstance(request: DeleteEdgeInstanceRequest): Promise<DeleteEdgeInstanceResponse>;
    deleteEdgeInstanceMessageRoutingWithOptions(request: DeleteEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeInstanceMessageRoutingResponse>;
    deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): Promise<DeleteEdgeInstanceMessageRoutingResponse>;
    deleteJobWithOptions(request: DeleteJobRequest, runtime: $Util.RuntimeOptions): Promise<DeleteJobResponse>;
    deleteJob(request: DeleteJobRequest): Promise<DeleteJobResponse>;
    deleteOTAFirmwareWithOptions(request: DeleteOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<DeleteOTAFirmwareResponse>;
    deleteOTAFirmware(request: DeleteOTAFirmwareRequest): Promise<DeleteOTAFirmwareResponse>;
    deleteOTAModuleWithOptions(request: DeleteOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteOTAModuleResponse>;
    deleteOTAModule(request: DeleteOTAModuleRequest): Promise<DeleteOTAModuleResponse>;
    deleteProductWithOptions(request: DeleteProductRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductResponse>;
    deleteProduct(request: DeleteProductRequest): Promise<DeleteProductResponse>;
    deleteProductTagsWithOptions(request: DeleteProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductTagsResponse>;
    deleteProductTags(request: DeleteProductTagsRequest): Promise<DeleteProductTagsResponse>;
    deleteProductTopicWithOptions(request: DeleteProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductTopicResponse>;
    deleteProductTopic(request: DeleteProductTopicRequest): Promise<DeleteProductTopicResponse>;
    deleteRuleWithOptions(request: DeleteRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRuleResponse>;
    deleteRule(request: DeleteRuleRequest): Promise<DeleteRuleResponse>;
    deleteRuleActionWithOptions(request: DeleteRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRuleActionResponse>;
    deleteRuleAction(request: DeleteRuleActionRequest): Promise<DeleteRuleActionResponse>;
    deleteSceneRuleWithOptions(request: DeleteSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSceneRuleResponse>;
    deleteSceneRule(request: DeleteSceneRuleRequest): Promise<DeleteSceneRuleResponse>;
    deleteSpeechWithOptions(request: DeleteSpeechRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSpeechResponse>;
    deleteSpeech(request: DeleteSpeechRequest): Promise<DeleteSpeechResponse>;
    deleteStudioAppDomainOpenWithOptions(request: DeleteStudioAppDomainOpenRequest, runtime: $Util.RuntimeOptions): Promise<DeleteStudioAppDomainOpenResponse>;
    deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): Promise<DeleteStudioAppDomainOpenResponse>;
    deleteSubscribeRelationWithOptions(request: DeleteSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSubscribeRelationResponse>;
    deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): Promise<DeleteSubscribeRelationResponse>;
    deleteThingModelWithOptions(request: DeleteThingModelRequest, runtime: $Util.RuntimeOptions): Promise<DeleteThingModelResponse>;
    deleteThingModel(request: DeleteThingModelRequest): Promise<DeleteThingModelResponse>;
    deleteTopicRouteTableWithOptions(request: DeleteTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<DeleteTopicRouteTableResponse>;
    deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): Promise<DeleteTopicRouteTableResponse>;
    disableDeviceTunnelWithOptions(request: DisableDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<DisableDeviceTunnelResponse>;
    disableDeviceTunnel(request: DisableDeviceTunnelRequest): Promise<DisableDeviceTunnelResponse>;
    disableDeviceTunnelShareWithOptions(request: DisableDeviceTunnelShareRequest, runtime: $Util.RuntimeOptions): Promise<DisableDeviceTunnelShareResponse>;
    disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): Promise<DisableDeviceTunnelShareResponse>;
    disableSceneRuleWithOptions(request: DisableSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<DisableSceneRuleResponse>;
    disableSceneRule(request: DisableSceneRuleRequest): Promise<DisableSceneRuleResponse>;
    disableThingWithOptions(request: DisableThingRequest, runtime: $Util.RuntimeOptions): Promise<DisableThingResponse>;
    disableThing(request: DisableThingRequest): Promise<DisableThingResponse>;
    enableDeviceTunnelWithOptions(request: EnableDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<EnableDeviceTunnelResponse>;
    enableDeviceTunnel(request: EnableDeviceTunnelRequest): Promise<EnableDeviceTunnelResponse>;
    enableDeviceTunnelShareWithOptions(request: EnableDeviceTunnelShareRequest, runtime: $Util.RuntimeOptions): Promise<EnableDeviceTunnelShareResponse>;
    enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): Promise<EnableDeviceTunnelShareResponse>;
    enableSceneRuleWithOptions(request: EnableSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<EnableSceneRuleResponse>;
    enableSceneRule(request: EnableSceneRuleRequest): Promise<EnableSceneRuleResponse>;
    enableThingWithOptions(request: EnableThingRequest, runtime: $Util.RuntimeOptions): Promise<EnableThingResponse>;
    enableThing(request: EnableThingRequest): Promise<EnableThingResponse>;
    generateDeviceNameListURLWithOptions(request: GenerateDeviceNameListURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateDeviceNameListURLResponse>;
    generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): Promise<GenerateDeviceNameListURLResponse>;
    generateFileUploadURLWithOptions(request: GenerateFileUploadURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateFileUploadURLResponse>;
    generateFileUploadURL(request: GenerateFileUploadURLRequest): Promise<GenerateFileUploadURLResponse>;
    generateOTAUploadURLWithOptions(request: GenerateOTAUploadURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateOTAUploadURLResponse>;
    generateOTAUploadURL(request: GenerateOTAUploadURLRequest): Promise<GenerateOTAUploadURLResponse>;
    getDataAPIServiceDetailWithOptions(request: GetDataAPIServiceDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetDataAPIServiceDetailResponse>;
    getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): Promise<GetDataAPIServiceDetailResponse>;
    getDeviceShadowWithOptions(request: GetDeviceShadowRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceShadowResponse>;
    getDeviceShadow(request: GetDeviceShadowRequest): Promise<GetDeviceShadowResponse>;
    getDeviceStatusWithOptions(request: GetDeviceStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceStatusResponse>;
    getDeviceStatus(request: GetDeviceStatusRequest): Promise<GetDeviceStatusResponse>;
    getDeviceTunnelShareStatusWithOptions(request: GetDeviceTunnelShareStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceTunnelShareStatusResponse>;
    getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): Promise<GetDeviceTunnelShareStatusResponse>;
    getDeviceTunnelStatusWithOptions(request: GetDeviceTunnelStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceTunnelStatusResponse>;
    getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): Promise<GetDeviceTunnelStatusResponse>;
    getEdgeDriverVersionWithOptions(request: GetEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeDriverVersionResponse>;
    getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): Promise<GetEdgeDriverVersionResponse>;
    getEdgeInstanceWithOptions(request: GetEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceResponse>;
    getEdgeInstance(request: GetEdgeInstanceRequest): Promise<GetEdgeInstanceResponse>;
    getEdgeInstanceDeploymentWithOptions(request: GetEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceDeploymentResponse>;
    getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): Promise<GetEdgeInstanceDeploymentResponse>;
    getEdgeInstanceMessageRoutingWithOptions(request: GetEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceMessageRoutingResponse>;
    getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): Promise<GetEdgeInstanceMessageRoutingResponse>;
    getGatewayBySubDeviceWithOptions(request: GetGatewayBySubDeviceRequest, runtime: $Util.RuntimeOptions): Promise<GetGatewayBySubDeviceResponse>;
    getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): Promise<GetGatewayBySubDeviceResponse>;
    getLoraNodesTaskWithOptions(request: GetLoraNodesTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetLoraNodesTaskResponse>;
    getLoraNodesTask(request: GetLoraNodesTaskRequest): Promise<GetLoraNodesTaskResponse>;
    getNodesAddingTaskWithOptions(request: GetNodesAddingTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetNodesAddingTaskResponse>;
    getNodesAddingTask(request: GetNodesAddingTaskRequest): Promise<GetNodesAddingTaskResponse>;
    getRuleWithOptions(request: GetRuleRequest, runtime: $Util.RuntimeOptions): Promise<GetRuleResponse>;
    getRule(request: GetRuleRequest): Promise<GetRuleResponse>;
    getRuleActionWithOptions(request: GetRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<GetRuleActionResponse>;
    getRuleAction(request: GetRuleActionRequest): Promise<GetRuleActionResponse>;
    getSceneRuleWithOptions(request: GetSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<GetSceneRuleResponse>;
    getSceneRule(request: GetSceneRuleRequest): Promise<GetSceneRuleResponse>;
    getSpeechVoiceWithOptions(runtime: $Util.RuntimeOptions): Promise<GetSpeechVoiceResponse>;
    getSpeechVoice(): Promise<GetSpeechVoiceResponse>;
    getStudioAppTokenOpenWithOptions(request: GetStudioAppTokenOpenRequest, runtime: $Util.RuntimeOptions): Promise<GetStudioAppTokenOpenResponse>;
    getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): Promise<GetStudioAppTokenOpenResponse>;
    getThingModelTslWithOptions(request: GetThingModelTslRequest, runtime: $Util.RuntimeOptions): Promise<GetThingModelTslResponse>;
    getThingModelTsl(request: GetThingModelTslRequest): Promise<GetThingModelTslResponse>;
    getThingModelTslPublishedWithOptions(request: GetThingModelTslPublishedRequest, runtime: $Util.RuntimeOptions): Promise<GetThingModelTslPublishedResponse>;
    getThingModelTslPublished(request: GetThingModelTslPublishedRequest): Promise<GetThingModelTslPublishedResponse>;
    getThingScriptWithOptions(request: GetThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<GetThingScriptResponse>;
    getThingScript(request: GetThingScriptRequest): Promise<GetThingScriptResponse>;
    getThingTemplateWithOptions(request: GetThingTemplateRequest, runtime: $Util.RuntimeOptions): Promise<GetThingTemplateResponse>;
    getThingTemplate(request: GetThingTemplateRequest): Promise<GetThingTemplateResponse>;
    getThingTopoWithOptions(request: GetThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<GetThingTopoResponse>;
    getThingTopo(request: GetThingTopoRequest): Promise<GetThingTopoResponse>;
    importThingModelTslWithOptions(request: ImportThingModelTslRequest, runtime: $Util.RuntimeOptions): Promise<ImportThingModelTslResponse>;
    importThingModelTsl(request: ImportThingModelTslRequest): Promise<ImportThingModelTslResponse>;
    invokeDataAPIServiceWithOptions(request: InvokeDataAPIServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeDataAPIServiceResponse>;
    invokeDataAPIService(request: InvokeDataAPIServiceRequest): Promise<InvokeDataAPIServiceResponse>;
    invokeThingServiceWithOptions(request: InvokeThingServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeThingServiceResponse>;
    invokeThingService(request: InvokeThingServiceRequest): Promise<InvokeThingServiceResponse>;
    invokeThingsServiceWithOptions(request: InvokeThingsServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeThingsServiceResponse>;
    invokeThingsService(request: InvokeThingsServiceRequest): Promise<InvokeThingsServiceResponse>;
    listAnalyticsDataWithOptions(request: ListAnalyticsDataRequest, runtime: $Util.RuntimeOptions): Promise<ListAnalyticsDataResponse>;
    listAnalyticsData(request: ListAnalyticsDataRequest): Promise<ListAnalyticsDataResponse>;
    listDeviceDistributeJobWithOptions(request: ListDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<ListDeviceDistributeJobResponse>;
    listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): Promise<ListDeviceDistributeJobResponse>;
    listDistributedDeviceWithOptions(request: ListDistributedDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListDistributedDeviceResponse>;
    listDistributedDevice(request: ListDistributedDeviceRequest): Promise<ListDistributedDeviceResponse>;
    listDistributedProductWithOptions(request: ListDistributedProductRequest, runtime: $Util.RuntimeOptions): Promise<ListDistributedProductResponse>;
    listDistributedProduct(request: ListDistributedProductRequest): Promise<ListDistributedProductResponse>;
    listJobWithOptions(request: ListJobRequest, runtime: $Util.RuntimeOptions): Promise<ListJobResponse>;
    listJob(request: ListJobRequest): Promise<ListJobResponse>;
    listOTAFirmwareWithOptions(request: ListOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAFirmwareResponse>;
    listOTAFirmware(request: ListOTAFirmwareRequest): Promise<ListOTAFirmwareResponse>;
    listOTAJobByDeviceWithOptions(request: ListOTAJobByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAJobByDeviceResponse>;
    listOTAJobByDevice(request: ListOTAJobByDeviceRequest): Promise<ListOTAJobByDeviceResponse>;
    listOTAJobByFirmwareWithOptions(request: ListOTAJobByFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAJobByFirmwareResponse>;
    listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): Promise<ListOTAJobByFirmwareResponse>;
    listOTAModuleByProductWithOptions(request: ListOTAModuleByProductRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAModuleByProductResponse>;
    listOTAModuleByProduct(request: ListOTAModuleByProductRequest): Promise<ListOTAModuleByProductResponse>;
    listOTAModuleVersionsByDeviceWithOptions(request: ListOTAModuleVersionsByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAModuleVersionsByDeviceResponse>;
    listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): Promise<ListOTAModuleVersionsByDeviceResponse>;
    listOTATaskByJobWithOptions(request: ListOTATaskByJobRequest, runtime: $Util.RuntimeOptions): Promise<ListOTATaskByJobResponse>;
    listOTATaskByJob(request: ListOTATaskByJobRequest): Promise<ListOTATaskByJobResponse>;
    listOTAUnfinishedTaskByDeviceWithOptions(request: ListOTAUnfinishedTaskByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAUnfinishedTaskByDeviceResponse>;
    listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): Promise<ListOTAUnfinishedTaskByDeviceResponse>;
    listProductByTagsWithOptions(request: ListProductByTagsRequest, runtime: $Util.RuntimeOptions): Promise<ListProductByTagsResponse>;
    listProductByTags(request: ListProductByTagsRequest): Promise<ListProductByTagsResponse>;
    listProductTagsWithOptions(request: ListProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<ListProductTagsResponse>;
    listProductTags(request: ListProductTagsRequest): Promise<ListProductTagsResponse>;
    listRuleWithOptions(request: ListRuleRequest, runtime: $Util.RuntimeOptions): Promise<ListRuleResponse>;
    listRule(request: ListRuleRequest): Promise<ListRuleResponse>;
    listRuleActionsWithOptions(request: ListRuleActionsRequest, runtime: $Util.RuntimeOptions): Promise<ListRuleActionsResponse>;
    listRuleActions(request: ListRuleActionsRequest): Promise<ListRuleActionsResponse>;
    listTaskWithOptions(request: ListTaskRequest, runtime: $Util.RuntimeOptions): Promise<ListTaskResponse>;
    listTask(request: ListTaskRequest): Promise<ListTaskResponse>;
    listTaskByPageWithOptions(request: ListTaskByPageRequest, runtime: $Util.RuntimeOptions): Promise<ListTaskByPageResponse>;
    listTaskByPage(request: ListTaskByPageRequest): Promise<ListTaskByPageResponse>;
    listThingModelVersionWithOptions(request: ListThingModelVersionRequest, runtime: $Util.RuntimeOptions): Promise<ListThingModelVersionResponse>;
    listThingModelVersion(request: ListThingModelVersionRequest): Promise<ListThingModelVersionResponse>;
    listThingTemplatesWithOptions(request: ListThingTemplatesRequest, runtime: $Util.RuntimeOptions): Promise<ListThingTemplatesResponse>;
    listThingTemplates(request: ListThingTemplatesRequest): Promise<ListThingTemplatesResponse>;
    notifyAddThingTopoWithOptions(request: NotifyAddThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<NotifyAddThingTopoResponse>;
    notifyAddThingTopo(request: NotifyAddThingTopoRequest): Promise<NotifyAddThingTopoResponse>;
    openIotServiceWithOptions(request: OpenIotServiceRequest, runtime: $Util.RuntimeOptions): Promise<OpenIotServiceResponse>;
    openIotService(request: OpenIotServiceRequest): Promise<OpenIotServiceResponse>;
    printByTemplateWithOptions(request: PrintByTemplateRequest, runtime: $Util.RuntimeOptions): Promise<PrintByTemplateResponse>;
    printByTemplate(request: PrintByTemplateRequest): Promise<PrintByTemplateResponse>;
    pubWithOptions(request: PubRequest, runtime: $Util.RuntimeOptions): Promise<PubResponse>;
    pub(request: PubRequest): Promise<PubResponse>;
    pubBroadcastWithOptions(request: PubBroadcastRequest, runtime: $Util.RuntimeOptions): Promise<PubBroadcastResponse>;
    pubBroadcast(request: PubBroadcastRequest): Promise<PubBroadcastResponse>;
    publishStudioAppWithOptions(request: PublishStudioAppRequest, runtime: $Util.RuntimeOptions): Promise<PublishStudioAppResponse>;
    publishStudioApp(request: PublishStudioAppRequest): Promise<PublishStudioAppResponse>;
    publishThingModelWithOptions(request: PublishThingModelRequest, runtime: $Util.RuntimeOptions): Promise<PublishThingModelResponse>;
    publishThingModel(request: PublishThingModelRequest): Promise<PublishThingModelResponse>;
    pushSpeechWithOptions(request: PushSpeechRequest, runtime: $Util.RuntimeOptions): Promise<PushSpeechResponse>;
    pushSpeech(request: PushSpeechRequest): Promise<PushSpeechResponse>;
    queryAppDeviceListWithOptions(request: QueryAppDeviceListRequest, runtime: $Util.RuntimeOptions): Promise<QueryAppDeviceListResponse>;
    queryAppDeviceList(request: QueryAppDeviceListRequest): Promise<QueryAppDeviceListResponse>;
    queryBatchRegisterDeviceStatusWithOptions(request: QueryBatchRegisterDeviceStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryBatchRegisterDeviceStatusResponse>;
    queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): Promise<QueryBatchRegisterDeviceStatusResponse>;
    queryCertUrlByApplyIdWithOptions(request: QueryCertUrlByApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryCertUrlByApplyIdResponse>;
    queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): Promise<QueryCertUrlByApplyIdResponse>;
    queryConsumerGroupByGroupIdWithOptions(request: QueryConsumerGroupByGroupIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupByGroupIdResponse>;
    queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): Promise<QueryConsumerGroupByGroupIdResponse>;
    queryConsumerGroupListWithOptions(request: QueryConsumerGroupListRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupListResponse>;
    queryConsumerGroupList(request: QueryConsumerGroupListRequest): Promise<QueryConsumerGroupListResponse>;
    queryConsumerGroupStatusWithOptions(request: QueryConsumerGroupStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupStatusResponse>;
    queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): Promise<QueryConsumerGroupStatusResponse>;
    queryDetailSceneRuleLogWithOptions(request: QueryDetailSceneRuleLogRequest, runtime: $Util.RuntimeOptions): Promise<QueryDetailSceneRuleLogResponse>;
    queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): Promise<QueryDetailSceneRuleLogResponse>;
    queryDeviceWithOptions(request: QueryDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceResponse>;
    queryDevice(request: QueryDeviceRequest): Promise<QueryDeviceResponse>;
    queryDeviceBySQLWithOptions(request: QueryDeviceBySQLRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceBySQLResponse>;
    queryDeviceBySQL(request: QueryDeviceBySQLRequest): Promise<QueryDeviceBySQLResponse>;
    queryDeviceByStatusWithOptions(request: QueryDeviceByStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceByStatusResponse>;
    queryDeviceByStatus(request: QueryDeviceByStatusRequest): Promise<QueryDeviceByStatusResponse>;
    queryDeviceByTagsWithOptions(request: QueryDeviceByTagsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceByTagsResponse>;
    queryDeviceByTags(request: QueryDeviceByTagsRequest): Promise<QueryDeviceByTagsResponse>;
    queryDeviceCertWithOptions(request: QueryDeviceCertRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceCertResponse>;
    queryDeviceCert(request: QueryDeviceCertRequest): Promise<QueryDeviceCertResponse>;
    queryDeviceDesiredPropertyWithOptions(request: QueryDeviceDesiredPropertyRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDesiredPropertyResponse>;
    queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): Promise<QueryDeviceDesiredPropertyResponse>;
    queryDeviceDetailWithOptions(request: QueryDeviceDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDetailResponse>;
    queryDeviceDetail(request: QueryDeviceDetailRequest): Promise<QueryDeviceDetailResponse>;
    queryDeviceDistributeDetailWithOptions(request: QueryDeviceDistributeDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDistributeDetailResponse>;
    queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): Promise<QueryDeviceDistributeDetailResponse>;
    queryDeviceDistributeJobWithOptions(request: QueryDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDistributeJobResponse>;
    queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): Promise<QueryDeviceDistributeJobResponse>;
    queryDeviceEventDataWithOptions(request: QueryDeviceEventDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceEventDataResponse>;
    queryDeviceEventData(request: QueryDeviceEventDataRequest): Promise<QueryDeviceEventDataResponse>;
    queryDeviceFileWithOptions(request: QueryDeviceFileRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceFileResponse>;
    queryDeviceFile(request: QueryDeviceFileRequest): Promise<QueryDeviceFileResponse>;
    queryDeviceFileListWithOptions(request: QueryDeviceFileListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceFileListResponse>;
    queryDeviceFileList(request: QueryDeviceFileListRequest): Promise<QueryDeviceFileListResponse>;
    queryDeviceGroupByDeviceWithOptions(request: QueryDeviceGroupByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupByDeviceResponse>;
    queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): Promise<QueryDeviceGroupByDeviceResponse>;
    queryDeviceGroupByTagsWithOptions(request: QueryDeviceGroupByTagsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupByTagsResponse>;
    queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): Promise<QueryDeviceGroupByTagsResponse>;
    queryDeviceGroupInfoWithOptions(request: QueryDeviceGroupInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupInfoResponse>;
    queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): Promise<QueryDeviceGroupInfoResponse>;
    queryDeviceGroupListWithOptions(request: QueryDeviceGroupListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupListResponse>;
    queryDeviceGroupList(request: QueryDeviceGroupListRequest): Promise<QueryDeviceGroupListResponse>;
    queryDeviceGroupTagListWithOptions(request: QueryDeviceGroupTagListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupTagListResponse>;
    queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): Promise<QueryDeviceGroupTagListResponse>;
    queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceInfoResponse>;
    queryDeviceInfo(request: QueryDeviceInfoRequest): Promise<QueryDeviceInfoResponse>;
    queryDeviceListByDeviceGroupWithOptions(request: QueryDeviceListByDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceListByDeviceGroupResponse>;
    queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): Promise<QueryDeviceListByDeviceGroupResponse>;
    queryDeviceOriginalEventDataWithOptions(request: QueryDeviceOriginalEventDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalEventDataResponse>;
    queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): Promise<QueryDeviceOriginalEventDataResponse>;
    queryDeviceOriginalPropertyDataWithOptions(request: QueryDeviceOriginalPropertyDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalPropertyDataResponse>;
    queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): Promise<QueryDeviceOriginalPropertyDataResponse>;
    queryDeviceOriginalPropertyStatusWithOptions(request: QueryDeviceOriginalPropertyStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalPropertyStatusResponse>;
    queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): Promise<QueryDeviceOriginalPropertyStatusResponse>;
    queryDeviceOriginalServiceDataWithOptions(request: QueryDeviceOriginalServiceDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalServiceDataResponse>;
    queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): Promise<QueryDeviceOriginalServiceDataResponse>;
    queryDevicePropWithOptions(request: QueryDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropResponse>;
    queryDeviceProp(request: QueryDevicePropRequest): Promise<QueryDevicePropResponse>;
    queryDevicePropertiesDataWithOptions(request: QueryDevicePropertiesDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertiesDataResponse>;
    queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): Promise<QueryDevicePropertiesDataResponse>;
    queryDevicePropertyDataWithOptions(request: QueryDevicePropertyDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertyDataResponse>;
    queryDevicePropertyData(request: QueryDevicePropertyDataRequest): Promise<QueryDevicePropertyDataResponse>;
    queryDevicePropertyStatusWithOptions(request: QueryDevicePropertyStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertyStatusResponse>;
    queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): Promise<QueryDevicePropertyStatusResponse>;
    queryDeviceServiceDataWithOptions(request: QueryDeviceServiceDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceServiceDataResponse>;
    queryDeviceServiceData(request: QueryDeviceServiceDataRequest): Promise<QueryDeviceServiceDataResponse>;
    queryDeviceStatisticsWithOptions(request: QueryDeviceStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceStatisticsResponse>;
    queryDeviceStatistics(request: QueryDeviceStatisticsRequest): Promise<QueryDeviceStatisticsResponse>;
    queryEdgeDriverWithOptions(request: QueryEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeDriverResponse>;
    queryEdgeDriver(request: QueryEdgeDriverRequest): Promise<QueryEdgeDriverResponse>;
    queryEdgeDriverVersionWithOptions(request: QueryEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeDriverVersionResponse>;
    queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): Promise<QueryEdgeDriverVersionResponse>;
    queryEdgeInstanceWithOptions(request: QueryEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceResponse>;
    queryEdgeInstance(request: QueryEdgeInstanceRequest): Promise<QueryEdgeInstanceResponse>;
    queryEdgeInstanceChannelWithOptions(request: QueryEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceChannelResponse>;
    queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): Promise<QueryEdgeInstanceChannelResponse>;
    queryEdgeInstanceDeviceWithOptions(request: QueryEdgeInstanceDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDeviceResponse>;
    queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): Promise<QueryEdgeInstanceDeviceResponse>;
    queryEdgeInstanceDeviceByDriverWithOptions(request: QueryEdgeInstanceDeviceByDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDeviceByDriverResponse>;
    queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): Promise<QueryEdgeInstanceDeviceByDriverResponse>;
    queryEdgeInstanceDriverWithOptions(request: QueryEdgeInstanceDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDriverResponse>;
    queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): Promise<QueryEdgeInstanceDriverResponse>;
    queryEdgeInstanceGatewayWithOptions(request: QueryEdgeInstanceGatewayRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceGatewayResponse>;
    queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): Promise<QueryEdgeInstanceGatewayResponse>;
    queryEdgeInstanceHistoricDeploymentWithOptions(request: QueryEdgeInstanceHistoricDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceHistoricDeploymentResponse>;
    queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): Promise<QueryEdgeInstanceHistoricDeploymentResponse>;
    queryEdgeInstanceMessageRoutingWithOptions(request: QueryEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceMessageRoutingResponse>;
    queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): Promise<QueryEdgeInstanceMessageRoutingResponse>;
    queryEdgeInstanceSceneRuleWithOptions(request: QueryEdgeInstanceSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceSceneRuleResponse>;
    queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): Promise<QueryEdgeInstanceSceneRuleResponse>;
    queryJobWithOptions(request: QueryJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryJobResponse>;
    queryJob(request: QueryJobRequest): Promise<QueryJobResponse>;
    queryJobStatisticsWithOptions(request: QueryJobStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<QueryJobStatisticsResponse>;
    queryJobStatistics(request: QueryJobStatisticsRequest): Promise<QueryJobStatisticsResponse>;
    queryLoRaJoinPermissionsWithOptions(request: QueryLoRaJoinPermissionsRequest, runtime: $Util.RuntimeOptions): Promise<QueryLoRaJoinPermissionsResponse>;
    queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): Promise<QueryLoRaJoinPermissionsResponse>;
    queryMessageInfoWithOptions(request: QueryMessageInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryMessageInfoResponse>;
    queryMessageInfo(request: QueryMessageInfoRequest): Promise<QueryMessageInfoResponse>;
    queryOTAFirmwareWithOptions(request: QueryOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<QueryOTAFirmwareResponse>;
    queryOTAFirmware(request: QueryOTAFirmwareRequest): Promise<QueryOTAFirmwareResponse>;
    queryOTAJobWithOptions(request: QueryOTAJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryOTAJobResponse>;
    queryOTAJob(request: QueryOTAJobRequest): Promise<QueryOTAJobResponse>;
    queryPageByApplyIdWithOptions(request: QueryPageByApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryPageByApplyIdResponse>;
    queryPageByApplyId(request: QueryPageByApplyIdRequest): Promise<QueryPageByApplyIdResponse>;
    queryProductWithOptions(request: QueryProductRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductResponse>;
    queryProduct(request: QueryProductRequest): Promise<QueryProductResponse>;
    queryProductCertInfoWithOptions(request: QueryProductCertInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductCertInfoResponse>;
    queryProductCertInfo(request: QueryProductCertInfoRequest): Promise<QueryProductCertInfoResponse>;
    queryProductListWithOptions(request: QueryProductListRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductListResponse>;
    queryProductList(request: QueryProductListRequest): Promise<QueryProductListResponse>;
    queryProductTopicWithOptions(request: QueryProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductTopicResponse>;
    queryProductTopic(request: QueryProductTopicRequest): Promise<QueryProductTopicResponse>;
    querySceneRuleWithOptions(request: QuerySceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<QuerySceneRuleResponse>;
    querySceneRule(request: QuerySceneRuleRequest): Promise<QuerySceneRuleResponse>;
    querySolutionDeviceGroupPageWithOptions(request: QuerySolutionDeviceGroupPageRequest, runtime: $Util.RuntimeOptions): Promise<QuerySolutionDeviceGroupPageResponse>;
    querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): Promise<QuerySolutionDeviceGroupPageResponse>;
    querySpeechWithOptions(request: QuerySpeechRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechResponse>;
    querySpeech(request: QuerySpeechRequest): Promise<QuerySpeechResponse>;
    querySpeechListWithOptions(request: QuerySpeechListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechListResponse>;
    querySpeechList(request: QuerySpeechListRequest): Promise<QuerySpeechListResponse>;
    querySpeechPushJobWithOptions(request: QuerySpeechPushJobRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobResponse>;
    querySpeechPushJob(request: QuerySpeechPushJobRequest): Promise<QuerySpeechPushJobResponse>;
    querySpeechPushJobDeviceWithOptions(request: QuerySpeechPushJobDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobDeviceResponse>;
    querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): Promise<QuerySpeechPushJobDeviceResponse>;
    querySpeechPushJobSpeechWithOptions(request: QuerySpeechPushJobSpeechRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobSpeechResponse>;
    querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): Promise<QuerySpeechPushJobSpeechResponse>;
    queryStudioAppDomainListOpenWithOptions(request: QueryStudioAppDomainListOpenRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppDomainListOpenResponse>;
    queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): Promise<QueryStudioAppDomainListOpenResponse>;
    queryStudioAppListWithOptions(request: QueryStudioAppListRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppListResponse>;
    queryStudioAppList(request: QueryStudioAppListRequest): Promise<QueryStudioAppListResponse>;
    queryStudioAppPageListOpenWithOptions(request: QueryStudioAppPageListOpenRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppPageListOpenResponse>;
    queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): Promise<QueryStudioAppPageListOpenResponse>;
    queryStudioProjectListWithOptions(request: QueryStudioProjectListRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioProjectListResponse>;
    queryStudioProjectList(request: QueryStudioProjectListRequest): Promise<QueryStudioProjectListResponse>;
    querySubscribeRelationWithOptions(request: QuerySubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<QuerySubscribeRelationResponse>;
    querySubscribeRelation(request: QuerySubscribeRelationRequest): Promise<QuerySubscribeRelationResponse>;
    querySummarySceneRuleLogWithOptions(request: QuerySummarySceneRuleLogRequest, runtime: $Util.RuntimeOptions): Promise<QuerySummarySceneRuleLogResponse>;
    querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): Promise<QuerySummarySceneRuleLogResponse>;
    querySuperDeviceGroupWithOptions(request: QuerySuperDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<QuerySuperDeviceGroupResponse>;
    querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): Promise<QuerySuperDeviceGroupResponse>;
    queryTaskWithOptions(request: QueryTaskRequest, runtime: $Util.RuntimeOptions): Promise<QueryTaskResponse>;
    queryTask(request: QueryTaskRequest): Promise<QueryTaskResponse>;
    queryThingModelWithOptions(request: QueryThingModelRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelResponse>;
    queryThingModel(request: QueryThingModelRequest): Promise<QueryThingModelResponse>;
    queryThingModelExtendConfigWithOptions(request: QueryThingModelExtendConfigRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelExtendConfigResponse>;
    queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): Promise<QueryThingModelExtendConfigResponse>;
    queryThingModelExtendConfigPublishedWithOptions(request: QueryThingModelExtendConfigPublishedRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelExtendConfigPublishedResponse>;
    queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): Promise<QueryThingModelExtendConfigPublishedResponse>;
    queryThingModelPublishedWithOptions(request: QueryThingModelPublishedRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelPublishedResponse>;
    queryThingModelPublished(request: QueryThingModelPublishedRequest): Promise<QueryThingModelPublishedResponse>;
    queryTopicReverseRouteTableWithOptions(request: QueryTopicReverseRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<QueryTopicReverseRouteTableResponse>;
    queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): Promise<QueryTopicReverseRouteTableResponse>;
    queryTopicRouteTableWithOptions(request: QueryTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<QueryTopicRouteTableResponse>;
    queryTopicRouteTable(request: QueryTopicRouteTableRequest): Promise<QueryTopicRouteTableResponse>;
    rRpcWithOptions(request: RRpcRequest, runtime: $Util.RuntimeOptions): Promise<RRpcResponse>;
    rRpc(request: RRpcRequest): Promise<RRpcResponse>;
    refreshDeviceTunnelSharePasswordWithOptions(request: RefreshDeviceTunnelSharePasswordRequest, runtime: $Util.RuntimeOptions): Promise<RefreshDeviceTunnelSharePasswordResponse>;
    refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): Promise<RefreshDeviceTunnelSharePasswordResponse>;
    refreshStudioAppTokenOpenWithOptions(request: RefreshStudioAppTokenOpenRequest, runtime: $Util.RuntimeOptions): Promise<RefreshStudioAppTokenOpenResponse>;
    refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): Promise<RefreshStudioAppTokenOpenResponse>;
    registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: $Util.RuntimeOptions): Promise<RegisterDeviceResponse>;
    registerDevice(request: RegisterDeviceRequest): Promise<RegisterDeviceResponse>;
    releaseEdgeDriverVersionWithOptions(request: ReleaseEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseEdgeDriverVersionResponse>;
    releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): Promise<ReleaseEdgeDriverVersionResponse>;
    releaseProductWithOptions(request: ReleaseProductRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseProductResponse>;
    releaseProduct(request: ReleaseProductRequest): Promise<ReleaseProductResponse>;
    removeThingTopoWithOptions(request: RemoveThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<RemoveThingTopoResponse>;
    removeThingTopo(request: RemoveThingTopoRequest): Promise<RemoveThingTopoResponse>;
    replaceEdgeInstanceGatewayWithOptions(request: ReplaceEdgeInstanceGatewayRequest, runtime: $Util.RuntimeOptions): Promise<ReplaceEdgeInstanceGatewayResponse>;
    replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): Promise<ReplaceEdgeInstanceGatewayResponse>;
    rerunJobWithOptions(request: RerunJobRequest, runtime: $Util.RuntimeOptions): Promise<RerunJobResponse>;
    rerunJob(request: RerunJobRequest): Promise<RerunJobResponse>;
    resetConsumerGroupPositionWithOptions(request: ResetConsumerGroupPositionRequest, runtime: $Util.RuntimeOptions): Promise<ResetConsumerGroupPositionResponse>;
    resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): Promise<ResetConsumerGroupPositionResponse>;
    resetThingWithOptions(request: ResetThingRequest, runtime: $Util.RuntimeOptions): Promise<ResetThingResponse>;
    resetThing(request: ResetThingRequest): Promise<ResetThingResponse>;
    saveDevicePropWithOptions(request: SaveDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<SaveDevicePropResponse>;
    saveDeviceProp(request: SaveDevicePropRequest): Promise<SaveDevicePropResponse>;
    setDeviceDesiredPropertyWithOptions(request: SetDeviceDesiredPropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDeviceDesiredPropertyResponse>;
    setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): Promise<SetDeviceDesiredPropertyResponse>;
    setDeviceGroupTagsWithOptions(request: SetDeviceGroupTagsRequest, runtime: $Util.RuntimeOptions): Promise<SetDeviceGroupTagsResponse>;
    setDeviceGroupTags(request: SetDeviceGroupTagsRequest): Promise<SetDeviceGroupTagsResponse>;
    setDevicePropertyWithOptions(request: SetDevicePropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDevicePropertyResponse>;
    setDeviceProperty(request: SetDevicePropertyRequest): Promise<SetDevicePropertyResponse>;
    setDevicesPropertyWithOptions(request: SetDevicesPropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDevicesPropertyResponse>;
    setDevicesProperty(request: SetDevicesPropertyRequest): Promise<SetDevicesPropertyResponse>;
    setEdgeInstanceDriverConfigsWithOptions(request: SetEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<SetEdgeInstanceDriverConfigsResponse>;
    setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): Promise<SetEdgeInstanceDriverConfigsResponse>;
    setProductCertInfoWithOptions(request: SetProductCertInfoRequest, runtime: $Util.RuntimeOptions): Promise<SetProductCertInfoResponse>;
    setProductCertInfo(request: SetProductCertInfoRequest): Promise<SetProductCertInfoResponse>;
    setStudioProjectCooperationWithOptions(request: SetStudioProjectCooperationRequest, runtime: $Util.RuntimeOptions): Promise<SetStudioProjectCooperationResponse>;
    setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): Promise<SetStudioProjectCooperationResponse>;
    setupStudioAppAuthModeOpenWithOptions(request: SetupStudioAppAuthModeOpenRequest, runtime: $Util.RuntimeOptions): Promise<SetupStudioAppAuthModeOpenResponse>;
    setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): Promise<SetupStudioAppAuthModeOpenResponse>;
    speechByCombinationWithOptions(request: SpeechByCombinationRequest, runtime: $Util.RuntimeOptions): Promise<SpeechByCombinationResponse>;
    speechByCombination(request: SpeechByCombinationRequest): Promise<SpeechByCombinationResponse>;
    startCpuWithOptions(request: StartCpuRequest, runtime: $Util.RuntimeOptions): Promise<StartCpuResponse>;
    startCpu(request: StartCpuRequest): Promise<StartCpuResponse>;
    startRuleWithOptions(request: StartRuleRequest, runtime: $Util.RuntimeOptions): Promise<StartRuleResponse>;
    startRule(request: StartRuleRequest): Promise<StartRuleResponse>;
    stopRuleWithOptions(request: StopRuleRequest, runtime: $Util.RuntimeOptions): Promise<StopRuleResponse>;
    stopRule(request: StopRuleRequest): Promise<StopRuleResponse>;
    syncSpeechByCombinationWithOptions(request: SyncSpeechByCombinationRequest, runtime: $Util.RuntimeOptions): Promise<SyncSpeechByCombinationResponse>;
    syncSpeechByCombination(request: SyncSpeechByCombinationRequest): Promise<SyncSpeechByCombinationResponse>;
    testSpeechWithOptions(request: TestSpeechRequest, runtime: $Util.RuntimeOptions): Promise<TestSpeechResponse>;
    testSpeech(request: TestSpeechRequest): Promise<TestSpeechResponse>;
    triggerSceneRuleWithOptions(request: TriggerSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<TriggerSceneRuleResponse>;
    triggerSceneRule(request: TriggerSceneRuleRequest): Promise<TriggerSceneRuleResponse>;
    unbindApplicationFromEdgeInstanceWithOptions(request: UnbindApplicationFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindApplicationFromEdgeInstanceResponse>;
    unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): Promise<UnbindApplicationFromEdgeInstanceResponse>;
    unbindDriverFromEdgeInstanceWithOptions(request: UnbindDriverFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindDriverFromEdgeInstanceResponse>;
    unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): Promise<UnbindDriverFromEdgeInstanceResponse>;
    unbindRoleFromEdgeInstanceWithOptions(request: UnbindRoleFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindRoleFromEdgeInstanceResponse>;
    unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): Promise<UnbindRoleFromEdgeInstanceResponse>;
    unbindSceneRuleFromEdgeInstanceWithOptions(request: UnbindSceneRuleFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindSceneRuleFromEdgeInstanceResponse>;
    unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): Promise<UnbindSceneRuleFromEdgeInstanceResponse>;
    updateConsumerGroupWithOptions(request: UpdateConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateConsumerGroupResponse>;
    updateConsumerGroup(request: UpdateConsumerGroupRequest): Promise<UpdateConsumerGroupResponse>;
    updateDeviceGroupWithOptions(request: UpdateDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDeviceGroupResponse>;
    updateDeviceGroup(request: UpdateDeviceGroupRequest): Promise<UpdateDeviceGroupResponse>;
    updateDeviceShadowWithOptions(request: UpdateDeviceShadowRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDeviceShadowResponse>;
    updateDeviceShadow(request: UpdateDeviceShadowRequest): Promise<UpdateDeviceShadowResponse>;
    updateEdgeDriverVersionWithOptions(request: UpdateEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeDriverVersionResponse>;
    updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): Promise<UpdateEdgeDriverVersionResponse>;
    updateEdgeInstanceWithOptions(request: UpdateEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceResponse>;
    updateEdgeInstance(request: UpdateEdgeInstanceRequest): Promise<UpdateEdgeInstanceResponse>;
    updateEdgeInstanceChannelWithOptions(request: UpdateEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceChannelResponse>;
    updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): Promise<UpdateEdgeInstanceChannelResponse>;
    updateEdgeInstanceMessageRoutingWithOptions(request: UpdateEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceMessageRoutingResponse>;
    updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): Promise<UpdateEdgeInstanceMessageRoutingResponse>;
    updateJobWithOptions(request: UpdateJobRequest, runtime: $Util.RuntimeOptions): Promise<UpdateJobResponse>;
    updateJob(request: UpdateJobRequest): Promise<UpdateJobResponse>;
    updateOTAModuleWithOptions(request: UpdateOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateOTAModuleResponse>;
    updateOTAModule(request: UpdateOTAModuleRequest): Promise<UpdateOTAModuleResponse>;
    updateProductWithOptions(request: UpdateProductRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductResponse>;
    updateProduct(request: UpdateProductRequest): Promise<UpdateProductResponse>;
    updateProductFilterConfigWithOptions(request: UpdateProductFilterConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductFilterConfigResponse>;
    updateProductFilterConfig(request: UpdateProductFilterConfigRequest): Promise<UpdateProductFilterConfigResponse>;
    updateProductTagsWithOptions(request: UpdateProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductTagsResponse>;
    updateProductTags(request: UpdateProductTagsRequest): Promise<UpdateProductTagsResponse>;
    updateProductTopicWithOptions(request: UpdateProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductTopicResponse>;
    updateProductTopic(request: UpdateProductTopicRequest): Promise<UpdateProductTopicResponse>;
    updateRuleWithOptions(request: UpdateRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleResponse>;
    updateRule(request: UpdateRuleRequest): Promise<UpdateRuleResponse>;
    updateRuleActionWithOptions(request: UpdateRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleActionResponse>;
    updateRuleAction(request: UpdateRuleActionRequest): Promise<UpdateRuleActionResponse>;
    updateSceneRuleWithOptions(request: UpdateSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSceneRuleResponse>;
    updateSceneRule(request: UpdateSceneRuleRequest): Promise<UpdateSceneRuleResponse>;
    updateSpeechWithOptions(request: UpdateSpeechRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSpeechResponse>;
    updateSpeech(request: UpdateSpeechRequest): Promise<UpdateSpeechResponse>;
    updateSubscribeRelationWithOptions(request: UpdateSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSubscribeRelationResponse>;
    updateSubscribeRelation(request: UpdateSubscribeRelationRequest): Promise<UpdateSubscribeRelationResponse>;
    updateThingModelWithOptions(request: UpdateThingModelRequest, runtime: $Util.RuntimeOptions): Promise<UpdateThingModelResponse>;
    updateThingModel(request: UpdateThingModelRequest): Promise<UpdateThingModelResponse>;
    updateThingModelValidationConfigWithOptions(request: UpdateThingModelValidationConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateThingModelValidationConfigResponse>;
    updateThingModelValidationConfig(request: UpdateThingModelValidationConfigRequest): Promise<UpdateThingModelValidationConfigResponse>;
    updateThingScriptWithOptions(request: UpdateThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<UpdateThingScriptResponse>;
    updateThingScript(request: UpdateThingScriptRequest): Promise<UpdateThingScriptResponse>;
}
